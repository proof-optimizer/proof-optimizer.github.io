const DATA_MINIF2F = [
  {
    "problem_id": "mathd_algebra_478",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_478\n  (b h v : ℝ)\n  (h₀ : 0 < b ∧ 0 < h ∧ 0 < v)\n  (h₁ : v = 1 / 3 * (b * h))\n  (h₂ : b = 30)\n  (h₃ : h = 13 / 2) :\n  v = 65 := by\n  have h₄ : v = 65 := by\n    rw [h₁]\n    rw [h₂, h₃]\n    ring_nf at *\n    <;> norm_num at *\n    <;> linarith\n  \n  exact h₄",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_478\n  (b h v : ℝ)\n  (h₀ : 0 < b ∧ 0 < h ∧ 0 < v)\n  (h₁ : v = 1 / 3 * (b * h))\n  (h₂ : b = 30)\n  (h₃ : h = 13 / 2) :\n  v = 65 := by\n  subst_vars\n  linarith",
    "orig_proof_length": 30,
    "simp_proof_length": 2
  },
  {
    "problem_id": "mathd_numbertheory_3",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_3 :\n  (∑ x ∈ Finset.range 10, ((x + 1)^2)) % 10 = 5 := by\n  have h_sum : ∑ x ∈ Finset.range 10, ((x + 1)^2) = 385 := by\n    decide\n  \n  have h_mod : (∑ x ∈ Finset.range 10, ((x + 1)^2)) % 10 = 5 := by\n    rw [h_sum]\n    <;> norm_num\n  \n  apply h_mod",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_3 :\n  (∑ x ∈ Finset.range 10, ((x + 1)^2)) % 10 = 5 := by\n  decide",
    "orig_proof_length": 59,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_141",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_141\n  (a b : ℝ)\n  (h₁ : (a * b)=180)\n  (h₂ : 2 * (a + b)=54) :\n  (a^2 + b^2) = 369 := by\n  have h_sum : a + b = 27 := by\n    have h₃ : 2 * (a + b) = 54 := h₂\n    -- Divide both sides by 2 to solve for (a + b)\n    have h₄ : a + b = 27 := by\n      -- Use linear arithmetic to simplify the equation\n      linarith\n    exact h₄\n  \n  have h_main : a^2 + b^2 = 369 := by\n    have h₃ : a^2 + b^2 = (a + b)^2 - 2 * (a * b) := by\n      ring\n    rw [h₃]\n    rw [h_sum]\n    rw [h₁]\n    norm_num\n    <;>\n    linarith\n  \n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_141\n  (a b : ℝ)\n  (h₁ : (a * b)=180)\n  (h₂ : 2 * (a + b)=54) :\n  (a^2 + b^2) = 369 := by\n  nlinarith",
    "orig_proof_length": 101,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_44",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_44\n  (s t : ℝ)\n  (h₀ : s = 9 - 2 * t)\n  (h₁ : t = 3 * s + 1) :\n  s = 1 ∧ t = 4 := by\n  have h₂ : t = 4 := by\n    have h₂₁ : t = 3 * (9 - 2 * t) + 1 := by\n      rw [h₀] at h₁\n      linarith\n    -- Solve for t using the equation t = 3*(9 - 2*t) + 1\n    linarith\n  \n  have h₃ : s = 1 := by\n    have h₃₁ : s = 9 - 2 * t := h₀\n    rw [h₃₁]\n    rw [h₂]\n    norm_num\n  \n  have h₄ : s = 1 ∧ t = 4 := by\n    exact ⟨h₃, h₂⟩\n  \n  exact h₄",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_44\n  (s t : ℝ)\n  (h₀ : s = 9 - 2 * t)\n  (h₁ : t = 3 * s + 1) :\n  s = 1 ∧ t = 4 := by\n  constructor\n  all_goals\n    linarith",
    "orig_proof_length": 87,
    "simp_proof_length": 3
  },
  {
    "problem_id": "numbertheory_4x3m7y3neq2003",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem numbertheory_4x3m7y3neq2003\n  (x y : ℤ) :\n  4 * x^3 - 7 * y^3 ≠ 2003 := by\n  have h_main : (4 * x ^ 3 - 7 * y ^ 3) % 7 ≠ 2003 % 7 := by\n    have h₁ : (4 * x ^ 3 - 7 * y ^ 3) % 7 = (4 * x ^ 3) % 7 := by\n      have h₂ : (7 * y ^ 3 : ℤ) % 7 = 0 := by\n        norm_num [Int.mul_emod, pow_three]\n      have h₃ : (4 * x ^ 3 - 7 * y ^ 3 : ℤ) % 7 = ((4 * x ^ 3 : ℤ) % 7 - (7 * y ^ 3 : ℤ) % 7) % 7 := by\n        simp [Int.sub_emod]\n      rw [h₃]\n      simp [h₂]\n      <;> omega\n    have h₂ : (2003 : ℤ) % 7 = 1 := by norm_num\n    rw [h₁]\n    have h₃ : (4 * x ^ 3 : ℤ) % 7 ≠ 1 := by\n      have h₄ : x % 7 = 0 ∨ x % 7 = 1 ∨ x % 7 = 2 ∨ x % 7 = 3 ∨ x % 7 = 4 ∨ x % 7 = 5 ∨ x % 7 = 6 := by\n        omega\n      rcases h₄ with (h₄ | h₄ | h₄ | h₄ | h₄ | h₄ | h₄) <;>\n        (try { norm_num [h₄, pow_three, Int.mul_emod, Int.emod_emod] }) <;>\n        (try { omega }) <;>\n        (try {\n          simp [h₄, pow_three, Int.mul_emod, Int.emod_emod]\n          <;> norm_num <;> omega\n        })\n    have h₅ : (4 * x ^ 3 : ℤ) % 7 ≠ 1 := h₃\n    omega\n  \n  have h_final : 4 * x ^ 3 - 7 * y ^ 3 ≠ 2003 := by\n    intro h\n    have h₁ : (4 * x ^ 3 - 7 * y ^ 3) % 7 = 2003 % 7 := by\n      rw [h]\n    have h₂ : (4 * x ^ 3 - 7 * y ^ 3) % 7 ≠ 2003 % 7 := h_main\n    contradiction\n  \n  exact h_final",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem numbertheory_4x3m7y3neq2003\n  (x y : ℤ) :\n  4 * x^3 - 7 * y^3 ≠ 2003 := by\n  have : 4 * x ^ 3 % 7 ≠ 2003 % 7 := by\n    have : x % 7 = 0 ∨ x % 7 = 1 ∨ x % 7 = 2 ∨ x % 7 = 3 ∨ x % 7 = 4 ∨ x % 7 = 5 ∨ x % 7 = 6 := by omega\n    rcases this with (h | h | h | h | h | h | h) <;> simp [h, Int.mul_emod, pow_three]\n  omega",
    "orig_proof_length": 383,
    "simp_proof_length": 89
  },
  {
    "problem_id": "mathd_numbertheory_1124",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_1124\n  (n : ℕ)\n  (h₀ : n ≤ 9)\n  (h₁ : 18∣374 * 10 + n) :\n  n = 4 := by\n  have h_main : n = 4 := by\n    have h₂ : n ≤ 9 := h₀\n    interval_cases n <;> norm_num at h₁ ⊢ <;>\n      (try omega) <;>\n      (try {\n        rcases h₁ with ⟨k, hk⟩\n        norm_num at hk\n        <;> omega\n      })\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_1124\n  (n : ℕ)\n  (h₀ : n ≤ 9)\n  (h₁ : 18∣374 * 10 + n) :\n  n = 4 := by\n  omega",
    "orig_proof_length": 49,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_209",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_209\n  (σ : Equiv ℝ ℝ)\n  (h₀ : σ.2 2 = 10)\n  (h₁ : σ.2 10 = 1)\n  (h₂ : σ.2 1 = 2) :\n  σ.1 (σ.1 10) = 1 := by\n  have h₃ : σ.1 10 = 2 := by\n    have h₃₁ : σ.1 (σ.2 2) = 2 := by\n      apply Equiv.apply_symm_apply\n    rw [h₀] at h₃₁\n    exact h₃₁\n  \n  have h₄ : σ.1 2 = 1 := by\n    have h₄₁ : σ.1 (σ.2 1) = 1 := by\n      apply Equiv.apply_symm_apply\n    rw [h₂] at h₄₁\n    exact h₄₁\n  \n  have h₅ : σ.1 (σ.1 10) = 1 := by\n    rw [h₃]\n    rw [h₄]\n  \n  exact h₅",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_209\n  (σ : Equiv ℝ ℝ)\n  (h₀ : σ.2 2 = 10)\n  (h₁ : σ.2 10 = 1)\n  (h₂ : σ.2 1 = 2) :\n  σ.1 (σ.1 10) = 1 := by\n  have h₃ := σ.right_inv 2\n  have h₄ := σ.right_inv 1\n  simp_all",
    "orig_proof_length": 87,
    "simp_proof_length": 11
  },
  {
    "problem_id": "mathd_numbertheory_237",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_237 :\n  (∑ k ∈ (Finset.range 101), k) % 6 = 4 := by\n  have h_main : (∑ k ∈ (Finset.range 101), k) % 6 = 4 := by\n    rfl\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_237 :\n  (∑ k ∈ (Finset.range 101), k) % 6 = 4 := by\n  rfl",
    "orig_proof_length": 23,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_33",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_33\n  (x y z : ℝ)\n  (h₀ : x ≠ 0)\n  (h₁ : 2 * x = 5 * y)\n  (h₂ : 7 * y = 10 * z) :\n  z / x = 7 / 25 := by\n  have h₃ : y = (2 * x) / 5 := by\n    have h₃₁ : 5 * y = 2 * x := by linarith\n    have h₃₂ : y = (2 * x) / 5 := by\n      apply Eq.symm\n      -- Solve for y by dividing both sides by 5\n      ring_nf at h₃₁ ⊢\n      linarith\n    exact h₃₂\n  \n  have h₄ : z = (7 * x) / 25 := by\n    have h₄₁ : 7 * y = 10 * z := h₂\n    have h₄₂ : y = (2 * x) / 5 := h₃\n    rw [h₄₂] at h₄₁\n    -- Simplify the equation 7 * ((2 * x) / 5) = 10 * z\n    ring_nf at h₄₁ ⊢\n    -- Solve for z by dividing both sides by 10\n    linarith\n  \n  have h₅ : z / x = 7 / 25 := by\n    have h₅₁ : z = (7 * x) / 25 := h₄\n    rw [h₅₁]\n    -- Simplify ((7 * x) / 25) / x to 7 / 25\n    have h₅₂ : ((7 * x) / 25 : ℝ) / x = 7 / 25 := by\n      field_simp [h₀]\n      <;> ring_nf\n      <;> field_simp [h₀]\n      <;> ring_nf\n    rw [h₅₂]\n  \n  exact h₅",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_33\n  (x y z : ℝ)\n  (h₀ : x ≠ 0)\n  (h₁ : 2 * x = 5 * y)\n  (h₂ : 7 * y = 10 * z) :\n  z / x = 7 / 25 := by\n  field_simp\n  linarith",
    "orig_proof_length": 179,
    "simp_proof_length": 2
  },
  {
    "problem_id": "aime_1983_p1",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1983_p1 (x y z w : ℕ) (ht : 1 < x ∧ 1 < y ∧ 1 < z) (hw : 0 ≤ w)\n    (h0 : Real.log w / Real.log x = 24) (h1 : Real.log w / Real.log y = 40)\n    (h2 : Real.log w / Real.log (x * y * z) = 12) : Real.log w / Real.log z = 60 := by\n  have hx : (x : ℝ) > 1 := by\n    norm_cast\n    <;> linarith [ht.1]\n\n  have hy : (y : ℝ) > 1 := by\n    norm_cast\n    <;> linarith [ht.2.1]\n\n  have hz : (z : ℝ) > 1 := by\n    norm_cast\n    <;> linarith [ht.2.2]\n\n  have hwx : Real.log (w : ℝ) = 24 * Real.log (x : ℝ) := by\n    have h3 : Real.log (x : ℝ) ≠ 0 := by\n      have h4 : Real.log (x : ℝ) > 0 := Real.log_pos hx\n      linarith\n    have h4 : Real.log (w : ℝ) / Real.log (x : ℝ) = 24 := by simpa using h0\n    field_simp [h3] at h4 ⊢\n    <;> ring_nf at h4 ⊢ <;> nlinarith\n\n  have hwy : Real.log (w : ℝ) = 40 * Real.log (y : ℝ) := by\n    have h3 : Real.log (y : ℝ) ≠ 0 := by\n      have h4 : Real.log (y : ℝ) > 0 := Real.log_pos hy\n      linarith\n    have h4 : Real.log (w : ℝ) / Real.log (y : ℝ) = 40 := by simpa using h1\n    field_simp [h3] at h4 ⊢\n    <;> ring_nf at h4 ⊢ <;> nlinarith\n\n  have hxy : 3 * Real.log (x : ℝ) = 5 * Real.log (y : ℝ) := by\n    have h3 : 24 * Real.log (x : ℝ) = 40 * Real.log (y : ℝ) := by\n      linarith [hwx, hwy]\n    -- Simplify the equation 24 * Real.log x = 40 * Real.log y to 3 * Real.log x = 5 * Real.log y\n    have h4 : 3 * Real.log (x : ℝ) = 5 * Real.log (y : ℝ) := by\n      linarith\n    exact h4\n\n  have hxyz : Real.log (w : ℝ) = 12 * (Real.log (x : ℝ) + Real.log (y : ℝ) + Real.log (z : ℝ)) := by\n    have h3 : Real.log (x * y * z : ℝ) = Real.log (x : ℝ) + Real.log (y : ℝ) + Real.log (z : ℝ) := by\n      have h4 : (x : ℝ) > 0 := by positivity\n      have h5 : (y : ℝ) > 0 := by positivity\n      have h6 : (z : ℝ) > 0 := by positivity\n      have h7 : Real.log ((x : ℝ) * (y : ℝ) * (z : ℝ)) = Real.log ((x : ℝ) * (y : ℝ)) + Real.log (z : ℝ) := by\n        rw [Real.log_mul (by positivity) (by positivity)]\n      have h8 : Real.log ((x : ℝ) * (y : ℝ)) = Real.log (x : ℝ) + Real.log (y : ℝ) := by\n        rw [Real.log_mul (by positivity) (by positivity)]\n      rw [h7, h8]\n      <;> ring_nf\n      <;> field_simp [Real.log_mul, Real.log_mul]\n      <;> ring_nf\n      <;> linarith\n    have h4 : Real.log (w : ℝ) / Real.log (x * y * z : ℝ) = 12 := by simpa using h2\n    have h5 : Real.log (x * y * z : ℝ) ≠ 0 := by\n      have h6 : Real.log (x * y * z : ℝ) > 0 := by\n        have h7 : (x * y * z : ℝ) > 1 := by\n          have h8 : (x : ℝ) > 1 := by assumption_mod_cast\n          have h9 : (y : ℝ) > 1 := by assumption_mod_cast\n          have h10 : (z : ℝ) > 1 := by assumption_mod_cast\n          calc\n            (x * y * z : ℝ) = (x : ℝ) * (y : ℝ) * (z : ℝ) := by norm_cast\n            _ > 1 * 1 * 1 := by gcongr <;> nlinarith\n            _ = 1 := by norm_num\n        have h11 : Real.log (x * y * z : ℝ) > Real.log 1 := by\n          apply Real.log_lt_log (by positivity)\n          <;> norm_num at h7 ⊢ <;> nlinarith\n        have h12 : Real.log 1 = (0 : ℝ) := by norm_num\n        linarith\n      linarith\n    have h6 : Real.log (w : ℝ) = 12 * Real.log (x * y * z : ℝ) := by\n      field_simp [h5] at h4 ⊢\n      <;> nlinarith\n    rw [h6, h3]\n    <;> ring_nf\n    <;> linarith\n\n  have hxyz' : Real.log (x : ℝ) = Real.log (y : ℝ) + Real.log (z : ℝ) := by\n    have h3 : 24 * Real.log (x : ℝ) = 12 * (Real.log (x : ℝ) + Real.log (y : ℝ) + Real.log (z : ℝ)) := by\n      linarith [hwx, hxyz]\n    have h4 : 2 * Real.log (x : ℝ) = Real.log (x : ℝ) + Real.log (y : ℝ) + Real.log (z : ℝ) := by linarith\n    linarith\n\n  have hz' : Real.log (z : ℝ) = (2 / 5 : ℝ) * Real.log (x : ℝ) := by\n    have h3 : Real.log (x : ℝ) = Real.log (y : ℝ) + Real.log (z : ℝ) := hxyz'\n    have h4 : 3 * Real.log (x : ℝ) = 5 * Real.log (y : ℝ) := hxy\n    have h5 : Real.log (y : ℝ) = (3 / 5 : ℝ) * Real.log (x : ℝ) := by\n      have h6 : Real.log (y : ℝ) = (3 / 5 : ℝ) * Real.log (x : ℝ) := by\n        apply Eq.symm\n        -- Solve for Real.log y in terms of Real.log x\n        ring_nf at h4 ⊢\n        nlinarith\n      linarith\n    have h6 : Real.log (x : ℝ) = (3 / 5 : ℝ) * Real.log (x : ℝ) + Real.log (z : ℝ) := by\n      linarith\n    have h7 : Real.log (z : ℝ) = (2 / 5 : ℝ) * Real.log (x : ℝ) := by\n      ring_nf at h6 ⊢\n      nlinarith\n    exact h7\n\n  have h_main : Real.log (w : ℝ) / Real.log (z : ℝ) = 60 := by\n    have h3 : Real.log (w : ℝ) = 24 * Real.log (x : ℝ) := hwx\n    have h4 : Real.log (z : ℝ) = (2 / 5 : ℝ) * Real.log (x : ℝ) := hz'\n    have h5 : Real.log (x : ℝ) > 0 := Real.log_pos hx\n    have h6 : Real.log (z : ℝ) > 0 := by\n      have h7 : Real.log (z : ℝ) = (2 / 5 : ℝ) * Real.log (x : ℝ) := hz'\n      have h8 : (2 / 5 : ℝ) > 0 := by norm_num\n      have h9 : Real.log (x : ℝ) > 0 := Real.log_pos hx\n      have h10 : Real.log (z : ℝ) = (2 / 5 : ℝ) * Real.log (x : ℝ) := hz'\n      have h11 : Real.log (z : ℝ) > 0 := by\n        rw [h10]\n        positivity\n      linarith\n    have h7 : Real.log (w : ℝ) / Real.log (z : ℝ) = 60 := by\n      rw [h3, h4]\n      field_simp [h5.ne']\n      <;> ring_nf\n      <;> field_simp [h5.ne']\n      <;> nlinarith\n    exact h7\n\n  simpa using h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1983_p1 (x y z w : ℕ) (ht : 1 < x ∧ 1 < y ∧ 1 < z) (hw : 0 ≤ w)\n    (h0 : Real.log w / Real.log x = 24) (h1 : Real.log w / Real.log y = 40)\n    (h2 : Real.log w / Real.log (x * y * z) = 12) : Real.log w / Real.log z = 60 := by\n  have hx : 1 < (x : ℝ) := by norm_cast <;> linarith [ht.1]\n  have hy : 1 < (y : ℝ) := by norm_cast <;> linarith [ht.2.1]\n  have hz : 1 < (z : ℝ) := by norm_cast <;> linarith [ht.2.2]\n  have hwx : Real.log w = 24 * Real.log x := by\n    field_simp [Real.log_ne_zero_of_pos_of_ne_one (by positivity : (0 : ℝ) < x) (by linarith : (x : ℝ) ≠ 1)] at h0 ⊢\n    linarith\n  have hwy : Real.log w = 40 * Real.log y := by\n    field_simp [Real.log_ne_zero_of_pos_of_ne_one (by positivity : (0 : ℝ) < y) (by linarith : (y : ℝ) ≠ 1)] at h1 ⊢\n    linarith\n  have hxyz : Real.log w = 12 * (Real.log x + Real.log y + Real.log z) := by\n    have h3 : Real.log (x * y * z) = Real.log x + Real.log y + Real.log z := by\n      rw [Real.log_mul, Real.log_mul] <;> positivity\n    field_simp [Real.log_ne_zero_of_pos_of_ne_one (by positivity : (0 : ℝ) < x * y * z) (by\n      have : (x * y * z : ℝ) > 1 := by\n        have : (x : ℝ) > 1 := by assumption_mod_cast\n        have : (y : ℝ) > 1 := by assumption_mod_cast\n        have : (z : ℝ) > 1 := by assumption_mod_cast\n        calc\n          (x * y * z : ℝ) = (x : ℝ) * (y : ℝ) * (z : ℝ) := by norm_cast\n          _ > 1 * 1 * 1 := by gcongr\n          _ = 1 := by norm_num\n      linarith)] at h2 ⊢\n    linarith\n  field_simp [show Real.log x ≠ 0 by linarith [Real.log_pos hx], show Real.log y ≠ 0 by linarith [Real.log_pos hy], show Real.log z ≠ 0 by linarith [Real.log_pos hz]] at hwx hwy hxyz ⊢\n  linarith",
    "orig_proof_length": 1342,
    "simp_proof_length": 362
  },
  {
    "problem_id": "mathd_numbertheory_299",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_299 :\n  (1 * 3 * 5 * 7 * 9 * 11 * 13) % 10 = 5 := by\n  have h : (1 * 3 * 5 * 7 * 9 * 11 * 13) % 10 = 5 := by\n    norm_num [mul_assoc]\n    <;> rfl\n  \n  apply h",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_299 :\n  (1 * 3 * 5 * 7 * 9 * 11 * 13) % 10 = 5 := by\n  norm_num",
    "orig_proof_length": 33,
    "simp_proof_length": 1
  },
  {
    "problem_id": "amc12b_2020_p2",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2020_p2 :\n  ((100 ^ 2 - 7 ^ 2): ℝ) / (70 ^ 2 - 11 ^ 2) * ((70 - 11) * (70 + 11) / ((100 - 7) * (100 + 7))) = 1 := by\n  have h : ((100 ^ 2 - 7 ^ 2): ℝ) / (70 ^ 2 - 11 ^ 2) * ((70 - 11) * (70 + 11) / ((100 - 7) * (100 + 7))) = 1 := by\n    norm_num [pow_two]\n    <;>\n    ring_nf\n    <;>\n    norm_num\n    <;>\n    rfl\n  \n  apply h",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2020_p2 :\n  ((100 ^ 2 - 7 ^ 2): ℝ) / (70 ^ 2 - 11 ^ 2) * ((70 - 11) * (70 + 11) / ((100 - 7) * (100 + 7))) = 1 := by\n  norm_num",
    "orig_proof_length": 71,
    "simp_proof_length": 1
  },
  {
    "problem_id": "amc12b_2021_p3",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2021_p3\n  (x : ℝ)\n  (h₀ : 2 + 1 / (1 + 1 / (2 + 2 / (3 + x))) = 144 / 53) :\n  x = 3 / 4 := by\n  have h₁ : 1 / (1 + 1 / (2 + 2 / (3 + x))) = 38 / 53 := by\n    have h₁₁ : 1 / (1 + 1 / (2 + 2 / (3 + x))) = 144 / 53 - 2 := by\n      linarith\n    rw [h₁₁]\n    norm_num\n  \n  have h₂ : 1 + 1 / (2 + 2 / (3 + x)) = 53 / 38 := by\n    have h₂₁ : 1 + 1 / (2 + 2 / (3 + x)) = 1 / (38 / 53) := by\n      have h₂₂ : 1 / (1 + 1 / (2 + 2 / (3 + x))) = 38 / 53 := h₁\n      have h₂₃ : 1 + 1 / (2 + 2 / (3 + x)) ≠ 0 := by\n        by_contra h\n        rw [h] at h₂₂\n        norm_num at h₂₂ ⊢\n        <;> linarith\n      have h₂₄ : 1 / (1 + 1 / (2 + 2 / (3 + x))) = 38 / 53 := h₁\n      have h₂₅ : (1 + 1 / (2 + 2 / (3 + x))) = 1 / (38 / 53) := by\n        have h₂₆ : (1 + 1 / (2 + 2 / (3 + x))) ≠ 0 := h₂₃\n        field_simp at h₂₄ ⊢\n        <;> nlinarith\n      linarith\n    rw [h₂₁]\n    <;> norm_num\n  \n  have h₃ : 1 / (2 + 2 / (3 + x)) = 15 / 38 := by\n    have h₃₁ : 1 / (2 + 2 / (3 + x)) = 53 / 38 - 1 := by\n      linarith\n    rw [h₃₁]\n    <;> norm_num\n  \n  have h₄ : 2 + 2 / (3 + x) = 38 / 15 := by\n    have h₄₁ : 2 + 2 / (3 + x) = 1 / (15 / 38) := by\n      have h₄₂ : 1 / (2 + 2 / (3 + x)) = 15 / 38 := h₃\n      have h₄₃ : 2 + 2 / (3 + x) ≠ 0 := by\n        by_contra h\n        rw [h] at h₄₂\n        norm_num at h₄₂ ⊢\n        <;> linarith\n      have h₄₄ : 1 / (2 + 2 / (3 + x)) = 15 / 38 := h₃\n      have h₄₅ : (2 + 2 / (3 + x)) = 1 / (15 / 38) := by\n        have h₄₆ : (2 + 2 / (3 + x)) ≠ 0 := h₄₃\n        field_simp at h₄₄ ⊢\n        <;> nlinarith\n      linarith\n    rw [h₄₁]\n    <;> norm_num\n  \n  have h₅ : 2 / (3 + x) = 8 / 15 := by\n    have h₅₁ : 2 / (3 + x) = 38 / 15 - 2 := by\n      linarith\n    rw [h₅₁]\n    <;> norm_num\n    <;>\n    (try ring_nf at * <;> linarith)\n    <;>\n    (try field_simp at * <;> ring_nf at * <;> linarith)\n  \n  have h₆ : (3 + x) / 2 = 15 / 8 := by\n    have h₆₁ : (3 + x) / 2 = 15 / 8 := by\n      have h₆₂ : 2 / (3 + x) = 8 / 15 := h₅\n      have h₆₃ : 3 + x ≠ 0 := by\n        by_contra h\n        rw [h] at h₆₂\n        norm_num at h₆₂ ⊢\n        <;> linarith\n      have h₆₄ : (3 + x) / 2 = 15 / 8 := by\n        have h₆₅ : 2 / (3 + x) = 8 / 15 := h₅\n        field_simp at h₆₅ ⊢\n        <;> nlinarith\n      exact h₆₄\n    exact h₆₁\n  \n  have h₇ : 3 + x = 15 / 4 := by\n    have h₇₁ : (3 + x) / 2 = 15 / 8 := h₆\n    have h₇₂ : 3 + x = 15 / 4 := by\n      linarith\n    exact h₇₂\n  \n  have h₈ : x = 3 / 4 := by\n    have h₈₁ : 3 + x = 15 / 4 := h₇\n    have h₈₂ : x = 3 / 4 := by\n      linarith\n    exact h₈₂\n  \n  exact h₈",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2021_p3\n  (x : ℝ)\n  (h₀ : 2 + 1 / (1 + 1 / (2 + 2 / (3 + x))) = 144 / 53) :\n  x = 3 / 4 := by\n  have h₁ : 1 / (1 + 1 / (2 + 2 / (3 + x))) = 38 / 53 := by\n    linarith\n  have h₂ : 1 + 1 / (2 + 2 / (3 + x)) ≠ 0 := by\n    by_contra h\n    rw [h] at h₁\n    norm_num at h₁ ⊢\n  field_simp at h₁\n  have h₃ : 2 / (3 + x) = 8 / 15 := by\n    have h₃ : 2 + 2 / (3 + x) = 38 / 15 := by\n      have h₄ : 1 / (2 + 2 / (3 + x)) = 15 / 38 := by\n        linarith\n      have h₅ : 2 + 2 / (3 + x) ≠ 0 := by\n        by_contra h\n        rw [h] at h₄\n        norm_num at h₄ ⊢\n      field_simp at h₄ ⊢\n      linarith\n    linarith\n  have h₄ : (3 + x) / 2 = 15 / 8 := by\n    have h₅ : 2 / (3 + x) = 8 / 15 := by\n      linarith\n    have h₆ : 3 + x ≠ 0 := by\n      by_contra h\n      rw [h] at h₅\n      norm_num at h₅ ⊢\n    field_simp at h₅ ⊢\n    linarith\n  linarith",
    "orig_proof_length": 762,
    "simp_proof_length": 218
  },
  {
    "problem_id": "mathd_algebra_419",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_419\n  (a b : ℝ)\n  (h₀ : a = -1)\n  (h₁ : b = 5) :\n  -a - b^2 + 3 * (a * b) = -39 := by\n  have h₂ : -a - b^2 + 3 * (a * b) = -39 := by\n    rw [h₀, h₁]\n    norm_num\n    <;>\n    ring_nf\n    <;>\n    norm_num\n    <;>\n    linarith\n  exact h₂",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_419\n  (a b : ℝ)\n  (h₀ : a = -1)\n  (h₁ : b = 5) :\n  -a - b^2 + 3 * (a * b) = -39 := by\n  subst_vars\n  norm_num",
    "orig_proof_length": 37,
    "simp_proof_length": 2
  },
  {
    "problem_id": "algebra_sqineq_unitcircatbpabsamblt1",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_sqineq_unitcircatbpabsamblt1\n  (a b: ℝ)\n  (h₀ : a^2 + b^2 = 1) :\n  a * b + |a - b| ≤ 1 := by\n  have h_main : a * b + |a - b| ≤ 1 := by\n    cases' le_or_lt 0 (a - b) with h h\n    · -- Case 1: a - b ≥ 0\n      have h₁ : |a - b| = a - b := by\n        rw [abs_of_nonneg h]\n      rw [h₁]\n      have h₂ : (a - b) ^ 2 = 1 - 2 * (a * b) := by\n        nlinarith\n      have h₃ : a * b + (a - b) ≤ 1 := by\n        nlinarith [sq_nonneg (a - b - 1)]\n      linarith\n    · -- Case 2: a - b < 0\n      have h₁ : |a - b| = -(a - b) := by\n        rw [abs_of_neg h]\n        <;> linarith\n      rw [h₁]\n      have h₂ : (a - b) ^ 2 = 1 - 2 * (a * b) := by\n        nlinarith\n      have h₃ : a * b + (-(a - b)) ≤ 1 := by\n        nlinarith [sq_nonneg (a - b + 1)]\n      linarith\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_sqineq_unitcircatbpabsamblt1\n  (a b: ℝ)\n  (h₀ : a^2 + b^2 = 1) :\n  a * b + |a - b| ≤ 1 := by\n  nlinarith [abs_mul_abs_self (a - b)]",
    "orig_proof_length": 187,
    "simp_proof_length": 9
  },
  {
    "problem_id": "imo_1983_p6",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem imo_1983_p6\n  (a b c : ℝ)\n  (h₀ : 0 < a ∧ 0 < b ∧ 0 < c)\n  (h₁ : c < a + b)\n  (h₂ : b < a + c)\n  (h₃ : a < b + c) :\n  0 ≤ a^2 * b * (a - b) + b^2 * c * (b - c) + c^2 * a * (c - a) := by\n  have h_main : 0 ≤ a^2 * b * (a - b) + b^2 * c * (b - c) + c^2 * a * (c - a) := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a),\n      mul_nonneg h₀.1.le h₀.2.1.le, mul_nonneg h₀.2.1.le h₀.2.2.le, mul_nonneg h₀.2.2.le h₀.1.le,\n      mul_nonneg (sq_nonneg (a - b)) h₀.2.2.le, mul_nonneg (sq_nonneg (b - c)) h₀.1.le,\n      mul_nonneg (sq_nonneg (c - a)) h₀.2.1.le, mul_pos h₀.1 h₀.2.1, mul_pos h₀.2.1 h₀.2.2,\n      mul_pos h₀.2.2 h₀.1, mul_pos (sub_pos.mpr h₁) (sub_pos.mpr h₂),\n      mul_pos (sub_pos.mpr h₂) (sub_pos.mpr h₃), mul_pos (sub_pos.mpr h₃) (sub_pos.mpr h₁),\n      sq_nonneg (a + b - 2 * c), sq_nonneg (b + c - 2 * a), sq_nonneg (c + a - 2 * b)]\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem imo_1983_p6\n  (a b c : ℝ)\n  (h₀ : 0 < a ∧ 0 < b ∧ 0 < c)\n  (h₁ : c < a + b)\n  (h₂ : b < a + c)\n  (h₃ : a < b + c) :\n  0 ≤ a^2 * b * (a - b) + b^2 * c * (b - c) + c^2 * a * (c - a) := by\n  nlinarith [mul_pos (sub_pos.mpr h₁) (sub_pos.mpr h₂), mul_pos (sub_pos.mpr h₂) (sub_pos.mpr h₃), mul_pos (sub_pos.mpr h₃) (sub_pos.mpr h₁), sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
    "orig_proof_length": 187,
    "simp_proof_length": 53
  },
  {
    "problem_id": "mathd_numbertheory_427",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_427\n  (a : ℕ)\n  (h₀ : a = (∑ k ∈ (Nat.divisors 500), k)) :\n  ∑ k ∈ Finset.filter (λ x => Nat.Prime x) (Nat.divisors a), k = 25 := by\n  have h₁ : (∑ k ∈ Nat.divisors 500, k) = 1092 := by\n    rw [show (∑ k ∈ Nat.divisors 500, k) = 1092 by\n      rw [Nat.divisors]\n      -- We need to compute the sum of all divisors of 500.\n      -- First, we find all divisors of 500 by factoring it into primes: 500 = 2^2 * 5^3.\n      -- The divisors are all numbers of the form 2^a * 5^b where 0 ≤ a ≤ 2 and 0 ≤ b ≤ 3.\n      -- We can enumerate them as follows:\n      -- 1, 2, 4, 5, 10, 20, 25, 50, 100, 125, 250, 500.\n      -- Their sum is 1 + 2 + 4 + 5 + 10 + 20 + 25 + 50 + 100 + 125 + 250 + 500 = 1092.\n      -- We will use the fact that the sum of divisors function is multiplicative.\n      -- For n = p1^e1 * p2^e2 * ... * pk^ek, σ(n) = (p1^0 + p1^1 + ... + p1^e1) * ... * (pk^0 + pk^1 + ... + pk^ek).\n      -- For 500 = 2^2 * 5^3, σ(500) = (1 + 2 + 4) * (1 + 5 + 25 + 125) = 7 * 156 = 1092.\n      -- We can also compute the sum directly by listing all divisors.\n      -- Here, we will use the multiplicative property to compute the sum.\n      -- First, we find the sum of divisors of 4 (2^2): 1 + 2 + 4 = 7.\n      -- Next, we find the sum of divisors of 125 (5^3): 1 + 5 + 25 + 125 = 156.\n      -- Then, we multiply these sums: 7 * 156 = 1092.\n      -- This matches the direct computation.\n      -- In Lean, we can use the fact that the sum of divisors of 500 is 1092.\n      -- We can compute the sum of divisors of 500 directly by evaluating the sum.\n      rfl\n    ]\n    <;> decide\n  \n  have h₂ : a = 1092 := by\n    rw [h₀]\n    rw [h₁]\n    <;> rfl\n  \n  have h₃ : ∑ k ∈ Finset.filter (fun x => Nat.Prime x) (Nat.divisors a), k = 25 := by\n    rw [h₂]\n    -- Now we need to find the sum of the prime divisors of 1092\n    -- The prime factorization of 1092 is 2^2 * 3 * 7 * 13\n    -- The prime divisors are 2, 3, 7, 13\n    -- Their sum is 2 + 3 + 7 + 13 = 25\n    rw [show (∑ k ∈ Finset.filter (fun x => Nat.Prime x) (Nat.divisors 1092), k) = 25 by\n      rw [show (Finset.filter (fun x => Nat.Prime x) (Nat.divisors 1092)) = {2, 3, 7, 13} by\n        -- We need to show that the prime divisors of 1092 are exactly {2, 3, 7, 13}\n        apply Finset.ext\n        intro x\n        simp only [Finset.mem_filter, Finset.mem_insert, Finset.mem_singleton, Nat.mem_divisors]\n        constructor\n        · -- Prove the forward direction: if x is a prime divisor of 1092, then x is in {2, 3, 7, 13}\n          intro h\n          have h₁ : x ∣ 1092 := by tauto\n          have h₂ : Nat.Prime x := by tauto\n          have h₃ : x ≠ 0 := by\n            intro h₄\n            rw [h₄] at h₂\n            norm_num at h₂\n          have h₄ : x ≤ 1092 := Nat.le_of_dvd (by norm_num) h₁\n          interval_cases x <;> norm_num [Nat.Prime] at h₂ ⊢ <;>\n            (try omega) <;> (try norm_num at h₁ ⊢) <;> (try contradiction) <;> (try aesop)\n        · -- Prove the reverse direction: if x is in {2, 3, 7, 13}, then x is a prime divisor of 1092\n          intro h\n          have h₁ : x = 2 ∨ x = 3 ∨ x = 7 ∨ x = 13 := by aesop\n          rcases h₁ with (rfl | rfl | rfl | rfl)\n          · -- Case x = 2\n            norm_num [Nat.Prime]\n            <;> decide\n          · -- Case x = 3\n            norm_num [Nat.Prime]\n            <;> decide\n          · -- Case x = 7\n            norm_num [Nat.Prime]\n            <;> decide\n          · -- Case x = 13\n            norm_num [Nat.Prime]\n            <;> decide\n      ]\n      -- Now we need to compute the sum of the elements in {2, 3, 7, 13}\n      norm_num\n      <;> rfl\n    ]\n  \n  apply h₃",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_427\n  (a : ℕ)\n  (h₀ : a = (∑ k ∈ (Nat.divisors 500), k)) :\n  ∑ k ∈ Finset.filter (λ x => Nat.Prime x) (Nat.divisors a), k = 25 := by\n  rw [h₀, show (∑ k ∈ Nat.divisors 500, k) = 1092 by rfl]\n  norm_num\n  rw [show (Finset.filter (fun x => Nat.Prime x) (Nat.divisors 1092)) = {2, 3, 7, 13} by\n    ext x\n    simp only [Finset.mem_filter, Finset.mem_insert, Finset.mem_singleton, Nat.mem_divisors]\n    constructor\n    ·\n      intro h\n      have h₁ : x ∣ 1092 := by tauto\n      have h₂ : Nat.Prime x := by tauto\n      have h₃ : x ≠ 0 := by\n        intro h₄\n        rw [h₄] at h₂\n        norm_num at h₂\n      have h₄ : x ≤ 1092 := Nat.le_of_dvd (by norm_num) h₁\n      interval_cases x <;> norm_num [Nat.Prime] at h₂ ⊢ <;> omega\n    ·\n      intro h\n      rcases h with (rfl | rfl | rfl | rfl) <;>\n        norm_num [Nat.Prime]\n  ]\n  norm_num",
    "orig_proof_length": 336,
    "simp_proof_length": 148
  },
  {
    "problem_id": "numbertheory_x5neqy2p4",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem numbertheory_x5neqy2p4\n  (x y : ℤ) :\n  x^5 ≠ y^2 + 4 := by\n  have h_main : x^5 % 11 ≠ (y^2 + 4) % 11 := by\n    have h₁ : x % 11 = 0 ∨ x % 11 = 1 ∨ x % 11 = 2 ∨ x % 11 = 3 ∨ x % 11 = 4 ∨ x % 11 = 5 ∨ x % 11 = 6 ∨ x % 11 = 7 ∨ x % 11 = 8 ∨ x % 11 = 9 ∨ x % 11 = 10 := by\n      omega\n    have h₂ : y % 11 = 0 ∨ y % 11 = 1 ∨ y % 11 = 2 ∨ y % 11 = 3 ∨ y % 11 = 4 ∨ y % 11 = 5 ∨ y % 11 = 6 ∨ y % 11 = 7 ∨ y % 11 = 8 ∨ y % 11 = 9 ∨ y % 11 = 10 := by\n      omega\n    -- Consider all possible values of x mod 11 and y mod 11\n    rcases h₁ with (h₁ | h₁ | h₁ | h₁ | h₁ | h₁ | h₁ | h₁ | h₁ | h₁ | h₁) <;>\n    rcases h₂ with (h₂ | h₂ | h₂ | h₂ | h₂ | h₂ | h₂ | h₂ | h₂ | h₂ | h₂) <;>\n    -- Simplify x^5 mod 11 and y^2 + 4 mod 11 for each case\n    simp [h₁, h₂, pow_succ, Int.mul_emod, Int.add_emod, Int.emod_emod] <;>\n    (try omega) <;>\n    (try norm_num at * <;> omega) <;>\n    (try {\n      ring_nf at *\n      <;> norm_num at *\n      <;> omega\n    })\n  \n  have h_final : x^5 ≠ y^2 + 4 := by\n    intro h\n    have h₁ : x^5 % 11 = (y^2 + 4) % 11 := by\n      rw [h]\n    have h₂ : x^5 % 11 ≠ (y^2 + 4) % 11 := h_main\n    contradiction\n  \n  exact h_final",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem numbertheory_x5neqy2p4\n  (x y : ℤ) :\n  x^5 ≠ y^2 + 4 := by\n  have : x^5 % 11 ≠ (y^2 + 4) % 11 := by\n    have : ∀ x : ℤ, x % 11 = 0 ∨ x % 11 = 1 ∨ x % 11 = 2 ∨ x % 11 = 3 ∨ x % 11 = 4 ∨ x % 11 = 5 ∨ x % 11 = 6 ∨ x % 11 = 7 ∨ x % 11 = 8 ∨ x % 11 = 9 ∨ x % 11 = 10 := by\n      intro x\n      omega\n    rcases this x with (h₁ | h₁ | h₁ | h₁ | h₁ | h₁ | h₁ | h₁ | h₁ | h₁ | h₁) <;>\n    rcases this y with (h₂ | h₂ | h₂ | h₂ | h₂ | h₂ | h₂ | h₂ | h₂ | h₂ | h₂) <;>\n    simp [h₁, h₂, pow_succ, Int.mul_emod, Int.add_emod, Int.emod_emod]\n  omega",
    "orig_proof_length": 326,
    "simp_proof_length": 167
  },
  {
    "problem_id": "mathd_algebra_398",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_398\n  (a b c : ℝ)\n  (h₀ : 0 < a ∧ 0 < b ∧ 0 < c)\n  (h₁ : 9 * b = 20 * c)\n  (h₂ : 7 * a = 4 * b) :\n  63 * a = 80 * c := by\n  have h₃ : 63 * a = 36 * b := by\n    have h₃₁ : 63 * a = 9 * (7 * a) := by ring\n    rw [h₃₁]\n    have h₃₂ : 7 * a = 4 * b := h₂\n    rw [h₃₂]\n    ring\n    <;> linarith\n  \n  have h₄ : 36 * b = 80 * c := by\n    have h₄₁ : 36 * b = 4 * (9 * b) := by ring\n    rw [h₄₁]\n    have h₄₂ : 9 * b = 20 * c := h₁\n    rw [h₄₂]\n    <;> ring\n    <;> linarith\n  \n  have h₅ : 63 * a = 80 * c := by\n    linarith\n  \n  exact h₅",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_398\n  (a b c : ℝ)\n  (h₀ : 0 < a ∧ 0 < b ∧ 0 < c)\n  (h₁ : 9 * b = 20 * c)\n  (h₂ : 7 * a = 4 * b) :\n  63 * a = 80 * c := by\n  nlinarith",
    "orig_proof_length": 123,
    "simp_proof_length": 1
  },
  {
    "problem_id": "imo_1960_p2",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem imo_1960_p2\n  (x : ℝ)\n  (h₀ : 0 ≤ 1 + 2 * x)\n  (h₁ : (1 - Real.sqrt (1 + 2 * x))^2 ≠ 0)\n  (h₂ : (4 * x^2) / (1 - Real.sqrt (1 + 2*x))^2 < 2*x + 9)\n  (h₃ : x ≠ 0) :\n  -(1 / 2) ≤ x ∧ x < 45 / 8 := by\n  have h₄ : -(1 / 2 : ℝ) ≤ x := by\n    have h₄₁ : 0 ≤ 1 + 2 * x := h₀\n    have h₄₂ : -(1 / 2 : ℝ) ≤ x := by\n      linarith\n    exact h₄₂\n  \n  have h₅ : x < 45 / 8 := by\n    have h₅₁ : 0 ≤ 1 + 2 * x := h₀\n    set s := Real.sqrt (1 + 2 * x) with hs\n    have h₅₂ : s ≥ 0 := Real.sqrt_nonneg _\n    have h₅₃ : s ^ 2 = 1 + 2 * x := by\n      rw [hs]\n      rw [Real.sq_sqrt] <;> linarith\n    have h₅₄ : (1 - s) ^ 2 ≠ 0 := by simpa [hs] using h₁\n    have h₅₅ : s ≠ 1 := by\n      intro h\n      have h₅₅₁ : (1 - s) ^ 2 = 0 := by\n        rw [h]\n        norm_num\n      contradiction\n    have h₅₆ : (s + 1) ^ 2 * (s - 1) ^ 2 = (s ^ 2 - 1) ^ 2 := by\n      have h₅₆₁ : (s + 1) ^ 2 * (s - 1) ^ 2 = ((s + 1) * (s - 1)) ^ 2 := by\n        ring\n      rw [h₅₆₁]\n      have h₅₆₂ : (s + 1) * (s - 1) = s ^ 2 - 1 := by ring\n      rw [h₅₆₂]\n      <;> ring\n    have h₅₇ : (s ^ 2 - 1 : ℝ) ^ 2 = 4 * x ^ 2 := by\n      have h₅₇₁ : s ^ 2 = 1 + 2 * x := h₅₃\n      have h₅₇₂ : (s ^ 2 - 1 : ℝ) = 2 * x := by linarith\n      calc\n        (s ^ 2 - 1 : ℝ) ^ 2 = (2 * x) ^ 2 := by rw [h₅₇₂]\n        _ = 4 * x ^ 2 := by ring\n    have h₅₈ : (4 : ℝ) * x ^ 2 / (s - 1) ^ 2 = (s + 1) ^ 2 := by\n      have h₅₈₁ : (s - 1 : ℝ) ^ 2 ≠ 0 := by\n        intro h\n        have h₅₈₂ : (1 - s : ℝ) ^ 2 = 0 := by\n          calc\n            (1 - s : ℝ) ^ 2 = (s - 1 : ℝ) ^ 2 := by ring\n            _ = 0 := by rw [h]\n        contradiction\n      have h₅₈₂ : (s + 1 : ℝ) ^ 2 * (s - 1 : ℝ) ^ 2 = (s ^ 2 - 1 : ℝ) ^ 2 := by\n        linarith\n      have h₅₈₃ : (s ^ 2 - 1 : ℝ) ^ 2 = 4 * x ^ 2 := by\n        linarith\n      have h₅₈₄ : (s + 1 : ℝ) ^ 2 * (s - 1 : ℝ) ^ 2 = 4 * x ^ 2 := by\n        linarith\n      have h₅₈₅ : (4 : ℝ) * x ^ 2 / (s - 1) ^ 2 = (s + 1) ^ 2 := by\n        have h₅₈₆ : (s + 1 : ℝ) ^ 2 = (4 : ℝ) * x ^ 2 / (s - 1) ^ 2 := by\n          field_simp [h₅₈₁] at h₅₈₄ ⊢\n          <;> nlinarith\n        linarith\n      exact h₅₈₅\n    have h₅₉ : (4 : ℝ) * x ^ 2 / (1 - s) ^ 2 = (s + 1) ^ 2 := by\n      have h₅₉₁ : (1 - s : ℝ) ^ 2 = (s - 1 : ℝ) ^ 2 := by\n        ring\n      rw [h₅₉₁]\n      rw [h₅₈]\n    have h₅₁₀ : (s + 1) ^ 2 < s ^ 2 + 8 := by\n      have h₅₁₀₁ : (4 : ℝ) * x ^ 2 / (1 - s) ^ 2 < 2 * x + 9 := h₂\n      have h₅₁₀₂ : (4 : ℝ) * x ^ 2 / (1 - s) ^ 2 = (s + 1) ^ 2 := h₅₉\n      rw [h₅₁₀₂] at h₅₁₀₁\n      have h₅₁₀₃ : (s + 1) ^ 2 < 2 * x + 9 := by linarith\n      have h₅₁₀₄ : (2 : ℝ) * x = s ^ 2 - 1 := by\n        nlinarith [h₅₃]\n      nlinarith [h₅₃]\n    have h₅₁₁ : s < 7 / 2 := by\n      nlinarith [sq_nonneg (s - 1)]\n    have h₅₁₂ : s ^ 2 < (7 / 2 : ℝ) ^ 2 := by\n      have h₅₁₂₁ : 0 ≤ s := h₅₂\n      have h₅₁₂₂ : s < 7 / 2 := h₅₁₁\n      nlinarith [sq_nonneg (s - 7 / 2)]\n    have h₅₁₃ : 1 + 2 * x < (7 / 2 : ℝ) ^ 2 := by\n      nlinarith [h₅₃]\n    have h₅₁₄ : x < 45 / 8 := by\n      norm_num at h₅₁₃ ⊢\n      <;> nlinarith\n    exact h₅₁₄\n  \n  exact ⟨h₄, h₅⟩",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem imo_1960_p2\n  (x : ℝ)\n  (h₀ : 0 ≤ 1 + 2 * x)\n  (h₁ : (1 - Real.sqrt (1 + 2 * x))^2 ≠ 0)\n  (h₂ : (4 * x^2) / (1 - Real.sqrt (1 + 2*x))^2 < 2*x + 9)\n  (h₃ : x ≠ 0) :\n  -(1 / 2) ≤ x ∧ x < 45 / 8 := by\n  constructor\n  · nlinarith [sq_nonneg (x + 1 / 2)]\n  · have h₅₇ : (4 : ℝ) * x ^ 2 / (1 - Real.sqrt (1 + 2 * x)) ^ 2 = (1 + Real.sqrt (1 + 2 * x)) ^ 2 := by\n      have h₅₈ : (1 - Real.sqrt (1 + 2 * x)) ^ 2 ≠ 0 := by assumption\n      field_simp [h₅₈]\n      nlinarith [sq_sqrt (show 0 ≤ 1 + 2 * x by assumption)]\n    nlinarith [sq_sqrt (show 0 ≤ 1 + 2 * x by assumption),\n      Real.sqrt_nonneg (1 + 2 * x)]",
    "orig_proof_length": 922,
    "simp_proof_length": 125
  },
  {
    "problem_id": "imo_1963_p5",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem imo_1963_p5 :\n  Real.cos (π / 7) - Real.cos (2 * π / 7) + Real.cos (3 * π / 7) = 1 / 2 := by\n  have h₁ : 2 * Real.sin (π / 7) * (Real.cos (π / 7) - Real.cos (2 * π / 7) + Real.cos (3 * π / 7)) = Real.sin (π / 7) := by\n    have h₂ : 2 * Real.sin (π / 7) * Real.cos (π / 7) = Real.sin (2 * π / 7) := by\n      have h₃ : Real.sin (2 * π / 7) = 2 * Real.sin (π / 7) * Real.cos (π / 7) := by\n        have h₄ : Real.sin (2 * π / 7) = Real.sin (2 * (π / 7)) := by ring\n        rw [h₄]\n        have h₅ : Real.sin (2 * (π / 7)) = 2 * Real.sin (π / 7) * Real.cos (π / 7) := by\n          rw [Real.sin_two_mul]\n          <;> ring\n        rw [h₅]\n        <;> ring\n      linarith\n    have h₃ : 2 * Real.sin (π / 7) * Real.cos (2 * π / 7) = Real.sin (3 * π / 7) + Real.sin (- (π / 7)) := by\n      have h₄ : 2 * Real.sin (π / 7) * Real.cos (2 * π / 7) = Real.sin (3 * π / 7) + Real.sin (- (π / 7)) := by\n        have h₅ : 2 * Real.sin (π / 7) * Real.cos (2 * π / 7) = Real.sin (π / 7 + 2 * π / 7) + Real.sin (π / 7 - 2 * π / 7) := by\n          have h₆ : 2 * Real.sin (π / 7) * Real.cos (2 * π / 7) = Real.sin (π / 7 + 2 * π / 7) + Real.sin (π / 7 - 2 * π / 7) := by\n            have h₇ : Real.sin (π / 7 + 2 * π / 7) = Real.sin (π / 7) * Real.cos (2 * π / 7) + Real.cos (π / 7) * Real.sin (2 * π / 7) := by\n              rw [Real.sin_add]\n            have h₈ : Real.sin (π / 7 - 2 * π / 7) = Real.sin (π / 7) * Real.cos (2 * π / 7) - Real.cos (π / 7) * Real.sin (2 * π / 7) := by\n              rw [Real.sin_sub]\n            have h₉ : Real.sin (π / 7 + 2 * π / 7) + Real.sin (π / 7 - 2 * π / 7) = 2 * Real.sin (π / 7) * Real.cos (2 * π / 7) := by\n              linarith\n            linarith\n          linarith\n        have h₁₀ : Real.sin (π / 7 + 2 * π / 7) = Real.sin (3 * π / 7) := by\n          have h₁₁ : π / 7 + 2 * π / 7 = 3 * π / 7 := by ring\n          rw [h₁₁]\n        have h₁₁ : Real.sin (π / 7 - 2 * π / 7) = Real.sin (- (π / 7)) := by\n          have h₁₂ : π / 7 - 2 * π / 7 = - (π / 7) := by ring\n          rw [h₁₂]\n        rw [h₅, h₁₀, h₁₁]\n        <;> ring\n      linarith\n    have h₄ : 2 * Real.sin (π / 7) * Real.cos (3 * π / 7) = Real.sin (4 * π / 7) + Real.sin (- (2 * π / 7)) := by\n      have h₅ : 2 * Real.sin (π / 7) * Real.cos (3 * π / 7) = Real.sin (π / 7 + 3 * π / 7) + Real.sin (π / 7 - 3 * π / 7) := by\n        have h₆ : 2 * Real.sin (π / 7) * Real.cos (3 * π / 7) = Real.sin (π / 7 + 3 * π / 7) + Real.sin (π / 7 - 3 * π / 7) := by\n          have h₇ : Real.sin (π / 7 + 3 * π / 7) = Real.sin (π / 7) * Real.cos (3 * π / 7) + Real.cos (π / 7) * Real.sin (3 * π / 7) := by\n            rw [Real.sin_add]\n          have h₈ : Real.sin (π / 7 - 3 * π / 7) = Real.sin (π / 7) * Real.cos (3 * π / 7) - Real.cos (π / 7) * Real.sin (3 * π / 7) := by\n            rw [Real.sin_sub]\n          have h₉ : Real.sin (π / 7 + 3 * π / 7) + Real.sin (π / 7 - 3 * π / 7) = 2 * Real.sin (π / 7) * Real.cos (3 * π / 7) := by\n            linarith\n          linarith\n        linarith\n      have h₁₀ : Real.sin (π / 7 + 3 * π / 7) = Real.sin (4 * π / 7) := by\n        have h₁₁ : π / 7 + 3 * π / 7 = 4 * π / 7 := by ring\n        rw [h₁₁]\n      have h₁₁ : Real.sin (π / 7 - 3 * π / 7) = Real.sin (- (2 * π / 7)) := by\n        have h₁₂ : π / 7 - 3 * π / 7 = - (2 * π / 7) := by ring\n        rw [h₁₂]\n      rw [h₅, h₁₀, h₁₁]\n      <;> ring\n    have h₅ : 2 * Real.sin (π / 7) * (Real.cos (π / 7) - Real.cos (2 * π / 7) + Real.cos (3 * π / 7)) = 2 * Real.sin (π / 7) * Real.cos (π / 7) - 2 * Real.sin (π / 7) * Real.cos (2 * π / 7) + 2 * Real.sin (π / 7) * Real.cos (3 * π / 7) := by\n      ring\n    rw [h₅]\n    have h₆ : 2 * Real.sin (π / 7) * Real.cos (π / 7) - 2 * Real.sin (π / 7) * Real.cos (2 * π / 7) + 2 * Real.sin (π / 7) * Real.cos (3 * π / 7) = Real.sin (2 * π / 7) - (Real.sin (3 * π / 7) + Real.sin (- (π / 7))) + (Real.sin (4 * π / 7) + Real.sin (- (2 * π / 7))) := by\n      rw [h₂, h₃, h₄]\n      <;> ring\n    rw [h₆]\n    have h₇ : Real.sin (4 * π / 7) = Real.sin (3 * π / 7) := by\n      have h₈ : Real.sin (4 * π / 7) = Real.sin (π - 3 * π / 7) := by\n        have h₉ : 4 * π / 7 = π - 3 * π / 7 := by ring\n        rw [h₉]\n      rw [h₈]\n      have h₉ : Real.sin (π - 3 * π / 7) = Real.sin (3 * π / 7) := by\n        rw [Real.sin_pi_sub]\n      rw [h₉]\n    have h₈ : Real.sin (- (2 * π / 7)) = -Real.sin (2 * π / 7) := by\n      rw [← Real.sin_neg]\n      <;> ring_nf\n    have h₉ : Real.sin (- (π / 7)) = -Real.sin (π / 7) := by\n      rw [← Real.sin_neg]\n      <;> ring_nf\n    rw [h₇, h₈, h₉]\n    have h₁₀ : Real.sin (2 * π / 7) - (Real.sin (3 * π / 7) + -Real.sin (π / 7)) + (Real.sin (3 * π / 7) + -Real.sin (2 * π / 7)) = Real.sin (π / 7) := by\n      ring_nf\n      <;>\n      (try norm_num) <;>\n      (try linarith [Real.pi_pos]) <;>\n      (try field_simp) <;>\n      (try ring_nf) <;>\n      (try norm_num) <;>\n      (try linarith [Real.pi_pos])\n    linarith\n  \n  have h₂ : Real.sin (π / 7) ≠ 0 := by\n    have h₃ : 0 < π / 7 := by linarith [Real.pi_pos]\n    have h₄ : π / 7 < π := by linarith [Real.pi_pos]\n    have h₅ : 0 < Real.sin (π / 7) := Real.sin_pos_of_pos_of_lt_pi h₃ h₄\n    linarith\n  \n  have h₃ : Real.cos (π / 7) - Real.cos (2 * π / 7) + Real.cos (3 * π / 7) = 1 / 2 := by\n    have h₄ : 2 * Real.sin (π / 7) * (Real.cos (π / 7) - Real.cos (2 * π / 7) + Real.cos (3 * π / 7)) = Real.sin (π / 7) := h₁\n    have h₅ : Real.sin (π / 7) ≠ 0 := h₂\n    have h₆ : Real.cos (π / 7) - Real.cos (2 * π / 7) + Real.cos (3 * π / 7) = 1 / 2 := by\n      apply mul_left_cancel₀ h₅\n      nlinarith [Real.sin_le_one (π / 7), Real.cos_le_one (π / 7), Real.sin_le_one (2 * π / 7),\n        Real.cos_le_one (2 * π / 7), Real.sin_le_one (3 * π / 7), Real.cos_le_one (3 * π / 7)]\n    exact h₆\n  \n  exact h₃",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem imo_1963_p5 :\n  Real.cos (π / 7) - Real.cos (2 * π / 7) + Real.cos (3 * π / 7) = 1 / 2 := by\n  have h₁ : 2 * Real.sin (π / 7) * (Real.cos (π / 7) - Real.cos (2 * π / 7) + Real.cos (3 * π / 7)) = Real.sin (π / 7) := by\n    have h₂ : 2 * Real.sin (π / 7) * Real.cos (π / 7) = Real.sin (2 * π / 7) := by\n      have h₃ : Real.sin (2 * π / 7) = 2 * Real.sin (π / 7) * Real.cos (π / 7) := by\n        have h₄ : Real.sin (2 * π / 7) = Real.sin (2 * (π / 7)) := by ring\n        rw [h₄]\n        have h₅ : Real.sin (2 * (π / 7)) = 2 * Real.sin (π / 7) * Real.cos (π / 7) := by\n          rw [Real.sin_two_mul]\n        rw [h₅]\n      linarith\n    have h₃ : 2 * Real.sin (π / 7) * Real.cos (2 * π / 7) = Real.sin (3 * π / 7) + Real.sin (- (π / 7)) := by\n      have h₄ : 2 * Real.sin (π / 7) * Real.cos (2 * π / 7) = Real.sin (π / 7 + 2 * π / 7) + Real.sin (π / 7 - 2 * π / 7) := by\n        have h₅ : Real.sin (π / 7 + 2 * π / 7) = Real.sin (π / 7) * Real.cos (2 * π / 7) + Real.cos (π / 7) * Real.sin (2 * π / 7) := by\n          rw [Real.sin_add]\n        have h₆ : Real.sin (π / 7 - 2 * π / 7) = Real.sin (π / 7) * Real.cos (2 * π / 7) - Real.cos (π / 7) * Real.sin (2 * π / 7) := by\n          rw [Real.sin_sub]\n        have h₇ : Real.sin (π / 7 + 2 * π / 7) + Real.sin (π / 7 - 2 * π / 7) = 2 * Real.sin (π / 7) * Real.cos (2 * π / 7) := by\n          linarith\n        linarith\n      have h₈ : Real.sin (π / 7 + 2 * π / 7) = Real.sin (3 * π / 7) := by\n        have h₉ : π / 7 + 2 * π / 7 = 3 * π / 7 := by ring\n        rw [h₉]\n      have h₉ : Real.sin (π / 7 - 2 * π / 7) = Real.sin (- (π / 7)) := by\n        have h₁₀ : π / 7 - 2 * π / 7 = - (π / 7) := by ring\n        rw [h₁₀]\n      rw [h₄, h₈, h₉]\n    have h₄ : 2 * Real.sin (π / 7) * Real.cos (3 * π / 7) = Real.sin (4 * π / 7) + Real.sin (- (2 * π / 7)) := by\n      have h₅ : 2 * Real.sin (π / 7) * Real.cos (3 * π / 7) = Real.sin (π / 7 + 3 * π / 7) + Real.sin (π / 7 - 3 * π / 7) := by\n        have h₆ : 2 * Real.sin (π / 7) * Real.cos (3 * π / 7) = Real.sin (π / 7 + 3 * π / 7) + Real.sin (π / 7 - 3 * π / 7) := by\n          have h₇ : Real.sin (π / 7 + 3 * π / 7) = Real.sin (π / 7) * Real.cos (3 * π / 7) + Real.cos (π / 7) * Real.sin (3 * π / 7) := by\n            rw [Real.sin_add]\n          have h₈ : Real.sin (π / 7 - 3 * π / 7) = Real.sin (π / 7) * Real.cos (3 * π / 7) - Real.cos (π / 7) * Real.sin (3 * π / 7) := by\n            rw [Real.sin_sub]\n          have h₉ : Real.sin (π / 7 + 3 * π / 7) + Real.sin (π / 7 - 3 * π / 7) = 2 * Real.sin (π / 7) * Real.cos (3 * π / 7) := by\n            linarith\n          linarith\n        linarith\n      have h₁₀ : Real.sin (π / 7 + 3 * π / 7) = Real.sin (4 * π / 7) := by\n        have h₁₁ : π / 7 + 3 * π / 7 = 4 * π / 7 := by ring\n        rw [h₁₁]\n      have h₁₁ : Real.sin (π / 7 - 3 * π / 7) = Real.sin (- (2 * π / 7)) := by\n        have h₁₂ : π / 7 - 3 * π / 7 = - (2 * π / 7) := by ring\n        rw [h₁₂]\n      rw [h₅, h₁₀, h₁₁]\n    have h₅ : 2 * Real.sin (π / 7) * (Real.cos (π / 7) - Real.cos (2 * π / 7) + Real.cos (3 * π / 7)) = Real.sin (2 * π / 7) - (Real.sin (3 * π / 7) + Real.sin (- (π / 7))) + (Real.sin (4 * π / 7) + Real.sin (- (2 * π / 7))) := by\n      linarith\n    rw [h₅]\n    have h₆ : Real.sin (4 * π / 7) = Real.sin (3 * π / 7) := by\n      have h₇ : Real.sin (4 * π / 7) = Real.sin (π - 3 * π / 7) := by\n        have h₈ : 4 * π / 7 = π - 3 * π / 7 := by ring\n        rw [h₈]\n      rw [h₇]\n      have h₉ : Real.sin (π - 3 * π / 7) = Real.sin (3 * π / 7) := by\n        rw [Real.sin_pi_sub]\n      rw [h₉]\n    have h₇ : Real.sin (- (2 * π / 7)) = -Real.sin (2 * π / 7) := by\n      rw [← Real.sin_neg]\n    have h₈ : Real.sin (- (π / 7)) = -Real.sin (π / 7) := by\n      rw [← Real.sin_neg]\n    rw [h₇, h₈]\n    linarith\n  have h₂ : Real.sin (π / 7) ≠ 0 := by\n    have h₃ : 0 < π / 7 := by linarith [Real.pi_pos]\n    have h₄ : π / 7 < π := by linarith [Real.pi_pos]\n    have h₅ : 0 < Real.sin (π / 7) := Real.sin_pos_of_pos_of_lt_pi h₃ h₄\n    linarith\n  apply mul_left_cancel₀ h₂\n  nlinarith [Real.sin_le_one (π / 7), Real.cos_le_one (π / 7), Real.sin_le_one (2 * π / 7),\n    Real.cos_le_one (2 * π / 7), Real.sin_le_one (3 * π / 7), Real.cos_le_one (3 * π / 7)]",
    "orig_proof_length": 1780,
    "simp_proof_length": 1323
  },
  {
    "problem_id": "mathd_numbertheory_430",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_430\n  (a b c : ℕ)\n  (h₀ : 1 ≤ a ∧ a ≤ 9)\n  (h₁ : 1 ≤ b ∧ b ≤ 9)\n  (h₂ : 1 ≤ c ∧ c ≤ 9)\n  (h₃ : a ≠ b)\n  (h₄ : a ≠ c)\n  (h₅ : b ≠ c)\n  (h₆ : a + b = c)\n  (h₇ : 10 * a + a - b = 2 * c)\n  (h₈ : c * b = 10 * a + a + a) :\n  a + b + c = 8 := by\n  have h_main : a = 1 ∧ b = 3 ∧ c = 4 := by\n    have h₉ : a ≤ 9 := by linarith\n    have h₁₀ : b ≤ 9 := by linarith\n    have h₁₁ : c ≤ 9 := by linarith\n    have h₁₂ : 1 ≤ a := by linarith\n    have h₁₃ : 1 ≤ b := by linarith\n    have h₁₄ : 1 ≤ c := by linarith\n    interval_cases a <;> interval_cases b <;> norm_num at h₃ h₄ h₅ h₆ h₇ h₈ ⊢ <;>\n      (try omega) <;>\n      (try {\n        have h₁₅ : c ≤ 9 := by omega\n        interval_cases c <;> norm_num at h₆ h₇ h₈ ⊢ <;>\n          (try omega) <;>\n          (try {\n            simp_all (config := {decide := true})\n            <;> aesop\n          })\n      }) <;>\n      (try {\n        omega\n      }) <;>\n      (try {\n        aesop\n      })\n    <;>\n    (try {\n      exfalso\n      omega\n    })\n    <;>\n    (try {\n      aesop\n    })\n  \n  have h_final : a + b + c = 8 := by\n    rcases h_main with ⟨rfl, rfl, rfl⟩\n    <;> norm_num\n    <;> aesop\n  \n  exact h_final",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_430\n  (a b c : ℕ)\n  (h₀ : 1 ≤ a ∧ a ≤ 9)\n  (h₁ : 1 ≤ b ∧ b ≤ 9)\n  (h₂ : 1 ≤ c ∧ c ≤ 9)\n  (h₃ : a ≠ b)\n  (h₄ : a ≠ c)\n  (h₅ : b ≠ c)\n  (h₆ : a + b = c)\n  (h₇ : 10 * a + a - b = 2 * c)\n  (h₈ : c * b = 10 * a + a + a) :\n  a + b + c = 8 := by\n  revert h₀ h₁ h₂ h₃ h₄ h₅ h₆ h₇ h₈\n  norm_num\n  intros\n  interval_cases a <;> interval_cases b <;> interval_cases c <;> simp_all",
    "orig_proof_length": 196,
    "simp_proof_length": 22
  },
  {
    "problem_id": "induction_12dvd4expnp1p20",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem induction_12dvd4expnp1p20\n  (n : ℕ) :\n  12 ∣ 4^(n+1) + 20 := by\n  have h_main : 12 ∣ 4^(n+1) + 20 := by\n    apply Nat.dvd_of_mod_eq_zero\n    have h : (4^(n+1) + 20) % 12 = 0 := by\n      have h₁ : ∀ n : ℕ, (4^(n+1) + 20) % 12 = 0 := by\n        intro n\n        induction n with\n        | zero =>\n          norm_num\n        | succ n ih =>\n          simp [pow_succ, Nat.mul_mod, Nat.add_mod] at ih ⊢\n          <;> omega\n      exact h₁ n\n    exact h\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem induction_12dvd4expnp1p20\n  (n : ℕ) :\n  12 ∣ 4^(n+1) + 20 := by\n  induction n <;> omega",
    "orig_proof_length": 97,
    "simp_proof_length": 4
  },
  {
    "problem_id": "mathd_algebra_459",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_459\n  (a b c d : ℚ)\n  (h₀ : 3 * a = b + c + d)\n  (h₁ : 4 * b = a + c + d)\n  (h₂ : 2 * c = a + b + d)\n  (h₃ : 8 * a + 10 * b + 6 * c = 24) :\n  ↑d.den + d.num = 28 := by\n  have h₄ : 5 * b = 4 * a := by\n    have h₄₁ : 4 * b - 3 * a = a - b := by\n      linarith\n    linarith\n  \n  have h₅ : 3 * c = 4 * a := by\n    have h₅₁ : 2 * c - 3 * a = a - c := by\n      linarith\n    linarith\n  \n  have h₆ : a = 1 := by\n    have h₆₁ : 24 * a = 24 := by\n      have h₆₂ : 8 * a + 10 * b + 6 * c = 24 := h₃\n      have h₆₃ : 5 * b = 4 * a := h₄\n      have h₆₄ : 3 * c = 4 * a := h₅\n      have h₆₅ : 10 * b = 8 * a := by linarith\n      have h₆₆ : 6 * c = 8 * a := by linarith\n      linarith\n    linarith\n  \n  have h₇ : b = 4 / 5 := by\n    have h₇₁ : 5 * b = 4 * a := h₄\n    rw [h₆] at h₇₁\n    norm_num at h₇₁ ⊢\n    <;> linarith\n  \n  have h₈ : c = 4 / 3 := by\n    have h₈₁ : 3 * c = 4 * a := h₅\n    rw [h₆] at h₈₁\n    norm_num at h₈₁ ⊢\n    <;> linarith\n  \n  have h₉ : d = 13 / 15 := by\n    have h₉₁ : 3 * a = b + c + d := h₀\n    rw [h₆, h₇, h₈] at h₉₁\n    norm_num at h₉₁ ⊢\n    <;> linarith\n  \n  have h₁₀ : ↑d.den + d.num = 28 := by\n    rw [h₉]\n    -- Verify that the rational number 13/15 is in its reduced form\n    norm_cast\n    <;>\n    (try norm_num) <;>\n    (try rfl) <;>\n    (try\n      {\n        -- Use the fact that 13 and 15 are coprime to confirm the numerator and denominator\n        norm_cast at *\n        <;>\n        rfl\n      })\n    <;>\n    (try\n      {\n        -- Use norm_num to simplify and confirm the values\n        norm_num [Rat.num_div_den] at *\n        <;>\n        rfl\n      })\n  \n  exact h₁₀",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_459\n  (a b c d : ℚ)\n  (h₀ : 3 * a = b + c + d)\n  (h₁ : 4 * b = a + c + d)\n  (h₂ : 2 * c = a + b + d)\n  (h₃ : 8 * a + 10 * b + 6 * c = 24) :\n  ↑d.den + d.num = 28 := by\n  have : d = 13 / 15 := by linarith\n  simp_all\n  norm_num",
    "orig_proof_length": 319,
    "simp_proof_length": 12
  },
  {
    "problem_id": "mathd_algebra_137",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_137\n  (x : ℕ)\n  (h₀ : ↑x + (4:ℝ) / (100:ℝ) * ↑x = 598) :\n  x = 575 := by\n  have h₁ : x = 575 := by\n    have h₂ : (x : ℝ) + (4 : ℝ) / 100 * (x : ℝ) = 598 := by\n      exact_mod_cast h₀\n    ring_nf at h₂\n    have h₃ : (x : ℝ) = 575 := by\n      nlinarith [sq_nonneg ((x : ℝ) - 575)]\n    have h₄ : x = 575 := by\n      norm_cast at h₃ ⊢\n      <;>\n      (try norm_num at h₃ ⊢) <;>\n      (try linarith) <;>\n      (try nlinarith) <;>\n      (try\n        {\n          field_simp at h₃ ⊢\n          <;> ring_nf at h₃ ⊢ <;> norm_cast at h₃ ⊢ <;> nlinarith\n        }) <;>\n      (try\n        {\n          norm_num at h₃ ⊢ <;>\n          (try omega) <;>\n          (try nlinarith)\n        }) <;>\n      (try\n        {\n          simp_all [mul_comm]\n          <;> norm_num at * <;>\n          (try omega) <;>\n          (try nlinarith)\n        })\n    exact h₄\n  exact h₁",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_137\n  (x : ℕ)\n  (h₀ : ↑x + (4:ℝ) / (100:ℝ) * ↑x = 598) :\n  x = 575 := by\n  field_simp at h₀\n  norm_cast at h₀\n  linarith",
    "orig_proof_length": 164,
    "simp_proof_length": 7
  },
  {
    "problem_id": "mathd_algebra_160",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_160\n  (n x : ℝ)\n  (h₀ : n + x = 97)\n  (h₁ : n + 5 * x = 265) :\n  n + 2 * x = 139 := by\n  have h₂ : x = 42 := by\n    have h₂₁ : 4 * x = 168 := by\n      have h₂₂ : (n + 5 * x) - (n + x) = 265 - 97 := by\n        linarith\n      linarith\n    -- Solve for x using the equation 4x = 168\n    linarith\n  \n  have h₃ : n = 55 := by\n    have h₃₁ : n + x = 97 := h₀\n    rw [h₂] at h₃₁\n    linarith\n  \n  have h₄ : n + 2 * x = 139 := by\n    rw [h₃, h₂]\n    <;> norm_num\n  \n  exact h₄",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_160\n  (n x : ℝ)\n  (h₀ : n + x = 97)\n  (h₁ : n + 5 * x = 265) :\n  n + 2 * x = 139 := by\n  linarith",
    "orig_proof_length": 94,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_277",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_277\n  (m n : ℕ)\n  (h₀ : Nat.gcd m n = 6)\n  (h₁ : Nat.lcm m n = 126) :\n  60 ≤ m + n := by\n  have h₂ : m * n = 756 := by\n    have h₂₁ : m * n = Nat.gcd m n * Nat.lcm m n := by\n      rw [Nat.gcd_mul_lcm]\n    rw [h₂₁]\n    rw [h₀, h₁]\n    <;> norm_num\n  \n  have h₃ : 6 ∣ m := by\n    have h₃₁ : Nat.gcd m n ∣ m := Nat.gcd_dvd_left m n\n    rw [h₀] at h₃₁\n    exact h₃₁\n  \n  have h₄ : 6 ∣ n := by\n    have h₄₁ : Nat.gcd m n ∣ n := Nat.gcd_dvd_right m n\n    rw [h₀] at h₄₁\n    exact h₄₁\n  \n  have h₅ : ∃ (a b : ℕ), m = 6 * a ∧ n = 6 * b ∧ a * b = 21 := by\n    have h₅₁ : 6 ∣ m := h₃\n    have h₅₂ : 6 ∣ n := h₄\n    cases' h₅₁ with a ha\n    cases' h₅₂ with b hb\n    have h₅₃ : m = 6 * a := by linarith\n    have h₅₄ : n = 6 * b := by linarith\n    have h₅₅ : (6 * a) * (6 * b) = 756 := by\n      rw [h₅₃, h₅₄] at h₂\n      exact h₂\n    have h₅₆ : a * b = 21 := by\n      ring_nf at h₅₅ ⊢\n      omega\n    refine' ⟨a, b, h₅₃, h₅₄, _⟩\n    exact h₅₆\n  \n  have h₆ : 60 ≤ m + n := by\n    obtain ⟨a, b, ha, hb, hab⟩ := h₅\n    have h₆₁ : m + n = 6 * (a + b) := by\n      rw [ha, hb]\n      <;> ring\n      <;> omega\n    have h₆₂ : a * b = 21 := hab\n    have h₆₃ : a + b ≥ 10 := by\n      have h₆₄ : a ∣ 21 := by\n        use b\n        linarith\n      have h₆₅ : b ∣ 21 := by\n        use a\n        linarith\n      have h₆₆ : a ≤ 21 := by\n        have h₆₇ : a ∣ 21 := h₆₄\n        exact Nat.le_of_dvd (by norm_num) h₆₇\n      have h₆₇ : b ≤ 21 := by\n        have h₆₈ : b ∣ 21 := h₆₅\n        exact Nat.le_of_dvd (by norm_num) h₆₈\n      -- We now check all possible values of a and b to find the minimum sum\n      interval_cases a <;> norm_num at h₆₂ ⊢ <;>\n        (try omega) <;>\n        (try {\n          interval_cases b <;> norm_num at h₆₂ ⊢ <;>\n            (try omega)\n        })\n    have h₆₈ : 6 * (a + b) ≥ 60 := by\n      have h₆₉ : a + b ≥ 10 := h₆₃\n      nlinarith\n    linarith\n  \n  exact h₆",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_277\n  (m n : ℕ)\n  (h₀ : Nat.gcd m n = 6)\n  (h₁ : Nat.lcm m n = 126) :\n  60 ≤ m + n := by\n  have h₂ : m * n = 756 := by\n    rw [← Nat.gcd_mul_lcm m n]\n    simp_all\n  have h₃ : 6 ∣ m := Nat.dvd_of_mod_eq_zero (by rw [← h₀]; exact Nat.mod_eq_zero_of_dvd (Nat.gcd_dvd_left m n))\n  have h₄ : 6 ∣ n := Nat.dvd_of_mod_eq_zero (by rw [← h₀]; exact Nat.mod_eq_zero_of_dvd (Nat.gcd_dvd_right m n))\n  obtain ⟨a, rfl⟩ := h₃\n  obtain ⟨b, rfl⟩ := h₄\n  have h₅ : a * b = 21 := by\n    linarith\n  have h₆ : 60 ≤ 6 * (a + b) := by\n    have h₆₁ : a ≤ 21 := Nat.le_of_dvd (by norm_num) (by use b; linarith)\n    have h₆₂ : b ≤ 21 := Nat.le_of_dvd (by norm_num) (by use a; linarith)\n    interval_cases a <;> norm_num at h₅ ⊢ <;> omega\n  linarith",
    "orig_proof_length": 435,
    "simp_proof_length": 155
  },
  {
    "problem_id": "mathd_numbertheory_559",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_559\n  (x y : ℕ)\n  (h₀ : x % 3 = 2)\n  (h₁ : y % 5 = 4)\n  (h₂ : x % 10 = y % 10) :\n  14 ≤ x := by\n  have h_main : 14 ≤ x := by\n    by_contra! h\n    have h₃ : x ≤ 13 := by linarith\n    have h₄ : x % 3 = 2 := h₀\n    have h₅ : y % 5 = 4 := h₁\n    have h₆ : x % 10 = y % 10 := h₂\n    have h₇ : x ≤ 13 := by linarith\n    interval_cases x <;> norm_num [Nat.mod_eq_of_lt] at h₄ h₆ ⊢ <;>\n      (try omega) <;>\n      (try {\n        have h₈ : y % 5 = 4 := h₁\n        have h₉ : y % 10 = _ := by omega\n        have h₁₀ : y % 5 = 4 := h₁\n        omega\n      }) <;>\n      (try {\n        have h₈ : y % 5 = 4 := h₁\n        have h₉ : y % 10 = _ := by omega\n        omega\n      })\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_559\n  (x y : ℕ)\n  (h₀ : x % 3 = 2)\n  (h₁ : y % 5 = 4)\n  (h₂ : x % 10 = y % 10) :\n  14 ≤ x := by\n  omega",
    "orig_proof_length": 145,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_24",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_24\n  (x : ℝ)\n  (h₀ : x / 50 = 40) :\n  x = 2000 := by\n  have h₁ : x = 2000 := by\n    have h₂ : x = 40 * 50 := by\n      -- Multiply both sides by 50 to eliminate the denominator\n      have h₃ : x / 50 = 40 := h₀\n      field_simp at h₃\n      -- Simplify the equation to x = 40 * 50\n      linarith\n    -- Calculate 40 * 50 and substitute back to find x\n    linarith\n  exact h₁",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_24\n  (x : ℝ)\n  (h₀ : x / 50 = 40) :\n  x = 2000 := by\n  linarith",
    "orig_proof_length": 38,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_176",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_176\n  (x : ℝ) :\n  (x + 1)^2 * x = x^3 + 2 * x^2 + x := by\n  have h_main : (x + 1)^2 * x = x^3 + 2 * x^2 + x := by\n    ring_nf\n    <;>\n    (try norm_num)\n    <;>\n    (try linarith)\n    <;>\n    (try nlinarith)\n  \n  apply h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_176\n  (x : ℝ) :\n  (x + 1)^2 * x = x^3 + 2 * x^2 + x := by\n  ring",
    "orig_proof_length": 45,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_353",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_353\n  (s : ℕ)\n  (h₀ : s = ∑ k ∈ Finset.Icc 2010 4018, k) :\n  s % 2009 = 0 := by\n  have h₁ : ∑ k ∈ Finset.Icc 2010 4018, k = 2009 * 3014 := by\n    have h₂ : ∑ k ∈ Finset.Icc 2010 4018, k = ∑ k in Finset.Ico 2010 4019, k := by\n      apply Finset.sum_bij (fun (x : ℕ) _ => x)\n      <;> simp_all [Finset.mem_Icc, Finset.mem_Ico]\n      <;> omega\n    rw [h₂]\n    have h₃ : ∑ k in Finset.Ico 2010 4019, k = ∑ k in Finset.range 4019, k - ∑ k in Finset.range 2010, k := by\n      have h₄ : ∑ k in Finset.range 4019, k = ∑ k in Finset.range 2010, k + ∑ k in Finset.Ico 2010 4019, k := by\n        rw [← Finset.sum_range_add_sum_Ico _ (by norm_num : 2010 ≤ 4019)]\n        <;> simp [add_comm]\n      have h₅ : ∑ k in Finset.Ico 2010 4019, k = ∑ k in Finset.range 4019, k - ∑ k in Finset.range 2010, k := by\n        omega\n      rw [h₅]\n    rw [h₃]\n    have h₆ : ∑ k in Finset.range 4019, k = 4019 * 4018 / 2 := by\n      rw [Finset.sum_range_id]\n      <;> rfl\n    have h₇ : ∑ k in Finset.range 2010, k = 2010 * 2009 / 2 := by\n      rw [Finset.sum_range_id]\n      <;> rfl\n    rw [h₆, h₇]\n    <;> norm_num\n    <;> rfl\n  \n  have h₂ : s % 2009 = 0 := by\n    rw [h₀]\n    rw [h₁]\n    <;> norm_num\n    <;> rfl\n  \n  exact h₂",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_353\n  (s : ℕ)\n  (h₀ : s = ∑ k ∈ Finset.Icc 2010 4018, k) :\n  s % 2009 = 0 := by\n  rw [h₀]\n  have : ∑ k ∈ Finset.Icc 2010 4018, k = 2009 * 3014 := by\n    have : ∑ k ∈ Finset.Icc 2010 4018, k = ∑ k in Finset.Ico 2010 4019, k := by\n      apply Finset.sum_bij (fun x _ => x)\n      <;> simp_all [Finset.mem_Icc, Finset.mem_Ico]\n      <;> omega\n    rw [this]\n    have : ∑ k in Finset.Ico 2010 4019, k = 3014 * 2009 := by\n      have : ∑ k in Finset.range 4019, k = ∑ k in Finset.range 2010, k + ∑ k in Finset.Ico 2010 4019, k := by\n        rw [← Finset.sum_range_add_sum_Ico _ (by norm_num : 2010 ≤ 4019)]\n      simp_all [Finset.sum_range_id]\n      <;> omega\n    omega\n  simp_all",
    "orig_proof_length": 264,
    "simp_proof_length": 129
  },
  {
    "problem_id": "induction_nfactltnexpnm1ngt3",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem induction_nfactltnexpnm1ngt3\n  (n : ℕ)\n  (h₀ : 3 ≤ n) :\n  (n)! < n^(n - 1) := by\n  have h_base : (3 : ℕ)! < (3 : ℕ) ^ (3 - 1) := by\n    norm_num [Nat.factorial]\n    <;> decide\n  \n  have h_inductive_step : ∀ (k : ℕ), 3 ≤ k → k ! < k ^ (k - 1) → (k + 1) ! < (k + 1) ^ (k + 1 - 1) := by\n    intro k hk h_ineq\n    have h₁ : (k + 1) ! = (k + 1) * k ! := by\n      simp [Nat.factorial_succ, mul_comm]\n    rw [h₁]\n    have h₂ : (k + 1) * k ! < (k + 1) * k ^ (k - 1) := by\n      have h₃ : k ! < k ^ (k - 1) := h_ineq\n      have h₄ : 0 < k + 1 := by linarith\n      have h₅ : 0 < k ^ (k - 1) := by\n        apply Nat.pos_pow_of_pos\n        <;> omega\n      nlinarith\n    have h₃ : (k + 1) * k ^ (k - 1) ≤ (k + 1) ^ (k + 1 - 1) := by\n      have h₄ : k ^ (k - 1) ≤ (k + 1) ^ (k - 1) := by\n        apply Nat.pow_le_pow_of_le_left\n        <;> omega\n      calc\n        (k + 1) * k ^ (k - 1) ≤ (k + 1) * (k + 1) ^ (k - 1) := by\n          exact Nat.mul_le_mul_left (k + 1) h₄\n        _ = (k + 1) ^ 1 * (k + 1) ^ (k - 1) := by\n          simp [Nat.pow_one]\n        _ = (k + 1) ^ (1 + (k - 1)) := by\n          rw [← pow_add]\n        _ = (k + 1) ^ (k + 1 - 1) := by\n          have h₅ : 1 + (k - 1) = k + 1 - 1 := by\n            cases k with\n            | zero => contradiction\n            | succ k' =>\n              cases k' with\n              | zero => contradiction\n              | succ k'' =>\n                cases k'' with\n                | zero => contradiction\n                | succ k''' =>\n                  simp [Nat.succ_eq_add_one, Nat.add_assoc]\n                  <;> ring_nf at *\n                  <;> omega\n          rw [h₅]\n    have h₄ : (k + 1) * k ! < (k + 1) ^ (k + 1 - 1) := by\n      calc\n        (k + 1) * k ! < (k + 1) * k ^ (k - 1) := h₂\n        _ ≤ (k + 1) ^ (k + 1 - 1) := h₃\n    exact h₄\n  \n  have h_main : n ! < n ^ (n - 1) := by\n    have h₁ : ∀ (k : ℕ), 3 ≤ k → k ! < k ^ (k - 1) := by\n      intro k hk\n      induction' hk with k hk IH\n      · -- Base case: k = 3\n        exact h_base\n      · -- Inductive step: assume the statement holds for k, prove for k + 1\n        exact h_inductive_step k hk IH\n    -- Apply the general statement to n\n    have h₂ : n ! < n ^ (n - 1) := h₁ n h₀\n    exact h₂\n  \n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem induction_nfactltnexpnm1ngt3\n  (n : ℕ)\n  (h₀ : 3 ≤ n) :\n  (n)! < n^(n - 1) := by\n  induction' h₀ with k hk IH\n  · norm_num [Nat.factorial]\n  · simp_all [Nat.factorial_succ, Nat.mul_comm]\n    have : (k + 1) * k ^ (k - 1) ≤ (k + 1) ^ k := by\n      calc\n        (k + 1) * k ^ (k - 1) ≤ (k + 1) * (k + 1) ^ (k - 1) := by\n          apply Nat.mul_le_mul_left\n          apply Nat.pow_le_pow_of_le_left\n          omega\n        _ = (k + 1) ^ k := by\n          cases k <;> simp_all [Nat.pow_one, Nat.add_assoc] <;> ring_nf <;> omega\n    nlinarith",
    "orig_proof_length": 573,
    "simp_proof_length": 107
  },
  {
    "problem_id": "numbertheory_notEquiv2i2jasqbsqdiv8",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem numbertheory_notEquiv2i2jasqbsqdiv8 :\n  ¬ (∀ a b : ℤ, (∃ i j, a = 2*i ∧ b=2*j) ↔ (∃ k, a^2 + b^2 = 8*k)) := by\n  have h_main : ¬ (∀ a b : ℤ, (∃ i j, a = 2*i ∧ b=2*j) ↔ (∃ k, a^2 + b^2 = 8*k)) := by\n    intro h\n    have h₁ := h 2 0\n    have h₂ : (∃ (i j : ℤ), (2 : ℤ) = 2 * i ∧ (0 : ℤ) = 2 * j) := by\n      refine' ⟨1, 0, _⟩\n      constructor <;> norm_num\n    have h₃ : (∃ (k : ℤ), (2 : ℤ) ^ 2 + (0 : ℤ) ^ 2 = 8 * k) := by\n      have h₄ := h₁.mp h₂\n      exact h₄\n    obtain ⟨k, hk⟩ := h₃\n    have h₅ : (2 : ℤ) ^ 2 + (0 : ℤ) ^ 2 = 8 * k := hk\n    norm_num at h₅\n    <;>\n    (try omega) <;>\n    (try {\n      have h₆ : k = 0 := by omega\n      omega\n    }) <;>\n    (try {\n      have h₆ : k = 1 := by omega\n      omega\n    })\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem numbertheory_notEquiv2i2jasqbsqdiv8 :\n  ¬ (∀ a b : ℤ, (∃ i j, a = 2*i ∧ b=2*j) ↔ (∃ k, a^2 + b^2 = 8*k)) := by\n  push_neg\n  use 2, 0\n  simp\n  omega",
    "orig_proof_length": 215,
    "simp_proof_length": 7
  },
  {
    "problem_id": "mathd_numbertheory_12",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_12 :\n  Finset.card (Finset.filter (λ x => 20∣x) (Finset.Icc 15 85)) = 4 := by\n  have h_main : Finset.card (Finset.filter (λ x => 20∣x) (Finset.Icc 15 85)) = 4 := by\n    rfl\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_12 :\n  Finset.card (Finset.filter (λ x => 20∣x) (Finset.Icc 15 85)) = 4 := by\n rfl",
    "orig_proof_length": 27,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_156",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_156\n  (x y : ℝ)\n  (f g : ℝ → ℝ)\n  (h₀ : ∀t, f t = t^4)\n  (h₁ : ∀t, g t = 5 * t^2 - 6)\n  (h₂ : f x = g x)\n  (h₃ : f y = g y)\n  (h₄ : x^2 < y^2) :\n  y^2 - x^2 = 1 := by\n  have hx : x^2 = 2 ∨ x^2 = 3 := by\n    have h₅ : x ^ 4 = 5 * x ^ 2 - 6 := by\n      have h₅₁ : f x = g x := h₂\n      have h₅₂ : f x = x ^ 4 := by rw [h₀]\n      have h₅₃ : g x = 5 * x ^ 2 - 6 := by rw [h₁]\n      linarith\n    have h₆ : (x ^ 2 - 2) * (x ^ 2 - 3) = 0 := by\n      nlinarith [sq_nonneg (x ^ 2 - 2), sq_nonneg (x ^ 2 - 3)]\n    have h₇ : x ^ 2 - 2 = 0 ∨ x ^ 2 - 3 = 0 := by\n      apply eq_zero_or_eq_zero_of_mul_eq_zero h₆\n    cases h₇ with\n    | inl h₇ =>\n      have h₈ : x ^ 2 = 2 := by linarith\n      exact Or.inl h₈\n    | inr h₇ =>\n      have h₈ : x ^ 2 = 3 := by linarith\n      exact Or.inr h₈\n  \n  have hy : y^2 = 2 ∨ y^2 = 3 := by\n    have h₅ : y ^ 4 = 5 * y ^ 2 - 6 := by\n      have h₅₁ : f y = g y := h₃\n      have h₅₂ : f y = y ^ 4 := by rw [h₀]\n      have h₅₃ : g y = 5 * y ^ 2 - 6 := by rw [h₁]\n      linarith\n    have h₆ : (y ^ 2 - 2) * (y ^ 2 - 3) = 0 := by\n      nlinarith [sq_nonneg (y ^ 2 - 2), sq_nonneg (y ^ 2 - 3)]\n    have h₇ : y ^ 2 - 2 = 0 ∨ y ^ 2 - 3 = 0 := by\n      apply eq_zero_or_eq_zero_of_mul_eq_zero h₆\n    cases h₇ with\n    | inl h₇ =>\n      have h₈ : y ^ 2 = 2 := by linarith\n      exact Or.inl h₈\n    | inr h₇ =>\n      have h₈ : y ^ 2 = 3 := by linarith\n      exact Or.inr h₈\n  \n  have h_main : x^2 = 2 ∧ y^2 = 3 := by\n    have h₅ : x^2 < y^2 := h₄\n    -- Consider all combinations of hx and hy and eliminate impossible cases\n    cases' hx with hx hx\n    · -- Case x² = 2\n      cases' hy with hy hy\n      · -- Subcase y² = 2: impossible because x² < y²\n        exfalso\n        linarith\n      · -- Subcase y² = 3: valid\n        exact ⟨hx, hy⟩\n    · -- Case x² = 3\n      cases' hy with hy hy\n      · -- Subcase y² = 2: impossible because x² < y²\n        exfalso\n        linarith\n      · -- Subcase y² = 3: impossible because x² < y²\n        exfalso\n        linarith\n  \n  have h_final : y^2 - x^2 = 1 := by\n    have h₅ : x ^ 2 = 2 := h_main.1\n    have h₆ : y ^ 2 = 3 := h_main.2\n    have h₇ : y ^ 2 - x ^ 2 = 1 := by\n      rw [h₆, h₅]\n      <;> norm_num\n    exact h₇\n  \n  exact h_final",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_156\n  (x y : ℝ)\n  (f g : ℝ → ℝ)\n  (h₀ : ∀t, f t = t^4)\n  (h₁ : ∀t, g t = 5 * t^2 - 6)\n  (h₂ : f x = g x)\n  (h₃ : f y = g y)\n  (h₄ : x^2 < y^2) :\n  y^2 - x^2 = 1 := by\n  simp_all\n  nlinarith [mul_self_pos.2 (sub_ne_zero.2 h₄.ne)]",
    "orig_proof_length": 488,
    "simp_proof_length": 9
  },
  {
    "problem_id": "mathd_numbertheory_345",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_345 :\n  (2000 + 2001 + 2002 + 2003 + 2004 + 2005 + 2006) % 7 = 0 := by\n  have h1 : (2000 + 2001 + 2002 + 2003 + 2004 + 2005 + 2006) % 7 = 0 := by\n    norm_num [Nat.add_assoc]\n    <;> rfl\n  \n  apply h1",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_345 :\n  (2000 + 2001 + 2002 + 2003 + 2004 + 2005 + 2006) % 7 = 0 := by\n  norm_num",
    "orig_proof_length": 33,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_447",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_447 :\n  ∑ k ∈ Finset.filter (λ x => 3∣x) (Finset.Icc 1 49), (k % 10) = 78 := by\n  have h : ∑ k ∈ Finset.filter (λ x => 3∣x) (Finset.Icc 1 49), (k % 10) = 78 := by\n    rfl\n  apply h",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_447 :\n  ∑ k ∈ Finset.filter (λ x => 3∣x) (Finset.Icc 1 49), (k % 10) = 78 := by\n  rfl",
    "orig_proof_length": 33,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_328",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_328 :\n  (5^999999) % 7 = 6 := by\n  have h_main : (5^999999) % 7 = 6 := by\n    norm_num [pow_succ, Nat.mul_mod, Nat.pow_mod]\n    <;> rfl\n  \n  apply h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_328 :\n  (5^999999) % 7 = 6 := by\n norm_num",
    "orig_proof_length": 27,
    "simp_proof_length": 1
  },
  {
    "problem_id": "algebra_sqineq_at2malt1",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_sqineq_at2malt1\n  (a : ℝ) :\n  a * (2 - a) ≤ 1 := by\n  have h_main : a * (2 - a) ≤ 1 := by\n    have h₁ : a * (2 - a) = 2 * a - a ^ 2 := by\n      ring\n    rw [h₁]\n    have h₂ : 2 * a - a ^ 2 ≤ 1 := by\n      nlinarith [sq_nonneg (a - 1)]\n    exact h₂\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_sqineq_at2malt1\n  (a : ℝ) :\n  a * (2 - a) ≤ 1 := by\n  nlinarith [sq_nonneg (a - 1)]",
    "orig_proof_length": 66,
    "simp_proof_length": 9
  },
  {
    "problem_id": "mathd_algebra_171",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_171\n  (f : ℝ → ℝ)\n  (h₀ : ∀x, f x = 5 * x + 4) :\n  f 1 = 9 := by\n  have h₁ : f 1 = 9 := by\n    have h₂ : f 1 = 5 * (1 : ℝ) + 4 := by\n      rw [h₀]\n      <;> norm_num\n    rw [h₂]\n    <;> norm_num\n  exact h₁",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_171\n  (f : ℝ → ℝ)\n  (h₀ : ∀x, f x = 5 * x + 4) :\n  f 1 = 9 := by\n  simp_all\n  norm_num",
    "orig_proof_length": 40,
    "simp_proof_length": 2
  },
  {
    "problem_id": "mathd_algebra_188",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_188\n  (σ : Equiv ℝ ℝ)\n  (h : σ.1 2 = σ.2 2) :\n  σ.1 (σ.1 2) = 2 := by\n  have h₁ : σ.1 (σ.2 2) = 2 := by\n    apply Equiv.apply_symm_apply\n  \n  have h₂ : σ.1 (σ.1 2) = 2 := by\n    calc\n      σ.1 (σ.1 2) = σ.1 (σ.2 2) := by\n        rw [h]\n      _ = 2 := h₁\n  \n  exact h₂",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_188\n  (σ : Equiv ℝ ℝ)\n  (h : σ.1 2 = σ.2 2) :\n  σ.1 (σ.1 2) = 2 := by\n  simp_all",
    "orig_proof_length": 53,
    "simp_proof_length": 1
  },
  {
    "problem_id": "imo_1959_p1",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem imo_1959_p1\n  (n : ℕ)\n  (h₀ : 0 < n) :\n  Nat.gcd (21*n + 4) (14*n + 3) = 1 := by\n  have h₁ : Nat.gcd (21*n + 4) (14*n + 3) = Nat.gcd (14*n + 3) (7*n + 1) := by\n    have h₁₁ : 21 * n + 4 = 1 * (14 * n + 3) + (7 * n + 1) := by\n      ring_nf\n      <;> omega\n    rw [h₁₁]\n    <;> simp [Nat.gcd_comm, Nat.gcd_add_mul_right_right, Nat.gcd_assoc]\n    <;> ring_nf at *\n    <;> norm_num\n    <;> omega\n  \n  have h₂ : Nat.gcd (14*n + 3) (7*n + 1) = 1 := by\n    have h₂₁ : 14 * n + 3 = 2 * (7 * n + 1) + 1 := by\n      ring_nf\n      <;> omega\n    rw [h₂₁]\n    <;> simp [Nat.gcd_comm, Nat.gcd_add_mul_right_right, Nat.gcd_assoc]\n    <;> ring_nf at *\n    <;> norm_num\n    <;> omega\n  \n  have h₃ : Nat.gcd (21*n + 4) (14*n + 3) = 1 := by\n    rw [h₁]\n    rw [h₂]\n  \n  exact h₃",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem imo_1959_p1\n  (n : ℕ)\n  (h₀ : 0 < n) :\n  Nat.gcd (21*n + 4) (14*n + 3) = 1 := by\n  rw [Nat.gcd_comm]\n  rw [show 21 * n + 4 = 1 * (14 * n + 3) + (7 * n + 1) by ring]\n  rw [show 14 * n + 3 = 2 * (7 * n + 1) + 1 by ring]\n  simp",
    "orig_proof_length": 191,
    "simp_proof_length": 57
  },
  {
    "problem_id": "mathd_numbertheory_175",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_175 :\n  (2^2010) % 10 = 4 := by\n  have h_main : (2^2010) % 10 = 4 := by\n    norm_num\n    <;> rfl\n  \n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_175 :\n  (2^2010) % 10 = 4 := by\n norm_num",
    "orig_proof_length": 20,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_227",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_227\n  (x y n : ℕ+)\n  (h₀ : ↑x / (4: ℝ) + y / 6 = (x + y) / n) :\n  n = 5 := by\n  have h₁ : (n : ℝ) * (3 * (x : ℝ) + 2 * (y : ℝ)) = 12 * ((x : ℝ) + (y : ℝ)) := by\n    have h₁₀ : (↑x : ℝ) / 4 + (↑y : ℝ) / 6 = (↑x + ↑y : ℝ) / (n : ℝ) := by\n      norm_cast at h₀ ⊢\n      <;> simp_all [PNat.ne_zero]\n      <;> field_simp at h₀ ⊢ <;> ring_nf at h₀ ⊢ <;> nlinarith\n    have h₁₁ : (n : ℝ) ≠ 0 := by\n      norm_cast\n      <;> exact PNat.ne_zero n\n    field_simp at h₁₀ ⊢\n    ring_nf at h₁₀ ⊢\n    nlinarith [sq_pos_of_pos (show (0 : ℝ) < (n : ℝ) by exact_mod_cast n.prop)]\n  \n  have h₂ : (4 : ℝ) < (n : ℝ) := by\n    have h₂₁ : 0 < (x : ℝ) := by exact_mod_cast x.prop\n    have h₂₂ : 0 < (y : ℝ) := by exact_mod_cast y.prop\n    have h₂₃ : 0 < (n : ℝ) := by exact_mod_cast n.prop\n    have h₂₄ : (n : ℝ) * (3 * (x : ℝ) + 2 * (y : ℝ)) = 12 * ((x : ℝ) + (y : ℝ)) := h₁\n    have h₂₅ : (4 : ℝ) < (n : ℝ) := by\n      by_contra h\n      have h₂₆ : (n : ℝ) ≤ 4 := by linarith\n      have h₂₇ : (n : ℝ) * (3 * (x : ℝ) + 2 * (y : ℝ)) ≤ 4 * (3 * (x : ℝ) + 2 * (y : ℝ)) := by\n        nlinarith\n      have h₂₈ : 12 * ((x : ℝ) + (y : ℝ)) ≤ 4 * (3 * (x : ℝ) + 2 * (y : ℝ)) := by\n        linarith\n      have h₂₉ : (y : ℝ) > 0 := by positivity\n      nlinarith\n    exact h₂₅\n  \n  have h₃ : (n : ℝ) < (6 : ℝ) := by\n    have h₃₁ : 0 < (x : ℝ) := by exact_mod_cast x.prop\n    have h₃₂ : 0 < (y : ℝ) := by exact_mod_cast y.prop\n    have h₃₃ : 0 < (n : ℝ) := by exact_mod_cast n.prop\n    have h₃₄ : (n : ℝ) * (3 * (x : ℝ) + 2 * (y : ℝ)) = 12 * ((x : ℝ) + (y : ℝ)) := h₁\n    have h₃₅ : (n : ℝ) < (6 : ℝ) := by\n      by_contra h\n      have h₃₆ : (n : ℝ) ≥ 6 := by linarith\n      have h₃₇ : (n : ℝ) * (3 * (x : ℝ) + 2 * (y : ℝ)) ≥ 6 * (3 * (x : ℝ) + 2 * (y : ℝ)) := by\n        nlinarith\n      have h₃₈ : 12 * ((x : ℝ) + (y : ℝ)) ≥ 6 * (3 * (x : ℝ) + 2 * (y : ℝ)) := by\n        linarith\n      have h₃₉ : (x : ℝ) > 0 := by positivity\n      nlinarith\n    exact h₃₅\n  \n  have h₄ : n = 5 := by\n    have h₄₁ : (n : ℕ) = 5 := by\n      have h₄₂ : (n : ℝ) > 4 := h₂\n      have h₄₃ : (n : ℝ) < 6 := h₃\n      have h₄₄ : (n : ℕ) > 4 := by\n        norm_cast at h₄₂ ⊢\n        <;>\n        (try norm_num at h₄₂ ⊢) <;>\n        (try linarith) <;>\n        (try omega)\n      have h₄₅ : (n : ℕ) < 6 := by\n        norm_cast at h₄₃ ⊢\n        <;>\n        (try norm_num at h₄₃ ⊢) <;>\n        (try linarith) <;>\n        (try omega)\n      have h₄₆ : (n : ℕ) = 5 := by\n        omega\n      exact h₄₆\n    exact by\n      norm_cast at h₄₁ ⊢\n      <;>\n      (try simp_all) <;>\n      (try omega)\n  \n  exact h₄",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_227\n  (x y n : ℕ+)\n  (h₀ : ↑x / (4: ℝ) + y / 6 = (x + y) / n) :\n  n = 5 := by\n  have h₁ : (n : ℝ) * (3 * (x : ℝ) + 2 * (y : ℝ)) = 12 * ((x : ℝ) + (y : ℝ)) := by\n    field_simp at h₀ ⊢\n    ring_nf at h₀ ⊢\n    nlinarith [sq_pos_of_pos (show (0 : ℝ) < (n : ℝ) by exact_mod_cast n.prop)]\n  have h₂ : (4 : ℝ) < (n : ℝ) := by\n    have h₂₁ : 0 < (x : ℝ) := by exact_mod_cast x.prop\n    have h₂₂ : 0 < (y : ℝ) := by exact_mod_cast y.prop\n    have h₂₃ : 0 < (n : ℝ) := by exact_mod_cast n.prop\n    have h₂₄ : (n : ℝ) * (3 * (x : ℝ) + 2 * (y : ℝ)) = 12 * ((x : ℝ) + (y : ℝ)) := h₁\n    nlinarith\n  have h₃ : (n : ℝ) < (6 : ℝ) := by\n    have h₃₁ : 0 < (x : ℝ) := by exact_mod_cast x.prop\n    have h₃₂ : 0 < (y : ℝ) := by exact_mod_cast y.prop\n    have h₃₃ : 0 < (n : ℝ) := by exact_mod_cast n.prop\n    have h₃₄ : (n : ℝ) * (3 * (x : ℝ) + 2 * (y : ℝ)) = 12 * ((x : ℝ) + (y : ℝ)) := h₁\n    nlinarith\n  have h₄ : n = 5 := by\n    have h₄₁ : (n : ℕ) = 5 := by\n      have h₄₂ : (n : ℝ) > 4 := h₂\n      have h₄₃ : (n : ℝ) < 6 := h₃\n      have h₄₄ : (n : ℕ) > 4 := by\n        norm_cast at h₄₂ ⊢\n      have h₄₅ : (n : ℕ) < 6 := by\n        norm_cast at h₄₃ ⊢\n      omega\n    exact by\n      norm_cast at h₄₁ ⊢\n  exact h₄",
    "orig_proof_length": 776,
    "simp_proof_length": 364
  },
  {
    "problem_id": "aime_1997_p9",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1997_p9\n  (a : ℝ)\n  (h₀ : 0 < a)\n  (h₁ : 1 / a - Int.floor (1 / a) = a^2 - Int.floor (a^2))\n  (h₂ : 2 < a^2)\n  (h₃ : a^2 < 3) :\n  a^12 - 144 * (1 / a) = 233 := by\n  have h_floor_a2 : Int.floor (a^2 : ℝ) = 2 := by\n    have h₄ : (2 : ℝ) ≤ a ^ 2 := by linarith\n    have h₅ : a ^ 2 < (3 : ℝ) := by linarith\n    have h₆ : Int.floor (a ^ 2 : ℝ) = 2 := by\n      rw [Int.floor_eq_iff]\n      norm_num at h₄ h₅ ⊢\n      constructor <;> nlinarith\n    exact h₆\n  \n  have h_a_gt_1 : a > 1 := by\n    by_contra h\n    have h₄ : a ≤ 1 := by linarith\n    have h₅ : a ^ 2 ≤ 1 := by\n      have h₅₁ : 0 < a := h₀\n      have h₅₂ : a ≤ 1 := h₄\n      nlinarith\n    linarith\n  \n  have h_floor_1a : Int.floor ((1 : ℝ) / a) = 0 := by\n    have h₄ : 0 < (1 : ℝ) / a := by positivity\n    have h₅ : (1 : ℝ) / a < 1 := by\n      have h₅₁ : a > 1 := h_a_gt_1\n      have h₅₂ : (1 : ℝ) / a < 1 := by\n        rw [div_lt_one (by positivity)]\n        <;> nlinarith\n      exact h₅₂\n    have h₆ : Int.floor ((1 : ℝ) / a) = 0 := by\n      rw [Int.floor_eq_iff]\n      norm_num at h₄ h₅ ⊢\n      constructor <;> norm_num <;>\n      (try norm_num at h₄ h₅ ⊢) <;>\n      (try linarith) <;>\n      (try\n        {\n          have h₇ : 0 < a := by positivity\n          have h₈ : 0 < (1 : ℝ) / a := by positivity\n          have h₉ : (1 : ℝ) / a < 1 := h₅\n          linarith\n        })\n    exact h₆\n  \n  have h_main_eq : (1 : ℝ) / a = a^2 - 2 := by\n    have h₄ : (1 : ℝ) / a - Int.floor ((1 : ℝ) / a) = a ^ 2 - Int.floor (a ^ 2 : ℝ) := by\n      exact_mod_cast h₁\n    have h₅ : (Int.floor ((1 : ℝ) / a) : ℝ) = 0 := by\n      norm_cast\n      <;> simp [h_floor_1a]\n    have h₆ : (Int.floor (a ^ 2 : ℝ) : ℝ) = 2 := by\n      norm_cast\n      <;> simp [h_floor_a2]\n    rw [h₅, h₆] at h₄\n    ring_nf at h₄ ⊢\n    linarith\n  \n  have h_cubic : a^3 - 2*a - 1 = 0 := by\n    have h₄ : (1 : ℝ) / a = a ^ 2 - 2 := h_main_eq\n    have h₅ : a ≠ 0 := by linarith\n    field_simp at h₄\n    ring_nf at h₄ ⊢\n    nlinarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n  \n  have h_quad : a^2 - a - 1 = 0 := by\n    have h₄ : a^3 - 2*a - 1 = 0 := h_cubic\n    have h₅ : (a + 1) * (a^2 - a - 1) = 0 := by\n      ring_nf at h₄ ⊢\n      <;> nlinarith [sq_nonneg (a - 1), sq_nonneg (a + 1)]\n    have h₆ : a + 1 ≠ 0 := by\n      nlinarith\n    have h₇ : a^2 - a - 1 = 0 := by\n      apply mul_left_cancel₀ h₆\n      nlinarith\n    exact h₇\n  \n  have h_a3 : a^3 = 2*a + 1 := by\n    have h₄ : a^3 - 2*a - 1 = 0 := h_cubic\n    have h₅ : a^3 = 2*a + 1 := by\n      linarith\n    exact h₅\n  \n  have h_a4 : a^4 = 2*a^2 + a := by\n    calc\n      a ^ 4 = a * a ^ 3 := by ring\n      _ = a * (2 * a + 1) := by rw [h_a3]\n      _ = 2 * a ^ 2 + a := by ring\n      _ = 2 * a ^ 2 + a := by ring\n  \n  have h_a12 : a^12 = 56*a^2 + 88*a + 33 := by\n    have h₅ : a ^ 3 = 2 * a + 1 := h_a3\n    have h₆ : a ^ 4 = 2 * a ^ 2 + a := h_a4\n    calc\n      a ^ 12 = (a ^ 3) ^ 4 := by ring\n      _ = (2 * a + 1) ^ 4 := by rw [h₅]\n      _ = 16 * a ^ 4 + 32 * a ^ 3 + 24 * a ^ 2 + 8 * a + 1 := by\n        ring_nf\n        <;>\n        (try norm_num) <;>\n        (try ring_nf at * <;> nlinarith)\n      _ = 16 * (2 * a ^ 2 + a) + 32 * (2 * a + 1) + 24 * a ^ 2 + 8 * a + 1 := by\n        rw [h₆, h₅]\n        <;> ring_nf\n        <;>\n        (try norm_num) <;>\n        (try ring_nf at * <;> nlinarith)\n      _ = 56 * a ^ 2 + 88 * a + 33 := by\n        ring_nf\n        <;>\n        (try norm_num) <;>\n        (try ring_nf at * <;> nlinarith)\n  \n  have h_final : a^12 - 144 * (1 / a) = 233 := by\n    have h₅ : a ^ 12 = 56 * a ^ 2 + 88 * a + 33 := h_a12\n    have h₆ : (1 : ℝ) / a = a ^ 2 - 2 := h_main_eq\n    have h₇ : a ^ 2 - a - 1 = 0 := h_quad\n    calc\n      a ^ 12 - 144 * (1 / a) = (56 * a ^ 2 + 88 * a + 33) - 144 * (1 / a) := by rw [h₅]\n      _ = (56 * a ^ 2 + 88 * a + 33) - 144 * (a ^ 2 - 2) := by rw [h₆]\n      _ = (56 * a ^ 2 + 88 * a + 33) - (144 * a ^ 2 - 288) := by ring\n      _ = -88 * a ^ 2 + 88 * a + 321 := by ring\n      _ = 233 := by\n        have h₈ : a ^ 2 = a + 1 := by\n          nlinarith\n        nlinarith\n  \n  exact h_final",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1997_p9\n  (a : ℝ)\n  (h₀ : 0 < a)\n  (h₁ : 1 / a - Int.floor (1 / a) = a^2 - Int.floor (a^2))\n  (h₂ : 2 < a^2)\n  (h₃ : a^2 < 3) :\n  a^12 - 144 * (1 / a) = 233 := by\n  have h_a2 : Int.floor (a^2 : ℝ) = 2 := by\n    rw [Int.floor_eq_iff]\n    norm_num\n    constructor\n    · nlinarith\n    · nlinarith\n  have h_a1 : Int.floor ((1 : ℝ) / a) = 0 := by\n    rw [Int.floor_eq_iff]\n    norm_num\n    constructor\n    · positivity\n    · rw [← sub_pos]\n      field_simp\n      nlinarith\n  have h_eq : (1 : ℝ) / a = a^2 - 2 := by\n    rw [h_a1, h_a2] at h₁\n    ring_nf at h₁ ⊢\n    linarith\n  have h_a3 : a^3 = 2*a + 1 := by\n    field_simp [h_a1, h_a2] at h₁\n    nlinarith\n  have h_a4 : a^4 = 2*a^2 + a := by\n    ring_nf at h_a3 ⊢\n    nlinarith\n  have h_a12 : a^12 = 56*a^2 + 88*a + 33 := by\n    calc\n      a ^ 12 = (a ^ 3) ^ 4 := by ring\n      _ = (2 * a + 1) ^ 4 := by rw [h_a3]\n      _ = 56 * a ^ 2 + 88 * a + 33 := by nlinarith\n  rw [h_a12, h_eq]\n  nlinarith",
    "orig_proof_length": 1129,
    "simp_proof_length": 208
  },
  {
    "problem_id": "mathd_numbertheory_765",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_765\n  (x : ℤ)\n  (h₀ : x < 0)\n  (h₁ : (24 * x) % 1199 = 15) :\n  x ≤ -449 := by\n  have h_main : x ≤ -449 := by\n    by_contra! h\n    have h₂ : -448 ≤ x := by linarith\n    have h₃ : x < 0 := h₀\n    have h₄ : (24 * x) % 1199 = 15 := h₁\n    have h₅ : x ≥ -448 := by linarith\n    have h₆ : x ≤ -1 := by\n      omega\n    -- We will check all possible values of x from -448 to -1 and show that none satisfy (24 * x) % 1199 = 15\n    have h₇ : False := by\n      -- Use the fact that x is between -448 and -1 to check each possible value\n      have h₈ : x ≥ -448 := by linarith\n      have h₉ : x ≤ -1 := by omega\n      -- Use interval_cases to check each possible value of x\n      interval_cases x <;> norm_num [Int.mul_emod, Int.add_emod] at h₄ ⊢ <;> omega\n    exact h₇\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_765\n  (x : ℤ)\n  (h₀ : x < 0)\n  (h₁ : (24 * x) % 1199 = 15) :\n  x ≤ -449 := by\n  omega",
    "orig_proof_length": 111,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_346",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_346\n  (f g : ℝ → ℝ)\n  (h₀ : ∀ x, f x = 2 * x - 3)\n  (h₁ : ∀ x, g x = x + 1) :\n  g (f 5 - 1) = 7 := by\n  have h₂ : f 5 = 7 := by\n    have h₂₁ : f 5 = 2 * (5 : ℝ) - 3 := by\n      rw [h₀]\n      <;> norm_num\n    rw [h₂₁]\n    <;> norm_num\n  \n  have h₃ : g (f 5 - 1) = 7 := by\n    have h₃₁ : g (f 5 - 1) = (f 5 - 1) + 1 := by\n      rw [h₁]\n      <;> ring\n    rw [h₃₁]\n    have h₃₂ : f 5 = 7 := h₂\n    rw [h₃₂]\n    <;> norm_num\n    <;> linarith\n  \n  exact h₃",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_346\n  (f g : ℝ → ℝ)\n  (h₀ : ∀ x, f x = 2 * x - 3)\n  (h₁ : ∀ x, g x = x + 1) :\n  g (f 5 - 1) = 7 := by\n  simp_all\n  norm_num",
    "orig_proof_length": 104,
    "simp_proof_length": 2
  },
  {
    "problem_id": "mathd_numbertheory_728",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_728 :\n  (29^13 - 5^13) % 7 = 3 := by\n  have h : (29^13 - 5^13) % 7 = 3 := by\n    norm_num [Nat.pow_mod, Nat.mod_mod, Nat.mod_eq_of_lt]\n    <;> rfl\n  \n  exact h",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_728 :\n  (29^13 - 5^13) % 7 = 3 := by\n norm_num",
    "orig_proof_length": 31,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_487",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_487\n  (a b c d : ℝ)\n  (h₀ : b = a^2)\n  (h₁ : a + b = 1)\n  (h₂ : d = c^2)\n  (h₃ : c + d = 1)\n  (h₄ : a ≠ c) :\n  Real.sqrt ((a - c)^2 + (b - d)^2)= Real.sqrt 10 := by\n  have h₅ : a^2 + a - 1 = 0 := by\n    have h₅₁ : a + b = 1 := h₁\n    have h₅₂ : b = a ^ 2 := h₀\n    rw [h₅₂] at h₅₁\n    ring_nf at h₅₁ ⊢\n    linarith\n  \n  have h₆ : c^2 + c - 1 = 0 := by\n    have h₆₁ : c + d = 1 := h₃\n    have h₆₂ : d = c ^ 2 := h₂\n    rw [h₆₂] at h₆₁\n    ring_nf at h₆₁ ⊢\n    linarith\n  \n  have h₇ : a + c = -1 := by\n    have h₇₁ : a ≠ c := h₄\n    have h₇₂ : a^2 + a - 1 = 0 := h₅\n    have h₇₃ : c^2 + c - 1 = 0 := h₆\n    apply mul_left_cancel₀ (sub_ne_zero.mpr h₇₁)\n    nlinarith [sq_pos_of_ne_zero (sub_ne_zero.mpr h₇₁), sq_nonneg (a - c)]\n  \n  have h₈ : (a - c)^2 = 5 := by\n    have h₈₁ : a^2 + a - 1 = 0 := h₅\n    have h₈₂ : c^2 + c - 1 = 0 := h₆\n    have h₈₃ : a + c = -1 := h₇\n    have h₈₄ : a ≠ c := h₄\n    have h₈₅ : (a - c)^2 = 5 := by\n      nlinarith [sq_pos_of_ne_zero (sub_ne_zero.mpr h₈₄), sq_nonneg (a + c)]\n    exact h₈₅\n  \n  have h₉ : (b - d)^2 = 5 := by\n    have h₉₁ : b = a ^ 2 := h₀\n    have h₉₂ : d = c ^ 2 := h₂\n    have h₉₃ : a + c = -1 := h₇\n    have h₉₄ : (a - c) ^ 2 = 5 := h₈\n    calc\n      (b - d) ^ 2 = (a ^ 2 - c ^ 2) ^ 2 := by\n        rw [h₉₁, h₉₂]\n        <;> ring_nf\n      _ = ((a - c) * (a + c)) ^ 2 := by\n        ring_nf\n        <;>\n        nlinarith\n      _ = (a - c) ^ 2 * (a + c) ^ 2 := by\n        ring_nf\n      _ = 5 * (a + c) ^ 2 := by\n        rw [h₈]\n        <;> ring_nf\n      _ = 5 * (-1) ^ 2 := by\n        rw [h₇]\n        <;> ring_nf\n      _ = 5 := by\n        norm_num\n      _ = 5 := by rfl\n  \n  have h₁₀ : (a - c)^2 + (b - d)^2 = 10 := by\n    have h₁₀₁ : (a - c) ^ 2 = 5 := h₈\n    have h₁₀₂ : (b - d) ^ 2 = 5 := h₉\n    linarith\n  \n  have h₁₁ : Real.sqrt ((a - c)^2 + (b - d)^2) = Real.sqrt 10 := by\n    rw [h₁₀]\n    <;>\n    simp [Real.sqrt_eq_iff_sq_eq]\n    <;>\n    ring_nf\n    <;>\n    norm_num\n  \n  apply h₁₁",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_487\n  (a b c d : ℝ)\n  (h₀ : b = a^2)\n  (h₁ : a + b = 1)\n  (h₂ : d = c^2)\n  (h₃ : c + d = 1)\n  (h₄ : a ≠ c) :\n  Real.sqrt ((a - c)^2 + (b - d)^2)= Real.sqrt 10 := by\n  have : a + c = -1 := by\n    apply mul_left_cancel₀ (sub_ne_zero.mpr h₄)\n    nlinarith\n  rw [show (a - c)^2 + (b - d)^2 = 10 by nlinarith]",
    "orig_proof_length": 529,
    "simp_proof_length": 40
  },
  {
    "problem_id": "numbertheory_fxeq4powxp6powxp9powx_f2powmdvdf2pown",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem numbertheory_fxeq4powxp6powxp9powx_f2powmdvdf2pown\n  (m n : ℕ)\n  (f : ℕ → ℕ)\n  (h₀ : ∀ x, f x = 4^x + 6^x + 9^x)\n  (h₁ : 0 < m ∧ 0 < n)\n  (h₂ : m ≤ n) :\n  f (2^m)∣f (2^n) := by\n  have h_main : ∀ (x : ℕ), 0 < x → f x ∣ f (2 * x) := by\n    intro x hx\n    have h₃ : f x = 4 ^ x + 6 ^ x + 9 ^ x := h₀ x\n    have h₄ : f (2 * x) = 4 ^ (2 * x) + 6 ^ (2 * x) + 9 ^ (2 * x) := by\n      rw [h₀]\n      <;> ring_nf\n    rw [h₃, h₄]\n    have h₅ : (4 : ℕ) ^ x > 0 := by positivity\n    have h₆ : (6 : ℕ) ^ x > 0 := by positivity\n    have h₇ : (9 : ℕ) ^ x > 0 := by positivity\n    have h₈ : (4 : ℕ) ^ (2 * x) = (4 ^ x) ^ 2 := by\n      rw [show (2 : ℕ) * x = x + x by ring]\n      simp [pow_add, pow_mul]\n      <;> ring_nf\n    have h₉ : (6 : ℕ) ^ (2 * x) = (6 ^ x) ^ 2 := by\n      rw [show (2 : ℕ) * x = x + x by ring]\n      simp [pow_add, pow_mul]\n      <;> ring_nf\n    have h₁₀ : (9 : ℕ) ^ (2 * x) = (9 ^ x) ^ 2 := by\n      rw [show (2 : ℕ) * x = x + x by ring]\n      simp [pow_add, pow_mul]\n      <;> ring_nf\n    rw [h₈, h₉, h₁₀]\n    -- We need to show that 4^x + 6^x + 9^x divides (4^x)^2 + (6^x)^2 + (9^x)^2\n    -- We use the identity (a + b + c)^2 = a^2 + b^2 + c^2 + 2(ab + bc + ca)\n    -- Therefore, a^2 + b^2 + c^2 = (a + b + c)^2 - 2(ab + bc + ca)\n    -- We show that a + b + c divides ab + bc + ca\n    have h₁₁ : (4 : ℕ) ^ x * (9 : ℕ) ^ x = (6 : ℕ) ^ (2 * x) := by\n      calc\n        (4 : ℕ) ^ x * (9 : ℕ) ^ x = (4 * 9) ^ x := by\n          rw [mul_pow]\n        _ = 36 ^ x := by norm_num\n        _ = (6 : ℕ) ^ (2 * x) := by\n          calc\n            36 ^ x = (6 ^ 2) ^ x := by norm_num\n            _ = 6 ^ (2 * x) := by\n              rw [← pow_mul]\n              <;> ring_nf\n            _ = (6 : ℕ) ^ (2 * x) := by rfl\n    have h₁₂ : (6 : ℕ) ^ x * (6 : ℕ) ^ x = (6 : ℕ) ^ (2 * x) := by\n      calc\n        (6 : ℕ) ^ x * (6 : ℕ) ^ x = 6 ^ (x + x) := by\n          rw [← pow_add]\n        _ = 6 ^ (2 * x) := by\n          ring_nf\n          <;> simp [mul_comm]\n          <;> ring_nf\n    have h₁₃ : (4 : ℕ) ^ x * (9 : ℕ) ^ x = (6 : ℕ) ^ x * (6 : ℕ) ^ x := by\n      linarith\n    -- Using the above, we can show that (4^x + 6^x + 9^x) divides 2 * (4^x * 6^x + 6^x * 9^x + 9^x * 4^x)\n    -- And thus divides (4^x)^2 + (6^x)^2 + (9^x)^2\n    have h₁₄ : (4 ^ x + 6 ^ x + 9 ^ x) ∣ ((4 ^ x) ^ 2 + (6 ^ x) ^ 2 + (9 ^ x) ^ 2) := by\n      have h₁₅ : (4 ^ x) ^ 2 + (6 ^ x) ^ 2 + (9 ^ x) ^ 2 = (4 ^ x + 6 ^ x + 9 ^ x) ^ 2 - 2 * (4 ^ x * 6 ^ x + 6 ^ x * 9 ^ x + 9 ^ x * 4 ^ x) := by\n        have h₁₆ : (4 ^ x + 6 ^ x + 9 ^ x) ^ 2 = (4 ^ x) ^ 2 + (6 ^ x) ^ 2 + (9 ^ x) ^ 2 + 2 * (4 ^ x * 6 ^ x + 6 ^ x * 9 ^ x + 9 ^ x * 4 ^ x) := by\n          ring_nf\n          <;>\n          simp [pow_two, mul_add, add_mul, mul_comm, mul_left_comm, mul_assoc]\n          <;>\n          ring_nf\n          <;>\n          omega\n        have h₁₇ : (4 ^ x + 6 ^ x + 9 ^ x) ^ 2 ≥ 2 * (4 ^ x * 6 ^ x + 6 ^ x * 9 ^ x + 9 ^ x * 4 ^ x) := by\n          have h₁₈ : 0 ≤ 4 ^ x := by positivity\n          have h₁₉ : 0 ≤ 6 ^ x := by positivity\n          have h₂₀ : 0 ≤ 9 ^ x := by positivity\n          nlinarith [sq_nonneg (4 ^ x - 6 ^ x), sq_nonneg (6 ^ x - 9 ^ x), sq_nonneg (9 ^ x - 4 ^ x)]\n        omega\n      have h₂₁ : (4 ^ x + 6 ^ x + 9 ^ x) ∣ 2 * (4 ^ x * 6 ^ x + 6 ^ x * 9 ^ x + 9 ^ x * 4 ^ x) := by\n        have h₂₂ : 2 * (4 ^ x * 6 ^ x + 6 ^ x * 9 ^ x + 9 ^ x * 4 ^ x) = (4 ^ x + 6 ^ x + 9 ^ x) * (2 * 6 ^ x) := by\n          have h₂₃ : 4 ^ x * 9 ^ x = 6 ^ x * 6 ^ x := by\n            calc\n              4 ^ x * 9 ^ x = (4 * 9) ^ x := by rw [mul_pow]\n              _ = 36 ^ x := by norm_num\n              _ = (6 ^ 2) ^ x := by norm_num\n              _ = 6 ^ (2 * x) := by rw [← pow_mul] <;> ring_nf\n              _ = (6 ^ x) ^ 2 := by\n                calc\n                  6 ^ (2 * x) = 6 ^ (x + x) := by ring_nf\n                  _ = 6 ^ x * 6 ^ x := by rw [pow_add]\n                  _ = (6 ^ x) ^ 2 := by ring\n              _ = 6 ^ x * 6 ^ x := by ring\n          calc\n            2 * (4 ^ x * 6 ^ x + 6 ^ x * 9 ^ x + 9 ^ x * 4 ^ x) = 2 * (4 ^ x * 6 ^ x + 6 ^ x * 9 ^ x + 4 ^ x * 9 ^ x) := by ring\n            _ = 2 * (4 ^ x * 6 ^ x + 6 ^ x * 9 ^ x + 6 ^ x * 6 ^ x) := by rw [h₂₃]\n            _ = 2 * (6 ^ x * (4 ^ x + 9 ^ x + 6 ^ x)) := by ring\n            _ = (4 ^ x + 6 ^ x + 9 ^ x) * (2 * 6 ^ x) := by ring\n            _ = (4 ^ x + 6 ^ x + 9 ^ x) * (2 * 6 ^ x) := by rfl\n        rw [h₂₂]\n        <;>\n        exact ⟨2 * 6 ^ x, by ring⟩\n      have h₂₄ : (4 ^ x + 6 ^ x + 9 ^ x) ∣ (4 ^ x + 6 ^ x + 9 ^ x) ^ 2 := by\n        use (4 ^ x + 6 ^ x + 9 ^ x)\n        <;> ring\n      have h₂₅ : (4 ^ x + 6 ^ x + 9 ^ x) ∣ (4 ^ x + 6 ^ x + 9 ^ x) ^ 2 - 2 * (4 ^ x * 6 ^ x + 6 ^ x * 9 ^ x + 9 ^ x * 4 ^ x) := by\n        exact Nat.dvd_sub' h₂₄ h₂₁\n      rw [h₁₅] at *\n      exact h₂₅\n    exact h₁₄\n  \n  have h_inductive_step : ∀ (k : ℕ), f (2 ^ m) ∣ f (2 ^ (m + k)) := by\n    intro k\n    have h₃ : ∀ (k : ℕ), f (2 ^ m) ∣ f (2 ^ (m + k)) := by\n      intro k\n      induction' k with k ih\n      · -- Base case: k = 0\n        simp [pow_add, pow_zero]\n        <;>\n        exact dvd_refl _\n      · -- Inductive step: assume the statement holds for k, prove for k + 1\n        have h₄ : f (2 ^ (m + k)) ∣ f (2 * (2 ^ (m + k))) := by\n          have h₅ : 0 < 2 ^ (m + k) := by\n            apply pow_pos\n            norm_num\n          have h₆ : f (2 ^ (m + k)) ∣ f (2 * (2 ^ (m + k))) := by\n            apply h_main\n            <;> positivity\n          exact h₆\n        have h₅ : f (2 ^ m) ∣ f (2 ^ (m + k)) := ih\n        have h₆ : f (2 * (2 ^ (m + k))) = f (2 ^ (m + k + 1)) := by\n          have h₇ : 2 * (2 ^ (m + k)) = 2 ^ (m + k + 1) := by\n            calc\n              2 * (2 ^ (m + k)) = 2 ^ 1 * 2 ^ (m + k) := by norm_num\n              _ = 2 ^ (1 + (m + k)) := by rw [← pow_add]\n              _ = 2 ^ (m + k + 1) := by ring_nf\n          rw [h₇]\n          <;> simp [pow_add, pow_one]\n          <;> ring_nf\n        have h₇ : f (2 ^ m) ∣ f (2 ^ (m + k + 1)) := by\n          have h₈ : f (2 ^ (m + k + 1)) = f (2 * (2 ^ (m + k))) := by\n            rw [h₆]\n            <;> ring_nf\n          rw [h₈]\n          exact dvd_trans h₅ h₄\n        simpa [add_assoc] using h₇\n    exact h₃ k\n  \n  have h_final : f (2 ^ m) ∣ f (2 ^ n) := by\n    have h₃ : ∃ (k : ℕ), n = m + k := by\n      use n - m\n      have h₄ : m ≤ n := h₂\n      have h₅ : m + (n - m) = n := by\n        omega\n      linarith\n    obtain ⟨k, hk⟩ := h₃\n    have h₄ : f (2 ^ m) ∣ f (2 ^ (m + k)) := h_inductive_step k\n    have h₅ : f (2 ^ (m + k)) = f (2 ^ n) := by\n      rw [hk]\n      <;> simp [pow_add]\n      <;> ring_nf\n    rw [h₅] at h₄\n    exact h₄\n  \n  exact h_final",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem numbertheory_fxeq4powxp6powxp9powx_f2powmdvdf2pown\n  (m n : ℕ)\n  (f : ℕ → ℕ)\n  (h₀ : ∀ x, f x = 4^x + 6^x + 9^x)\n  (h₁ : 0 < m ∧ 0 < n)\n  (h₂ : m ≤ n) :\n  f (2^m)∣f (2^n) := by\n  have h₃ : ∀ (x : ℕ), 0 < x → f x ∣ f (2 * x) := by\n    intro x hx\n    rw [h₀, h₀]\n    have h₅ : (4 : ℕ) ^ x > 0 := by positivity\n    have h₆ : (6 : ℕ) ^ x > 0 := by positivity\n    have h₇ : (9 : ℕ) ^ x > 0 := by positivity\n    have h₈ : (4 : ℕ) ^ (2 * x) = (4 ^ x) ^ 2 := by\n      rw [show (2 : ℕ) * x = x + x by ring]\n      simp [pow_add, pow_mul]\n      <;> ring_nf\n    have h₉ : (6 : ℕ) ^ (2 * x) = (6 ^ x) ^ 2 := by\n      rw [show (2 : ℕ) * x = x + x by ring]\n      simp [pow_add, pow_mul]\n      <;> ring_nf\n    have h₁₀ : (9 : ℕ) ^ (2 * x) = (9 ^ x) ^ 2 := by\n      rw [show (2 : ℕ) * x = x + x by ring]\n      simp [pow_add, pow_mul]\n      <;> ring_nf\n    rw [h₈, h₉, h₁₀]\n    have h₁₁ : (4 ^ x) ^ 2 + (6 ^ x) ^ 2 + (9 ^ x) ^ 2 = (4 ^ x + 6 ^ x + 9 ^ x) ^ 2 - 2 * (4 ^ x * 6 ^ x + 6 ^ x * 9 ^ x + 9 ^ x * 4 ^ x) := by\n      have h₁₂ : (4 ^ x + 6 ^ x + 9 ^ x) ^ 2 = (4 ^ x) ^ 2 + (6 ^ x) ^ 2 + (9 ^ x) ^ 2 + 2 * (4 ^ x * 6 ^ x + 6 ^ x * 9 ^ x + 9 ^ x * 4 ^ x) := by\n        ring_nf\n      have h₁₃ : (4 ^ x + 6 ^ x + 9 ^ x) ^ 2 ≥ 2 * (4 ^ x * 6 ^ x + 6 ^ x * 9 ^ x + 9 ^ x * 4 ^ x) := by\n        have h₁₄ : 0 ≤ 4 ^ x := by positivity\n        have h₁₅ : 0 ≤ 6 ^ x := by positivity\n        have h₁₆ : 0 ≤ 9 ^ x := by positivity\n        nlinarith [sq_nonneg (4 ^ x - 6 ^ x), sq_nonneg (6 ^ x - 9 ^ x), sq_nonneg (9 ^ x - 4 ^ x)]\n      omega\n    have h₁₂ : 2 * (4 ^ x * 6 ^ x + 6 ^ x * 9 ^ x + 9 ^ x * 4 ^ x) = (4 ^ x + 6 ^ x + 9 ^ x) * (2 * 6 ^ x) := by\n      have h₁₃ : 4 ^ x * 9 ^ x = 6 ^ x * 6 ^ x := by\n        calc\n          4 ^ x * 9 ^ x = (4 * 9) ^ x := by rw [mul_pow]\n          _ = 36 ^ x := by norm_num\n          _ = (6 ^ 2) ^ x := by norm_num\n          _ = 6 ^ (2 * x) := by rw [← pow_mul]\n          _ = (6 ^ x) ^ 2 := by\n            calc\n              6 ^ (2 * x) = 6 ^ (x + x) := by ring_nf\n              _ = 6 ^ x * 6 ^ x := by rw [pow_add]\n              _ = (6 ^ x) ^ 2 := by ring\n          _ = 6 ^ x * 6 ^ x := by ring\n      calc\n        2 * (4 ^ x * 6 ^ x + 6 ^ x * 9 ^ x + 9 ^ x * 4 ^ x) = 2 * (4 ^ x * 6 ^ x + 6 ^ x * 9 ^ x + 4 ^ x * 9 ^ x) := by ring\n        _ = 2 * (4 ^ x * 6 ^ x + 6 ^ x * 9 ^ x + 6 ^ x * 6 ^ x) := by rw [h₁₃]\n        _ = 2 * (6 ^ x * (4 ^ x + 9 ^ x + 6 ^ x)) := by ring\n        _ = (4 ^ x + 6 ^ x + 9 ^ x) * (2 * 6 ^ x) := by ring\n        _ = (4 ^ x + 6 ^ x + 9 ^ x) * (2 * 6 ^ x) := by rfl\n    have h₁₃ : (4 ^ x + 6 ^ x + 9 ^ x) ∣ (4 ^ x + 6 ^ x + 9 ^ x) ^ 2 := by\n      use (4 ^ x + 6 ^ x + 9 ^ x)\n      <;> ring\n    have h₁₄ : (4 ^ x + 6 ^ x + 9 ^ x) ∣ (4 ^ x + 6 ^ x + 9 ^ x) ^ 2 - 2 * (4 ^ x * 6 ^ x + 6 ^ x * 9 ^ x + 9 ^ x * 4 ^ x) := by\n      exact Nat.dvd_sub' h₁₃ (by simp [h₁₂])\n    rw [h₁₁] at *\n    exact h₁₄\n  have h₄ : ∀ (k : ℕ), f (2 ^ m) ∣ f (2 ^ (m + k)) := by\n    intro k\n    induction' k with k ih\n    ·\n      simp [pow_add, pow_zero]\n    ·\n      have h₅ : f (2 ^ (m + k)) ∣ f (2 * (2 ^ (m + k))) := by\n        have h₆ : 0 < 2 ^ (m + k) := by\n          apply pow_pos\n          norm_num\n        have h₇ : f (2 ^ (m + k)) ∣ f (2 * (2 ^ (m + k))) := by\n          apply h₃\n          exact h₆\n        exact h₇\n      have h₈ : f (2 ^ m) ∣ f (2 ^ (m + k)) := ih\n      have h₉ : f (2 * (2 ^ (m + k))) = f (2 ^ (m + k + 1)) := by\n        have h₁₀ : 2 * (2 ^ (m + k)) = 2 ^ (m + k + 1) := by\n          calc\n            2 * (2 ^ (m + k)) = 2 ^ 1 * 2 ^ (m + k) := by norm_num\n            _ = 2 ^ (1 + (m + k)) := by rw [← pow_add]\n            _ = 2 ^ (m + k + 1) := by ring_nf\n        rw [h₁₀]\n      rw [h₉] at h₅\n      exact dvd_trans h₈ h₅\n  have h₅ : ∃ (k : ℕ), n = m + k := by\n    use n - m\n    have h₆ : m ≤ n := h₂\n    have h₇ : m + (n - m) = n := by\n      omega\n    linarith\n  obtain ⟨k, hk⟩ := h₅\n  have h₆ : f (2 ^ m) ∣ f (2 ^ (m + k)) := h₄ k\n  have h₇ : f (2 ^ (m + k)) = f (2 ^ n) := by\n    rw [hk]\n  rw [h₇] at h₆\n  exact h₆",
    "orig_proof_length": 1977,
    "simp_proof_length": 1391
  },
  {
    "problem_id": "aime_1987_p5",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1987_p5\n  (x y : ℤ)\n  (h₀ : y^2 + 3 * (x^2 * y^2) = 30 * x^2 + 517):\n  3 * (x^2 * y^2) = 588 := by\n  have h₁ : (3 * x^2 + 1 : ℤ) ∣ 507 := by\n    have h₁₁ : y ^ 2 + 3 * (x ^ 2 * y ^ 2) = 30 * x ^ 2 + 517 := h₀\n    have h₁₂ : (3 * x ^ 2 + 1 : ℤ) * y ^ 2 = 30 * x ^ 2 + 517 := by\n      ring_nf at h₁₁ ⊢\n      <;> linarith\n    have h₁₃ : (3 * x ^ 2 + 1 : ℤ) * y ^ 2 = 10 * (3 * x ^ 2 + 1) + 507 := by\n      ring_nf at h₁₂ ⊢\n      <;> linarith\n    have h₁₄ : (3 * x ^ 2 + 1 : ℤ) ∣ 507 := by\n      use y ^ 2 - 10\n      linarith\n    exact h₁₄\n  \n  have h₂ : x = 2 ∨ x = -2 := by\n    have h₂₁ : (3 * x ^ 2 + 1 : ℤ) ∣ 507 := h₁\n    have h₂₂ : x ≤ 12 := by\n      by_contra h\n      have h₂₃ : x ≥ 13 := by\n        nlinarith\n      have h₂₄ : (3 * x ^ 2 + 1 : ℤ) > 507 := by\n        have h₂₅ : (x : ℤ) ≥ 13 := by exact_mod_cast h₂₃\n        nlinarith\n      have h₂₅ : (3 * x ^ 2 + 1 : ℤ) ∣ 507 := h₂₁\n      have h₂₆ : (3 * x ^ 2 + 1 : ℤ) ≤ 507 := by\n        have h₂₇ : (3 * x ^ 2 + 1 : ℤ) ∣ 507 := h₂₁\n        have h₂₈ : (3 * x ^ 2 + 1 : ℤ) ≤ 507 := Int.le_of_dvd (by norm_num) h₂₇\n        exact h₂₈\n      linarith\n    have h₂₃ : x ≥ -12 := by\n      by_contra h\n      have h₂₄ : x ≤ -13 := by\n        nlinarith\n      have h₂₅ : (3 * x ^ 2 + 1 : ℤ) > 507 := by\n        have h₂₆ : (x : ℤ) ≤ -13 := by exact_mod_cast h₂₄\n        nlinarith\n      have h₂₆ : (3 * x ^ 2 + 1 : ℤ) ∣ 507 := h₂₁\n      have h₂₇ : (3 * x ^ 2 + 1 : ℤ) ≤ 507 := by\n        have h₂₈ : (3 * x ^ 2 + 1 : ℤ) ∣ 507 := h₂₁\n        have h₂₉ : (3 * x ^ 2 + 1 : ℤ) ≤ 507 := Int.le_of_dvd (by norm_num) h₂₈\n        exact h₂₉\n      linarith\n    -- We now check all possible values of x from -12 to 12\n    have h₂₄ : x = 2 ∨ x = -2 := by\n      interval_cases x <;> norm_num at h₂₁ ⊢ <;>\n        (try omega) <;>\n        (try {\n          norm_num at h₀ ⊢\n          <;>\n          (try {\n            have h₂₅ : y ≤ 23 := by\n              nlinarith\n            have h₂₆ : y ≥ -23 := by\n              nlinarith\n            interval_cases y <;> norm_num at h₀ ⊢ <;> omega\n          }) <;>\n          (try {\n            have h₂₅ : y ≤ 7 := by\n              nlinarith\n            have h₂₆ : y ≥ -7 := by\n              nlinarith\n            interval_cases y <;> norm_num at h₀ ⊢ <;> omega\n          }) <;>\n          (try {\n            have h₂₅ : y ≤ 3 := by\n              nlinarith\n            have h₂₆ : y ≥ -3 := by\n              nlinarith\n            interval_cases y <;> norm_num at h₀ ⊢ <;> omega\n          })\n        }) <;>\n        (try {\n          -- For x = 0, we check y^2 = 517, which is not a perfect square\n          have h₂₅ : y ≤ 22 := by\n            nlinarith\n          have h₂₆ : y ≥ -22 := by\n            nlinarith\n          interval_cases y <;> norm_num at h₀ ⊢ <;> omega\n        })\n    exact h₂₄\n  \n  have h₃ : 3 * (x^2 * y^2) = 588 := by\n    have h₄ : x = 2 ∨ x = -2 := h₂\n    cases h₄ with\n    | inl h₄ =>\n      have h₅ : x = 2 := h₄\n      have h₆ : y ^ 2 + 3 * (x ^ 2 * y ^ 2) = 30 * x ^ 2 + 517 := h₀\n      rw [h₅] at h₆\n      ring_nf at h₆ ⊢\n      have h₇ : y ≤ 7 := by\n        nlinarith\n      have h₈ : y ≥ -7 := by\n        nlinarith\n      interval_cases y <;> norm_num at h₆ ⊢ <;>\n        (try omega) <;>\n        (try nlinarith)\n    | inr h₄ =>\n      have h₅ : x = -2 := h₄\n      have h₆ : y ^ 2 + 3 * (x ^ 2 * y ^ 2) = 30 * x ^ 2 + 517 := h₀\n      rw [h₅] at h₆\n      ring_nf at h₆ ⊢\n      have h₇ : y ≤ 7 := by\n        nlinarith\n      have h₈ : y ≥ -7 := by\n        nlinarith\n      interval_cases y <;> norm_num at h₆ ⊢ <;>\n        (try omega) <;>\n        (try nlinarith)\n  \n  exact h₃",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1987_p5\n  (x y : ℤ)\n  (h₀ : y^2 + 3 * (x^2 * y^2) = 30 * x^2 + 517):\n  3 * (x^2 * y^2) = 588 := by\n  have : 3 * x^2 + 1 ∣ 507 := by\n    use y^2 - 10\n    linarith\n  have h₁ : x ≤ 12 := by\n    nlinarith [Int.le_of_dvd (by norm_num) this]\n  have h₂ : x ≥ -12 := by\n    nlinarith [Int.le_of_dvd (by norm_num) this]\n  interval_cases x <;> norm_num at h₀ ⊢\n  <;> (try {\n    have : y ≤ 23 := by\n      nlinarith\n    have : y ≥ -23 := by\n      nlinarith\n    interval_cases y <;> norm_num at h₀ ⊢\n  })",
    "orig_proof_length": 832,
    "simp_proof_length": 92
  },
  {
    "problem_id": "amc12b_2021_p9",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2021_p9 :\n  (Real.log 80 / Real.log 2) / (Real.log 2 / Real.log 40) - (Real.log 160 / Real.log 2) / (Real.log 2 / Real.log 20) = 2 := by\n  have h_main : (Real.log 80 / Real.log 2) / (Real.log 2 / Real.log 40) - (Real.log 160 / Real.log 2) / (Real.log 2 / Real.log 20) = 2 := by\n    have h₁ : Real.log 80 = Real.log (2^4 * 5) := by norm_num\n    have h₂ : Real.log 40 = Real.log (2^3 * 5) := by norm_num\n    have h₃ : Real.log 160 = Real.log (2^5 * 5) := by norm_num\n    have h₄ : Real.log 20 = Real.log (2^2 * 5) := by norm_num\n    rw [h₁, h₂, h₃, h₄]\n    have h₅ : Real.log (2 ^ 4 * 5) = Real.log (2 ^ 4) + Real.log 5 := by\n      rw [Real.log_mul (by positivity) (by positivity)]\n    have h₆ : Real.log (2 ^ 3 * 5) = Real.log (2 ^ 3) + Real.log 5 := by\n      rw [Real.log_mul (by positivity) (by positivity)]\n    have h₇ : Real.log (2 ^ 5 * 5) = Real.log (2 ^ 5) + Real.log 5 := by\n      rw [Real.log_mul (by positivity) (by positivity)]\n    have h₈ : Real.log (2 ^ 2 * 5) = Real.log (2 ^ 2) + Real.log 5 := by\n      rw [Real.log_mul (by positivity) (by positivity)]\n    rw [h₅, h₆, h₇, h₈]\n    have h₉ : Real.log (2 ^ 4) = 4 * Real.log 2 := by\n      rw [Real.log_pow] <;> norm_num\n    have h₁₀ : Real.log (2 ^ 3) = 3 * Real.log 2 := by\n      rw [Real.log_pow] <;> norm_num\n    have h₁₁ : Real.log (2 ^ 5) = 5 * Real.log 2 := by\n      rw [Real.log_pow] <;> norm_num\n    have h₁₂ : Real.log (2 ^ 2) = 2 * Real.log 2 := by\n      rw [Real.log_pow] <;> norm_num\n    rw [h₉, h₁₀, h₁₁, h₁₂]\n    have h₁₃ : Real.log 2 ≠ 0 := by\n      exact Real.log_ne_zero_of_pos_of_ne_one (by norm_num) (by norm_num)\n    have h₁₄ : Real.log 5 ≠ 0 := by\n      exact Real.log_ne_zero_of_pos_of_ne_one (by norm_num) (by norm_num)\n    field_simp [h₁₃, h₁₄]\n    ring_nf\n    <;>\n    (try norm_num) <;>\n    (try\n      {\n        have h₁₅ : Real.log 5 > 0 := Real.log_pos (by norm_num)\n        nlinarith [Real.log_pos (by norm_num : (1 : ℝ) < 2),\n          Real.log_pos (by norm_num : (1 : ℝ) < 5)]\n      }) <;>\n    (try\n      {\n        have h₁₅ : Real.log 5 > 0 := Real.log_pos (by norm_num)\n        nlinarith [Real.log_pos (by norm_num : (1 : ℝ) < 2),\n          Real.log_pos (by norm_num : (1 : ℝ) < 5)]\n      }) <;>\n    (try\n      {\n        have h₁₅ : Real.log 5 > 0 := Real.log_pos (by norm_num)\n        nlinarith [Real.log_pos (by norm_num : (1 : ℝ) < 2),\n          Real.log_pos (by norm_num : (1 : ℝ) < 5)]\n      })\n    <;>\n    (try\n      {\n        have h₁₅ : Real.log 5 > 0 := Real.log_pos (by norm_num)\n        nlinarith [Real.log_pos (by norm_num : (1 : ℝ) < 2),\n          Real.log_pos (by norm_num : (1 : ℝ) < 5)]\n      })\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2021_p9 :\n  (Real.log 80 / Real.log 2) / (Real.log 2 / Real.log 40) - (Real.log 160 / Real.log 2) / (Real.log 2 / Real.log 20) = 2 := by\n  field_simp [Real.log_mul, Real.log_pow, show Real.log 80 = Real.log (2^4 * 5) by norm_num,\n    show Real.log 40 = Real.log (2^3 * 5) by norm_num,\n    show Real.log 160 = Real.log (2^5 * 5) by norm_num,\n    show Real.log 20 = Real.log (2^2 * 5) by norm_num]\n  ring",
    "orig_proof_length": 612,
    "simp_proof_length": 67
  },
  {
    "problem_id": "mathd_algebra_215",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_215\n  (S : Finset ℝ)\n  (h₀ : ∀ (x : ℝ), x ∈ S ↔ (x + 3)^2 = 121) :\n  ∑ k ∈ S, k = -6 := by\n  have h₁ : S = {8, -14} := by\n    apply Finset.ext\n    intro x\n    simp only [Finset.mem_insert, Finset.mem_singleton, h₀]\n    constructor\n    · intro h\n      have h₂ : (x + 3) ^ 2 = 121 := by exact h\n      have h₃ : x + 3 = 11 ∨ x + 3 = -11 := by\n        apply or_iff_not_imp_left.mpr\n        intro h₄\n        apply eq_of_sub_eq_zero\n        apply mul_left_cancel₀ (sub_ne_zero.mpr h₄)\n        nlinarith\n      cases h₃ with\n      | inl h₃ =>\n        have h₄ : x = 8 := by linarith\n        simp [h₄]\n      | inr h₃ =>\n        have h₄ : x = -14 := by linarith\n        simp [h₄]\n    · intro h\n      cases h with\n      | inl h =>\n        rw [h]\n        norm_num\n      | inr h =>\n        rw [h]\n        norm_num\n  \n  have h₂ : ∑ k ∈ S, k = -6 := by\n    rw [h₁]\n    norm_num [Finset.sum_pair (show (8 : ℝ) ≠ -14 by norm_num)]\n  \n  exact h₂",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_215\n  (S : Finset ℝ)\n  (h₀ : ∀ (x : ℝ), x ∈ S ↔ (x + 3)^2 = 121) :\n  ∑ k ∈ S, k = -6 := by\n  have : S = {8, -14} := by\n    ext x\n    simp_all\n    constructor\n    · intro h\n      apply or_iff_not_imp_left.mpr\n      intro h₁\n      apply mul_left_cancel₀ (sub_ne_zero.mpr h₁)\n      nlinarith\n    · rintro (rfl | rfl) <;> norm_num\n  rw [this]\n  norm_num",
    "orig_proof_length": 177,
    "simp_proof_length": 44
  },
  {
    "problem_id": "mathd_numbertheory_552",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_552\n  (f g h : ℕ+ → ℕ)\n  (h₀ : ∀ x, f x = 12 * x + 7)\n  (h₁ : ∀ x, g x = 5 * x + 2)\n  (h₂ : ∀ x, h x = Nat.gcd (f x) (g x))\n  (h₃ : Fintype (Set.range h)) :\n  ∑ k ∈ (Set.range h).toFinset, k = 12 := by\n  have h_div : ∀ (x : ℕ+), h x ∣ 11 := by\n    intro x\n    have h₄ : h x = Nat.gcd (f x) (g x) := h₂ x\n    rw [h₄]\n    have h₅ : f x = 12 * (x : ℕ) + 7 := by\n      simp [h₀]\n      <;> norm_cast\n    have h₆ : g x = 5 * (x : ℕ) + 2 := by\n      simp [h₁]\n      <;> norm_cast\n    have h₇ : 5 * f x - 12 * g x = 11 := by\n      rw [h₅, h₆]\n      norm_num [mul_add, add_mul, mul_assoc]\n      <;> ring_nf at *\n      <;> norm_cast\n      <;> simp [PNat.ne_zero]\n      <;> omega\n    have h₈ : Nat.gcd (f x) (g x) ∣ f x := Nat.gcd_dvd_left (f x) (g x)\n    have h₉ : Nat.gcd (f x) (g x) ∣ g x := Nat.gcd_dvd_right (f x) (g x)\n    have h₁₀ : Nat.gcd (f x) (g x) ∣ 5 * f x := dvd_mul_of_dvd_right h₈ 5\n    have h₁₁ : Nat.gcd (f x) (g x) ∣ 12 * g x := dvd_mul_of_dvd_right h₉ 12\n    have h₁₂ : Nat.gcd (f x) (g x) ∣ 5 * f x - 12 * g x := Nat.dvd_sub' h₁₀ h₁₁\n    rw [h₇] at h₁₂\n    exact h₁₂\n  \n  have h_one_or_eleven : ∀ (x : ℕ+), h x = 1 ∨ h x = 11 := by\n    intro x\n    have h₄ : h x ∣ 11 := h_div x\n    have h₅ : h x = 1 ∨ h x = 11 := by\n      have h₆ : h x ∣ 11 := h₄\n      have h₇ : h x ≤ 11 := Nat.le_of_dvd (by norm_num) h₆\n      interval_cases h x <;> norm_num at h₆ ⊢ <;>\n        (try omega) <;> (try { contradiction }) <;> (try { aesop })\n    exact h₅\n  \n  have h_one_in_range : 1 ∈ Set.range h := by\n    have h₄ : h ⟨1, by norm_num⟩ = 1 := by\n      have h₅ : h ⟨1, by norm_num⟩ = Nat.gcd (f ⟨1, by norm_num⟩) (g ⟨1, by norm_num⟩) := h₂ ⟨1, by norm_num⟩\n      rw [h₅]\n      have h₆ : f ⟨1, by norm_num⟩ = 12 * (1 : ℕ) + 7 := by\n        simp [h₀]\n        <;> norm_cast\n      have h₇ : g ⟨1, by norm_num⟩ = 5 * (1 : ℕ) + 2 := by\n        simp [h₁]\n        <;> norm_cast\n      rw [h₆, h₇]\n      norm_num\n      <;> decide\n    have h₈ : (1 : ℕ) ∈ Set.range h := by\n      refine' ⟨⟨1, by norm_num⟩, _⟩\n      rw [h₄]\n    exact h₈\n  \n  have h_eleven_in_range : 11 ∈ Set.range h := by\n    have h₄ : h ⟨4, by norm_num⟩ = 11 := by\n      have h₅ : h ⟨4, by norm_num⟩ = Nat.gcd (f ⟨4, by norm_num⟩) (g ⟨4, by norm_num⟩) := h₂ ⟨4, by norm_num⟩\n      rw [h₅]\n      have h₆ : f ⟨4, by norm_num⟩ = 12 * (4 : ℕ) + 7 := by\n        simp [h₀]\n        <;> norm_cast\n      have h₇ : g ⟨4, by norm_num⟩ = 5 * (4 : ℕ) + 2 := by\n        simp [h₁]\n        <;> norm_cast\n      rw [h₆, h₇]\n      norm_num\n      <;> decide\n    have h₈ : (11 : ℕ) ∈ Set.range h := by\n      refine' ⟨⟨4, by norm_num⟩, _⟩\n      rw [h₄]\n    exact h₈\n  \n  have h_sum : ∑ k ∈ (Set.range h).toFinset, k = 12 := by\n    have h₄ : (Set.range h).toFinset = {1, 11} := by\n      apply Finset.ext\n      intro x\n      simp only [Finset.mem_insert, Finset.mem_singleton, Set.mem_toFinset]\n      constructor\n      · intro hx\n        have h₅ : x ∈ Set.range h := hx\n        have h₆ : x = 1 ∨ x = 11 := by\n          obtain ⟨y, rfl⟩ := h₅\n          have h₇ : h y = 1 ∨ h y = 11 := h_one_or_eleven y\n          cases h₇ with\n          | inl h₇ =>\n            simp [h₇]\n          | inr h₇ =>\n            simp [h₇]\n        cases h₆ with\n        | inl h₆ =>\n          simp [h₆]\n        | inr h₆ =>\n          simp [h₆]\n      · intro hx\n        cases hx with\n        | inl hx =>\n          rw [hx]\n          exact h_one_in_range\n        | inr hx =>\n          rw [hx]\n          exact h_eleven_in_range\n    rw [h₄]\n    norm_num\n  \n  exact h_sum",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_552\n  (f g h : ℕ+ → ℕ)\n  (h₀ : ∀ x, f x = 12 * x + 7)\n  (h₁ : ∀ x, g x = 5 * x + 2)\n  (h₂ : ∀ x, h x = Nat.gcd (f x) (g x))\n  (h₃ : Fintype (Set.range h)) :\n  ∑ k ∈ (Set.range h).toFinset, k = 12 := by\n  have h₁₁ : ∀ x, h x = 1 ∨ h x = 11 := by\n    intro x\n    rw [h₂]\n    have h₁₂ : 5 * f x - 12 * g x = 11 := by\n      simp [h₀, h₁, Nat.mul_add, Nat.add_mul, Nat.mul_assoc]\n      norm_num\n      <;> ring_nf at *\n      <;> norm_cast\n      <;> simp [PNat.ne_zero]\n      <;> omega\n    have h₁₄ := Nat.gcd_dvd_left (f x) (g x)\n    have h₁₅ := Nat.gcd_dvd_right (f x) (g x)\n    have h₁₆ := Nat.dvd_sub' (dvd_mul_of_dvd_right h₁₄ 5) (dvd_mul_of_dvd_right h₁₅ 12)\n    rw [h₁₂] at h₁₆\n    exact (Nat.dvd_prime (Nat.prime_eleven)).mp h₁₆\n  rw [show (Set.range h).toFinset = {1, 11} by\n    ext x\n    simp\n    constructor\n    · intro hx\n      obtain ⟨y, rfl⟩ := hx\n      have h₂₂ := h₁₁ y\n      cases h₂₂ with\n      | inl h₂₂ =>\n        simp [h₂₂]\n      | inr h₂₂ =>\n        simp [h₂₂]\n    · intro hx\n      cases hx with\n      | inl hx =>\n        rw [hx]\n        exact (by\n          use ⟨1, by norm_num⟩\n          simp [h₀, h₁, h₂])\n      | inr hx =>\n        rw [hx]\n        exact (by\n          use ⟨4, by norm_num⟩\n          simp [h₀, h₁, h₂]) ]\n  norm_num",
    "orig_proof_length": 846,
    "simp_proof_length": 234
  },
  {
    "problem_id": "mathd_numbertheory_293",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_293\n  (n : ℕ)\n  (h₀ : n ≤ 9)\n  (h₁ : 11∣20 * 100 + 10 * n + 7) :\n  n = 5 := by\n  have h₂ : n = 5 := by\n    have h₃ : n ≤ 9 := h₀\n    have h₄ : 11 ∣ 20 * 100 + 10 * n + 7 := h₁\n    interval_cases n <;> norm_num at h₄ ⊢ <;>\n      (try omega) <;>\n      (try {\n        rcases h₄ with ⟨k, hk⟩\n        norm_num at hk\n        omega\n      })\n  exact h₂",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_293\n  (n : ℕ)\n  (h₀ : n ≤ 9)\n  (h₁ : 11∣20 * 100 + 10 * n + 7) :\n  n = 5 := by\n  omega",
    "orig_proof_length": 64,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_769",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_769 :\n  (129^34 + 96^38) % 11 = 9 := by\n  have h₁ : (129^34 + 96^38) % 11 = 9 := by\n    norm_num [Nat.pow_mod, Nat.add_mod, Nat.mod_mod]\n    <;> rfl\n  exact h₁",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_769 :\n  (129^34 + 96^38) % 11 = 9 := by\n norm_num",
    "orig_proof_length": 30,
    "simp_proof_length": 1
  },
  {
    "problem_id": "aime_1994_p3",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1994_p3\n  (f : ℤ → ℤ)\n  (h0 : ∀ (x : ℤ), f x + f (x-1) = x^2)\n  (h1 : f 19 = 94):\n  f (94) % 1000 = 561 := by\n  have h2 : f 18 = 267 := by\n    have h2₁ : f 19 + f 18 = (19 : ℤ)^2 := by\n      have h2₂ := h0 19\n      norm_num at h2₂ ⊢\n      <;> linarith\n    norm_num [h1] at h2₁ ⊢\n    <;> linarith\n  \n  have h3 : ∀ (x : ℤ), f x = f (x - 2) + 2 * x - 1 := by\n    intro x\n    have h3₁ := h0 x\n    have h3₂ := h0 (x - 1)\n    have h3₃ : f (x - 1) = (x - 1 : ℤ)^2 - f (x - 2) := by\n      have h3₄ := h0 (x - 1)\n      have h3₅ : f (x - 1) + f (x - 2) = (x - 1 : ℤ)^2 := by\n        ring_nf at h3₄ ⊢\n        <;> linarith\n      linarith\n    have h3₄ : f x + f (x - 1) = (x : ℤ)^2 := by\n      exact h0 x\n    have h3₅ : f x = (x : ℤ)^2 - f (x - 1) := by linarith\n    rw [h3₅, h3₃]\n    ring_nf\n    <;> nlinarith\n  \n  have h4 : f 94 = 4561 := by\n    have h4₁ : f 94 = 4561 := by\n      have h4₂ := h3 94\n      have h4₃ := h3 92\n      have h4₄ := h3 90\n      have h4₅ := h3 88\n      have h4₆ := h3 86\n      have h4₇ := h3 84\n      have h4₈ := h3 82\n      have h4₉ := h3 80\n      have h4₁₀ := h3 78\n      have h4₁₁ := h3 76\n      have h4₁₂ := h3 74\n      have h4₁₃ := h3 72\n      have h4₁₄ := h3 70\n      have h4₁₅ := h3 68\n      have h4₁₆ := h3 66\n      have h4₁₇ := h3 64\n      have h4₁₈ := h3 62\n      have h4₁₉ := h3 60\n      have h4₂₀ := h3 58\n      have h4₂₁ := h3 56\n      have h4₂₂ := h3 54\n      have h4₂₃ := h3 52\n      have h4₂₄ := h3 50\n      have h4₂₅ := h3 48\n      have h4₂₆ := h3 46\n      have h4₂₇ := h3 44\n      have h4₂₈ := h3 42\n      have h4₂₉ := h3 40\n      have h4₃₀ := h3 38\n      have h4₃₁ := h3 36\n      have h4₃₂ := h3 34\n      have h4₃₃ := h3 32\n      have h4₃₄ := h3 30\n      have h4₃₅ := h3 28\n      have h4₃₆ := h3 26\n      have h4₃₇ := h3 24\n      have h4₃₈ := h3 22\n      have h4₃₉ := h3 20\n      have h4₄₀ := h3 18\n      have h4₄₁ := h3 16\n      have h4₄₂ := h3 14\n      have h4₄₃ := h3 12\n      have h4₄₄ := h3 10\n      have h4₄₅ := h3 8\n      have h4₄₆ := h3 6\n      have h4₄₇ := h3 4\n      have h4₄₈ := h3 2\n      have h4₄₉ := h3 0\n      have h4₅₀ := h3 (-2)\n      have h4₅₁ := h3 (-4)\n      have h4₅₂ := h3 (-6)\n      have h4₅₃ := h3 (-8)\n      have h4₅₄ := h3 (-10)\n      norm_num at *\n      <;>\n      (try omega) <;>\n      (try ring_nf at *) <;>\n      (try norm_num at *) <;>\n      (try linarith) <;>\n      (try nlinarith)\n      <;>\n      (try\n        {\n          simp_all [h1, h2]\n          <;> ring_nf at *\n          <;> norm_num at *\n          <;> linarith\n        })\n      <;>\n      (try\n        {\n          omega\n        })\n    exact h4₁\n  \n  have h5 : f 94 % 1000 = 561 := by\n    rw [h4]\n    <;> norm_num\n    <;> rfl\n  \n  exact h5",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1994_p3\n  (f : ℤ → ℤ)\n  (h0 : ∀ (x : ℤ), f x + f (x-1) = x^2)\n  (h1 : f 19 = 94):\n  f (94) % 1000 = 561 := by\n  have h2 := h0 19\n  have h3 : ∀ (x : ℤ), f x = f (x - 2) + 2 * x - 1 := by\n    intro x\n    have h3₁ := h0 x\n    have h3₂ := h0 (x - 1)\n    have h3₃ := h0 (x - 2)\n    ring_nf at h3₁ h3₂ h3₃ ⊢\n    linarith\n  have h4 := h3 94\n  have h5 := h3 92\n  have h6 := h3 90\n  have h7 := h3 88\n  have h8 := h3 86\n  have h9 := h3 84\n  have h10 := h3 82\n  have h11 := h3 80\n  have h12 := h3 78\n  have h13 := h3 76\n  have h14 := h3 74\n  have h15 := h3 72\n  have h16 := h3 70\n  have h17 := h3 68\n  have h18 := h3 66\n  have h19 := h3 64\n  have h20 := h3 62\n  have h21 := h3 60\n  have h22 := h3 58\n  have h23 := h3 56\n  have h24 := h3 54\n  have h25 := h3 52\n  have h26 := h3 50\n  have h27 := h3 48\n  have h28 := h3 46\n  have h29 := h3 44\n  have h30 := h3 42\n  have h31 := h3 40\n  have h32 := h3 38\n  have h33 := h3 36\n  have h34 := h3 34\n  have h35 := h3 32\n  have h36 := h3 30\n  have h37 := h3 28\n  have h38 := h3 26\n  have h39 := h3 24\n  have h40 := h3 22\n  have h41 := h3 20\n  have h42 := h3 18\n  have h43 := h3 16\n  have h44 := h3 14\n  have h45 := h3 12\n  have h46 := h3 10\n  have h47 := h3 8\n  have h48 := h3 6\n  have h49 := h3 4\n  have h50 := h3 2\n  norm_num at *\n  omega",
    "orig_proof_length": 605,
    "simp_proof_length": 303
  },
  {
    "problem_id": "mathd_numbertheory_207",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_207 :\n  8 * 9^2 + 5 * 9 + 2 = 695 := by\n  have h : 8 * 9^2 + 5 * 9 + 2 = 695 := by\n    norm_num\n    <;> rfl\n  \n  apply h",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_207 :\n  8 * 9^2 + 5 * 9 + 2 = 695 := by\n  norm_num",
    "orig_proof_length": 24,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_342",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_342 :\n  54 % 6 = 0 := by\n  have h : 54 % 6 = 0 := by\n    norm_num\n  exact h",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_342 :\n  54 % 6 = 0 := by\n norm_num",
    "orig_proof_length": 13,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_5",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_5\n  (n : ℕ)\n  (h₀ : 10 ≤ n)\n  (h₁ : ∃ x, x^2 = n)\n  (h₂ : ∃ t, t^3 = n) :\n  64 ≤ n := by\n  have h_main : 64 ≤ n := by\n    obtain ⟨t, ht⟩ := h₂\n    by_contra! h\n    -- We will show that if n < 64, then t < 4 and derive a contradiction.\n    have h₃ : t ≤ 3 := by\n      by_contra! h₄\n      -- If t ≥ 4, then t³ ≥ 64, which contradicts n < 64.\n      have h₅ : t ≥ 4 := by linarith\n      have h₆ : t^3 ≥ 4^3 := by\n        exact Nat.pow_le_pow_of_le_left (by linarith) 3\n      have h₇ : t^3 ≥ 64 := by\n        norm_num at h₆ ⊢\n        <;> linarith\n      have h₈ : n ≥ 64 := by\n        linarith\n      linarith\n    -- Now we know t ≤ 3. We will check each case.\n    interval_cases t <;> norm_num at ht ⊢ <;>\n      (try omega) <;>\n      (try {\n        -- For t = 3, we need to show that no x exists such that x² = 27.\n        obtain ⟨x, hx⟩ := h₁\n        have h₉ : x ≤ 5 := by\n          nlinarith\n        have h₁₀ : x ≥ 6 := by\n          nlinarith\n        omega\n      }) <;>\n      (try {\n        -- For t = 0, 1, 2, we directly get n < 10, which contradicts h₀.\n        omega\n      })\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_5\n  (n : ℕ)\n  (h₀ : 10 ≤ n)\n  (h₁ : ∃ x, x^2 = n)\n  (h₂ : ∃ t, t^3 = n) :\n  64 ≤ n := by\n  obtain ⟨t, rfl⟩ := h₂\n  by_contra! h\n  have h₃ : t ≤ 3 := by\n    by_contra! h₄\n    have : t ^ 3 ≥ 4 ^ 3 := by\n      exact Nat.pow_le_pow_of_le_left (by linarith) 3\n    linarith\n  interval_cases t <;> norm_num\n  <;> (try omega) <;> (try {\n    obtain ⟨x, hx⟩ := h₁\n    have : x ≤ 5 := by\n      nlinarith\n    have : x ≥ 6 := by\n      nlinarith\n    omega\n  })",
    "orig_proof_length": 143,
    "simp_proof_length": 81
  },
  {
    "problem_id": "mathd_algebra_452",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_452\n  (a : ℕ → ℝ)\n  (h₀ : ∀ n, a (n + 2) - a (n + 1) = a (n + 1) - a n)\n  (h₁ : a 1 = 2 / 3)\n  (h₂ : a 9 = 4 / 5) :\n  a 5 = 11 / 15 := by\n  have h_common_diff : ∀ n : ℕ, a (n + 1) - a n = a 1 - a 0 := by\n    intro n\n    induction n with\n    | zero =>\n      -- Base case: n = 0\n      -- We need to show that a(1) - a(0) = a(1) - a(0), which is trivially true.\n      simp\n    | succ n ih =>\n      -- Inductive step: assume the statement holds for n, prove for n+1.\n      have h₁ := h₀ n\n      have h₂ := h₀ (n + 1)\n      -- Using the recurrence relation, we can express a(n+2) - a(n+1) in terms of a(n+1) - a(n).\n      -- By the induction hypothesis, a(n+1) - a(n) = a(1) - a(0).\n      -- Therefore, a(n+2) - a(n+1) = a(1) - a(0).\n      have h₃ : a (n + 1 + 1) - a (n + 1) = a 1 - a 0 := by\n        have h₄ : a (n + 1 + 1) - a (n + 1) = a (n + 1) - a n := by\n          simpa [add_assoc] using h₀ n\n        rw [h₄]\n        -- Using the induction hypothesis, we can replace a(n+1) - a(n) with a(1) - a(0).\n        linarith\n      -- Simplify the expression to match the desired form.\n      simpa [add_assoc] using h₃\n  \n  have h_d_value : a 1 - a 0 = 1 / 60 := by\n    have h₃ := h_common_diff 8\n    have h₄ := h_common_diff 7\n    have h₅ := h_common_diff 6\n    have h₆ := h_common_diff 5\n    have h₇ := h_common_diff 4\n    have h₈ := h_common_diff 3\n    have h₉ := h_common_diff 2\n    have h₁₀ := h_common_diff 1\n    have h₁₁ := h_common_diff 0\n    norm_num [h₁] at h₃ h₄ h₅ h₆ h₇ h₈ h₉ h₁₀ h₁₁ ⊢\n    linarith\n  \n  have h_a5_value : a 5 = 11 / 15 := by\n    have h₃ := h_common_diff 4\n    have h₄ := h_common_diff 3\n    have h₅ := h_common_diff 2\n    have h₆ := h_common_diff 1\n    have h₇ := h_common_diff 0\n    norm_num [h₁, h_d_value] at h₃ h₄ h₅ h₆ h₇ ⊢\n    <;> linarith\n  \n  apply h_a5_value",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_452\n  (a : ℕ → ℝ)\n  (h₀ : ∀ n, a (n + 2) - a (n + 1) = a (n + 1) - a n)\n  (h₁ : a 1 = 2 / 3)\n  (h₂ : a 9 = 4 / 5) :\n  a 5 = 11 / 15 := by\n  linarith [h₀ 1, h₀ 2, h₀ 3, h₀ 4, h₀ 5, h₀ 6, h₀ 7, h₀ 8]",
    "orig_proof_length": 266,
    "simp_proof_length": 26
  },
  {
    "problem_id": "mathd_numbertheory_483",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_483\n  (a : ℕ → ℕ)\n  (h₀ : a 1 = 1)\n  (h₁ : a 2 = 1)\n  (h₂ : ∀ n, a (n + 2) = a (n + 1) + a n) :\n  (a 100) % 4 = 3 := by\n  have h_main : (a 100) % 4 = 3 := by\n    have h₃ : ∀ n, a n % 4 = (a (n % 6)) % 4 := by\n      intro n\n      induction n using Nat.strong_induction_on with\n      | h n ih =>\n        match n with\n        | 0 =>\n          simp_all [h₂, Nat.add_assoc]\n          <;> norm_num\n          <;> omega\n        | 1 =>\n          simp_all [h₂, Nat.add_assoc]\n          <;> norm_num\n          <;> omega\n        | 2 =>\n          simp_all [h₂, Nat.add_assoc]\n          <;> norm_num\n          <;> omega\n        | 3 =>\n          simp_all [h₂, Nat.add_assoc]\n          <;> norm_num\n          <;> omega\n        | 4 =>\n          simp_all [h₂, Nat.add_assoc]\n          <;> norm_num\n          <;> omega\n        | 5 =>\n          simp_all [h₂, Nat.add_assoc]\n          <;> norm_num\n          <;> omega\n        | n + 6 =>\n          have h₄ := ih (n + 5) (by omega)\n          have h₅ := ih (n + 4) (by omega)\n          have h₆ := ih (n + 3) (by omega)\n          have h₇ := ih (n + 2) (by omega)\n          have h₈ := ih (n + 1) (by omega)\n          have h₉ := ih n (by omega)\n          simp [h₂, Nat.add_assoc] at *\n          <;>\n            (try omega) <;>\n            (try\n              {\n                simp [h₂, Nat.add_assoc, Nat.add_comm, Nat.add_left_comm] at *\n                <;>\n                (try omega) <;>\n                (try ring_nf at *) <;>\n                (try omega)\n              }) <;>\n            (try\n              {\n                cases n <;> simp_all [h₂, Nat.add_assoc, Nat.add_comm, Nat.add_left_comm]\n                <;> norm_num at * <;> omega\n              }) <;>\n            (try\n              {\n                simp_all [h₂, Nat.add_assoc, Nat.add_comm, Nat.add_left_comm]\n                <;> ring_nf at *\n                <;> omega\n              })\n          <;>\n          (try omega)\n          <;>\n          (try\n            {\n              simp_all [Nat.add_assoc, Nat.add_comm, Nat.add_left_comm]\n              <;> ring_nf at *\n              <;> omega\n            })\n    have h₄ : a 100 % 4 = 3 := by\n      have h₅ := h₃ 100\n      have h₆ : a 100 % 4 = (a (100 % 6)) % 4 := by rw [h₅]\n      rw [h₆]\n      norm_num [h₀, h₁, h₂]\n      <;>\n      (try decide) <;>\n      (try\n        {\n          simp [h₂, Nat.add_assoc, Nat.add_comm, Nat.add_left_comm] at *\n          <;> norm_num at * <;> omega\n        })\n      <;>\n      (try\n        {\n          rfl\n        })\n      <;>\n      (try\n        {\n          simp_all [h₂, Nat.add_assoc, Nat.add_comm, Nat.add_left_comm]\n          <;> norm_num at * <;> omega\n        })\n    exact h₄\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_483\n  (a : ℕ → ℕ)\n  (h₀ : a 1 = 1)\n  (h₁ : a 2 = 1)\n  (h₂ : ∀ n, a (n + 2) = a (n + 1) + a n) :\n  (a 100) % 4 = 3 := by\n  simp_all",
    "orig_proof_length": 442,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_296",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_296 :\n  abs (((3491 - 60) * (3491 + 60) - 3491^2):ℤ) = 3600 := by\n  have h_main : abs (((3491 - 60) * (3491 + 60) - 3491^2):ℤ) = 3600 := by\n    norm_num [abs_of_nonpos, abs_of_nonneg, mul_assoc]\n    <;>\n    rfl\n  \n  apply h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_296 :\n  abs (((3491 - 60) * (3491 + 60) - 3491^2):ℤ) = 3600 := by\n  norm_num",
    "orig_proof_length": 42,
    "simp_proof_length": 1
  },
  {
    "problem_id": "amc12a_2003_p5",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2003_p5\n  (A M C : ℕ)\n  (h₀ : A ≤ 9 ∧ M ≤ 9 ∧ C ≤ 9)\n  (h₁ : Nat.ofDigits 10 [0,1,C,M,A] + Nat.ofDigits 10 [2,1,C,M,A] = 123422) :\n  A + M + C = 14 := by\n  have h₂ : 22 + 200 * C + 2000 * M + 20000 * A = 123422 := by\n    have h₂₁ : Nat.ofDigits 10 [0, 1, C, M, A] = 10 + 100 * C + 1000 * M + 10000 * A := by\n      simp [Nat.ofDigits, List.cons, List.nil, Nat.mul_assoc]\n      <;> ring_nf\n      <;> norm_num\n      <;> omega\n    have h₂₂ : Nat.ofDigits 10 [2, 1, C, M, A] = 12 + 100 * C + 1000 * M + 10000 * A := by\n      simp [Nat.ofDigits, List.cons, List.nil, Nat.mul_assoc]\n      <;> ring_nf\n      <;> norm_num\n      <;> omega\n    rw [h₂₁, h₂₂] at h₁\n    ring_nf at h₁ ⊢\n    <;> omega\n  \n  have h₃ : C + 10 * M + 100 * A = 617 := by\n    have h₃₁ : 200 * C + 2000 * M + 20000 * A = 123400 := by\n      omega\n    have h₃₂ : C + 10 * M + 100 * A = 617 := by\n      omega\n    exact h₃₂\n  \n  have h₄ : A = 6 := by\n    have h₄₁ : A ≤ 6 := by\n      by_contra h\n      have h₄₂ : A ≥ 7 := by\n        omega\n      have h₄₃ : 100 * A ≥ 700 := by\n        nlinarith\n      have h₄₄ : C + 10 * M + 100 * A ≥ 700 := by\n        have h₄₅ : C + 10 * M ≥ 0 := by\n          nlinarith\n        nlinarith\n      omega\n    have h₄₂ : A ≥ 6 := by\n      by_contra h\n      have h₄₃ : A ≤ 5 := by\n        omega\n      have h₄₄ : 100 * A ≤ 500 := by\n        nlinarith\n      have h₄₅ : C + 10 * M + 100 * A ≤ 599 := by\n        have h₄₆ : C ≤ 9 := by\n          linarith\n        have h₄₇ : M ≤ 9 := by\n          linarith\n        have h₄₈ : C + 10 * M ≤ 99 := by\n          nlinarith\n        nlinarith\n      omega\n    omega\n  \n  have h₅ : C + 10 * M = 17 := by\n    have h₅₁ : C + 10 * M + 100 * A = 617 := h₃\n    rw [h₄] at h₅₁\n    ring_nf at h₅₁ ⊢\n    <;> omega\n  \n  have h₆ : M = 1 := by\n    have h₆₁ : M ≤ 1 := by\n      by_contra h\n      have h₆₂ : M ≥ 2 := by omega\n      have h₆₃ : C + 10 * M ≥ 20 := by\n        have h₆₄ : C ≥ 0 := by omega\n        nlinarith\n      omega\n    have h₆₂ : M ≥ 1 := by\n      by_contra h\n      have h₆₃ : M = 0 := by omega\n      rw [h₆₃] at h₅\n      have h₆₄ : C = 17 := by omega\n      have h₆₅ : C ≤ 9 := by linarith\n      omega\n    omega\n  \n  have h₇ : C = 7 := by\n    have h₇₁ : C + 10 * M = 17 := h₅\n    rw [h₆] at h₇₁\n    omega\n  \n  have h₈ : A + M + C = 14 := by\n    rw [h₄, h₆, h₇]\n    <;> norm_num\n  \n  exact h₈",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2003_p5\n  (A M C : ℕ)\n  (h₀ : A ≤ 9 ∧ M ≤ 9 ∧ C ≤ 9)\n  (h₁ : Nat.ofDigits 10 [0,1,C,M,A] + Nat.ofDigits 10 [2,1,C,M,A] = 123422) :\n  A + M + C = 14 := by\n  simp_all [Nat.ofDigits]\n  omega",
    "orig_proof_length": 526,
    "simp_proof_length": 5
  },
  {
    "problem_id": "algebra_2varlineareq_fp3zeq11_3tfm1m5zeqn68_feqn10_zeq7",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_2varlineareq_fp3zeq11_3tfm1m5zeqn68_feqn10_zeq7\n  (f z: ℂ)\n  (h₀ : f + 3*z = 11)\n  (h₁ : 3*(f - 1) - 5*z = -68) :\n  f = -10 ∧ z = 7 := by\n  have h₂ : f.re = -10 := by\n    have h₂₁ := h₀\n    have h₂₂ := h₁\n    simp [Complex.ext_iff, Complex.add_re, Complex.add_im, Complex.mul_re, Complex.mul_im,\n      Complex.sub_re, Complex.sub_im] at h₂₁ h₂₂\n    -- Simplify the equations to get real and imaginary parts\n    ring_nf at h₂₁ h₂₂ ⊢\n    -- Solve the system of equations to find f.re = -10\n    nlinarith [sq_nonneg (f.re + 10), sq_nonneg (f.im), sq_nonneg (z.re - 7), sq_nonneg (z.im)]\n  \n  have h₃ : f.im = 0 := by\n    have h₃₁ := h₀\n    have h₃₂ := h₁\n    simp [Complex.ext_iff, Complex.add_re, Complex.add_im, Complex.mul_re, Complex.mul_im,\n      Complex.sub_re, Complex.sub_im] at h₃₁ h₃₂\n    -- Simplify the equations to get real and imaginary parts\n    ring_nf at h₃₁ h₃₂ ⊢\n    -- Solve the system of equations to find f.im = 0\n    nlinarith [sq_nonneg (f.re + 10), sq_nonneg (f.im), sq_nonneg (z.re - 7), sq_nonneg (z.im)]\n  \n  have h₄ : z.re = 7 := by\n    have h₄₁ := h₀\n    have h₄₂ := h₁\n    simp [Complex.ext_iff, Complex.add_re, Complex.add_im, Complex.mul_re, Complex.mul_im,\n      Complex.sub_re, Complex.sub_im] at h₄₁ h₄₂\n    -- Simplify the equations to get real and imaginary parts\n    ring_nf at h₄₁ h₄₂ ⊢\n    -- Solve the system of equations to find z.re = 7\n    nlinarith [sq_nonneg (f.re + 10), sq_nonneg (f.im), sq_nonneg (z.re - 7), sq_nonneg (z.im)]\n  \n  have h₅ : z.im = 0 := by\n    have h₅₁ := h₀\n    have h₅₂ := h₁\n    simp [Complex.ext_iff, Complex.add_re, Complex.add_im, Complex.mul_re, Complex.mul_im,\n      Complex.sub_re, Complex.sub_im] at h₅₁ h₅₂\n    -- Simplify the equations to get real and imaginary parts\n    ring_nf at h₅₁ h₅₂ ⊢\n    -- Solve the system of equations to find z.im = 0\n    nlinarith [sq_nonneg (f.re + 10), sq_nonneg (f.im), sq_nonneg (z.re - 7), sq_nonneg (z.im)]\n  \n  have h₆ : f = -10 := by\n    have h₆₁ : f.re = -10 := h₂\n    have h₆₂ : f.im = 0 := h₃\n    have h₆₃ : f = -10 := by\n      apply Complex.ext <;> simp_all [Complex.ext_iff, Complex.ofReal_neg, Complex.ofReal_one]\n      <;> norm_num <;> linarith\n    exact h₆₃\n  \n  have h₇ : z = 7 := by\n    have h₇₁ : z.re = 7 := h₄\n    have h₇₂ : z.im = 0 := h₅\n    have h₇₃ : z = 7 := by\n      apply Complex.ext <;> simp_all [Complex.ext_iff, Complex.ofReal_neg, Complex.ofReal_one]\n      <;> norm_num <;> linarith\n    exact h₇₃\n  \n  have h₈ : f = -10 ∧ z = 7 := by\n    exact ⟨h₆, h₇⟩\n  \n  exact h₈",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_2varlineareq_fp3zeq11_3tfm1m5zeqn68_feqn10_zeq7\n  (f z: ℂ)\n  (h₀ : f + 3*z = 11)\n  (h₁ : 3*(f - 1) - 5*z = -68) :\n  f = -10 ∧ z = 7 := by\n  constructor\n  all_goals\n    simp_all [Complex.ext_iff]\n    constructor <;> nlinarith",
    "orig_proof_length": 402,
    "simp_proof_length": 9
  },
  {
    "problem_id": "mathd_numbertheory_247",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_247\n  (n : ℕ)\n  (h₀ : (3 * n) % 11 = 2) :\n  n % 11 = 8 := by\n  have h₁ : n % 11 = 8 := by\n    have h₂ : (3 * n) % 11 = 2 := h₀\n    have h₃ : n % 11 = 0 ∨ n % 11 = 1 ∨ n % 11 = 2 ∨ n % 11 = 3 ∨ n % 11 = 4 ∨ n % 11 = 5 ∨ n % 11 = 6 ∨ n % 11 = 7 ∨ n % 11 = 8 ∨ n % 11 = 9 ∨ n % 11 = 10 := by\n      omega\n    rcases h₃ with (h₃ | h₃ | h₃ | h₃ | h₃ | h₃ | h₃ | h₃ | h₃ | h₃ | h₃) <;>\n      (try omega) <;>\n      (try {\n        simp [h₃, Nat.mul_mod, Nat.add_mod, Nat.mod_mod] at h₂ ⊢\n        <;> omega\n      })\n  exact h₁",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_247\n  (n : ℕ)\n  (h₀ : (3 * n) % 11 = 2) :\n  n % 11 = 8 := by\n  omega",
    "orig_proof_length": 149,
    "simp_proof_length": 1
  },
  {
    "problem_id": "amc12b_2020_p21",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2020_p21\n  (S : Finset ℕ)\n  (h₀ : ∀ (n : ℕ), n ∈ S ↔ 0 < n ∧ (↑n + (1000 : ℝ)) / 70 = Int.floor (Real.sqrt n)) :\n  S.card = 6 := by\n  have h₁ : S = {400, 470, 2290, 2360, 2430, 2500} := by\n    apply Finset.ext\n    intro n\n    simp only [Finset.mem_insert, Finset.mem_singleton, h₀]\n    constructor\n    · -- Prove the forward direction: if n ∈ S, then n is one of the six numbers.\n      intro h\n      have h₂ : 0 < n := h.1\n      have h₃ : ((n : ℝ) + 1000) / 70 = Int.floor (Real.sqrt n) := by\n        exact_mod_cast h.2\n      -- We need to show that n is one of the six numbers.\n      have h₄ : n = 400 ∨ n = 470 ∨ n = 2290 ∨ n = 2360 ∨ n = 2430 ∨ n = 2500 := by\n        -- Use the fact that (n + 1000)/70 = floor(sqrt(n)) to find possible values of n.\n        have h₅ : (n : ℝ) + 1000 = 70 * (Int.floor (Real.sqrt n) : ℝ) := by\n          have h₅₁ : ((n : ℝ) + 1000) / 70 = (Int.floor (Real.sqrt n) : ℝ) := by\n            exact_mod_cast h₃\n          linarith\n        have h₆ : (n : ℤ) + 1000 = 70 * (Int.floor (Real.sqrt n)) := by\n          norm_cast at h₅ ⊢\n          <;> field_simp at h₅ ⊢ <;> ring_nf at h₅ ⊢ <;> norm_cast at h₅ ⊢ <;>\n            (try norm_num at h₅ ⊢) <;>\n            (try linarith) <;>\n            (try\n              {\n                simp_all [Int.cast_inj]\n                <;> norm_num at *\n                <;> linarith\n              })\n          <;>\n          (try\n            {\n              norm_num at h₅ ⊢\n              <;>\n              (try linarith)\n              <;>\n              (try\n                {\n                  simp_all [Int.cast_inj]\n                  <;> norm_num at *\n                  <;> linarith\n                })\n            })\n          <;>\n          (try\n            {\n              ring_nf at h₅ ⊢\n              <;>\n              norm_cast at h₅ ⊢\n              <;>\n              simp_all [Int.cast_inj]\n              <;>\n              norm_num at *\n              <;>\n              linarith\n            })\n          <;>\n          (try\n            {\n              field_simp at h₅ ⊢\n              <;>\n              norm_cast at h₅ ⊢\n              <;>\n              simp_all [Int.cast_inj]\n              <;>\n              norm_num at *\n              <;>\n              linarith\n            })\n          <;>\n          (try\n            {\n              norm_cast at h₅ ⊢\n              <;>\n              simp_all [Int.cast_inj]\n              <;>\n              norm_num at *\n              <;>\n              linarith\n            })\n        -- Now we have n + 1000 = 70 * floor(sqrt(n)).\n        -- Let k = floor(sqrt(n)). Then n = 70k - 1000.\n        -- We need to find all integers k such that k^2 ≤ 70k - 1000 < (k + 1)^2 and 70k - 1000 > 0.\n        have h₇ : ∃ (k : ℤ), (n : ℤ) = 70 * k - 1000 := by\n          use (Int.floor (Real.sqrt n))\n          linarith\n        obtain ⟨k, h₇⟩ := h₇\n        have h₈ : (n : ℝ) = 70 * (k : ℝ) - 1000 := by\n          norm_cast at h₇ ⊢\n          <;>\n          (try ring_nf at h₇ ⊢) <;>\n          (try norm_num at h₇ ⊢) <;>\n          (try linarith) <;>\n          (try simp_all [Int.cast_inj]) <;>\n          (try norm_cast at h₇ ⊢) <;>\n          (try linarith)\n          <;>\n          (try ring_nf at h₇ ⊢) <;>\n          (try norm_num at h₇ ⊢) <;>\n          (try linarith)\n        have h₉ : (k : ℝ) ≤ Real.sqrt n := by\n          have h₉₁ : (k : ℝ) = Int.floor (Real.sqrt n) := by\n            have h₉₂ : (k : ℤ) = Int.floor (Real.sqrt n) := by\n              linarith\n            norm_cast at h₉₂ ⊢\n            <;> simp_all\n          rw [h₉₁]\n          exact Int.floor_le (Real.sqrt n)\n        have h₁₀ : Real.sqrt n < (k : ℝ) + 1 := by\n          have h₁₀₁ : (k : ℝ) = Int.floor (Real.sqrt n) := by\n            have h₁₀₂ : (k : ℤ) = Int.floor (Real.sqrt n) := by\n              linarith\n            norm_cast at h₁₀₂ ⊢\n            <;> simp_all\n          rw [h₁₀₁]\n          exact Int.lt_floor_add_one (Real.sqrt n)\n        have h₁₁ : (k : ℝ) ^ 2 ≤ (n : ℝ) := by\n          have h₁₁₁ : (k : ℝ) ≤ Real.sqrt n := h₉\n          have h₁₁₂ : 0 ≤ Real.sqrt n := Real.sqrt_nonneg n\n          have h₁₁₃ : (k : ℝ) ^ 2 ≤ (Real.sqrt n) ^ 2 := by\n            nlinarith [Real.sqrt_nonneg n, Real.sq_sqrt (by positivity : 0 ≤ (n : ℝ))]\n          have h₁₁₄ : (Real.sqrt n) ^ 2 = (n : ℝ) := by\n            rw [Real.sq_sqrt (by positivity)]\n          nlinarith\n        have h₁₂ : (n : ℝ) < ((k : ℝ) + 1) ^ 2 := by\n          have h₁₂₁ : Real.sqrt n < (k : ℝ) + 1 := h₁₀\n          have h₁₂₂ : 0 ≤ Real.sqrt n := Real.sqrt_nonneg n\n          have h₁₂₃ : (Real.sqrt n) ^ 2 < ((k : ℝ) + 1) ^ 2 := by\n            nlinarith [Real.sqrt_nonneg n, Real.sq_sqrt (by positivity : 0 ≤ (n : ℝ))]\n          have h₁₂₄ : (Real.sqrt n) ^ 2 = (n : ℝ) := by\n            rw [Real.sq_sqrt (by positivity)]\n          nlinarith\n        have h₁₃ : (k : ℤ) ≥ 15 := by\n          by_contra h₁₃₁\n          have h₁₃₂ : (k : ℤ) ≤ 14 := by linarith\n          have h₁₃₃ : (n : ℤ) ≤ 70 * 14 - 1000 := by\n            have h₁₃₄ : (n : ℤ) = 70 * k - 1000 := by linarith\n            have h₁₃₅ : (k : ℤ) ≤ 14 := by linarith\n            have h₁₃₆ : (n : ℤ) ≤ 70 * 14 - 1000 := by\n              linarith\n            exact h₁₃₆\n          have h₁₃₇ : (n : ℕ) ≤ 70 * 14 - 1000 := by\n            norm_cast at h₁₃₃ ⊢\n            <;>\n            (try omega)\n          have h₁₃₈ : (n : ℕ) > 0 := by exact_mod_cast h₂\n          norm_num at h₁₃₇\n          <;>\n          (try omega)\n        -- Now we have k ≥ 15, and we can find all possible values of k.\n        have h₁₄ : k = 20 ∨ k = 21 ∨ k = 47 ∨ k = 48 ∨ k = 49 ∨ k = 50 := by\n          -- Solve the inequalities to find possible values of k.\n          have h₁₄₁ : (k : ℤ) ≥ 15 := h₁₃\n          have h₁₄₂ : (k : ℝ) ^ 2 ≤ (n : ℝ) := h₁₁\n          have h₁₄₃ : (n : ℝ) < ((k : ℝ) + 1) ^ 2 := h₁₂\n          have h₁₄₄ : (n : ℝ) = 70 * (k : ℝ) - 1000 := h₈\n          have h₁₄₅ : (k : ℝ) ^ 2 ≤ 70 * (k : ℝ) - 1000 := by\n            linarith\n          have h₁₄₆ : 70 * (k : ℝ) - 1000 < ((k : ℝ) + 1) ^ 2 := by\n            linarith\n          have h₁₄₇ : (k : ℤ) ≤ 50 := by\n            by_contra h₁₄₇₁\n            have h₁₄₇₂ : (k : ℤ) ≥ 51 := by linarith\n            have h₁₄₇₃ : (k : ℝ) ≥ 51 := by\n              norm_cast\n            have h₁₄₇₄ : (k : ℝ) ^ 2 ≥ 51 ^ 2 := by\n              nlinarith\n            have h₁₄₇₅ : 70 * (k : ℝ) - 1000 < ((k : ℝ) + 1) ^ 2 := h₁₄₆\n            nlinarith\n          -- Now we know 15 ≤ k ≤ 50.\n          -- We can check each possible value of k.\n          have h₁₄₈ : k ≤ 50 := by\n            exact_mod_cast h₁₄₇\n          have h₁₄₉ : k ≥ 15 := by\n            exact_mod_cast h₁₃\n          -- Check each possible value of k from 15 to 50.\n          interval_cases k <;> norm_num at h₁₄₅ h₁₄₆ ⊢ <;>\n            (try norm_num at h₁₄₄ ⊢) <;>\n            (try\n              {\n                nlinarith [Real.sqrt_nonneg 400, Real.sqrt_nonneg 470, Real.sqrt_nonneg 2290,\n                  Real.sqrt_nonneg 2360, Real.sqrt_nonneg 2430, Real.sqrt_nonneg 2500,\n                  Real.sq_sqrt (show 0 ≤ (400 : ℝ) by norm_num),\n                  Real.sq_sqrt (show 0 ≤ (470 : ℝ) by norm_num),\n                  Real.sq_sqrt (show 0 ≤ (2290 : ℝ) by norm_num),\n                  Real.sq_sqrt (show 0 ≤ (2360 : ℝ) by norm_num),\n                  Real.sq_sqrt (show 0 ≤ (2430 : ℝ) by norm_num),\n                  Real.sq_sqrt (show 0 ≤ (2500 : ℝ) by norm_num)]\n              }) <;>\n            (try\n              {\n                norm_num [h₇] at h₂ ⊢ <;>\n                  (try omega) <;>\n                  (try\n                    {\n                      nlinarith [Real.sqrt_nonneg 400, Real.sqrt_nonneg 470, Real.sqrt_nonneg 2290,\n                        Real.sqrt_nonneg 2360, Real.sqrt_nonneg 2430, Real.sqrt_nonneg 2500,\n                        Real.sq_sqrt (show 0 ≤ (400 : ℝ) by norm_num),\n                        Real.sq_sqrt (show 0 ≤ (470 : ℝ) by norm_num),\n                        Real.sq_sqrt (show 0 ≤ (2290 : ℝ) by norm_num),\n                        Real.sq_sqrt (show 0 ≤ (2360 : ℝ) by norm_num),\n                        Real.sq_sqrt (show 0 ≤ (2430 : ℝ) by norm_num),\n                        Real.sq_sqrt (show 0 ≤ (2500 : ℝ) by norm_num)]\n                    })\n              })\n        -- Now we know k is one of the six values.\n        -- We can find the corresponding n.\n        have h₁₅ : n = 400 ∨ n = 470 ∨ n = 2290 ∨ n = 2360 ∨ n = 2430 ∨ n = 2500 := by\n          rcases h₁₄ with (rfl | rfl | rfl | rfl | rfl | rfl)\n          · -- Case k = 20\n            have h₁₅₁ : (n : ℤ) = 70 * (20 : ℤ) - 1000 := by\n              norm_cast at h₇ ⊢\n              <;>\n              (try omega) <;>\n              (try linarith)\n            have h₁₅₂ : n = 400 := by\n              norm_cast at h₁₅₁ ⊢\n              <;>\n              (try omega) <;>\n              (try linarith)\n            exact Or.inl h₁₅₂\n          · -- Case k = 21\n            have h₁₅₁ : (n : ℤ) = 70 * (21 : ℤ) - 1000 := by\n              norm_cast at h₇ ⊢\n              <;>\n              (try omega) <;>\n              (try linarith)\n            have h₁₅₂ : n = 470 := by\n              norm_cast at h₁₅₁ ⊢\n              <;>\n              (try omega) <;>\n              (try linarith)\n            exact Or.inr (Or.inl h₁₅₂)\n          · -- Case k = 47\n            have h₁₅₁ : (n : ℤ) = 70 * (47 : ℤ) - 1000 := by\n              norm_cast at h₇ ⊢\n              <;>\n              (try omega) <;>\n              (try linarith)\n            have h₁₅₂ : n = 2290 := by\n              norm_cast at h₁₅₁ ⊢\n              <;>\n              (try omega) <;>\n              (try linarith)\n            exact Or.inr (Or.inr (Or.inl h₁₅₂))\n          · -- Case k = 48\n            have h₁₅₁ : (n : ℤ) = 70 * (48 : ℤ) - 1000 := by\n              norm_cast at h₇ ⊢\n              <;>\n              (try omega) <;>\n              (try linarith)\n            have h₁₅₂ : n = 2360 := by\n              norm_cast at h₁₅₁ ⊢\n              <;>\n              (try omega) <;>\n              (try linarith)\n            exact Or.inr (Or.inr (Or.inr (Or.inl h₁₅₂)))\n          · -- Case k = 49\n            have h₁₅₁ : (n : ℤ) = 70 * (49 : ℤ) - 1000 := by\n              norm_cast at h₇ ⊢\n              <;>\n              (try omega) <;>\n              (try linarith)\n            have h₁₅₂ : n = 2430 := by\n              norm_cast at h₁₅₁ ⊢\n              <;>\n              (try omega) <;>\n              (try linarith)\n            exact Or.inr (Or.inr (Or.inr (Or.inr (Or.inl h₁₅₂))))\n          · -- Case k = 50\n            have h₁₅₁ : (n : ℤ) = 70 * (50 : ℤ) - 1000 := by\n              norm_cast at h₇ ⊢\n              <;>\n              (try omega) <;>\n              (try linarith)\n            have h₁₅₂ : n = 2500 := by\n              norm_cast at h₁₅₁ ⊢\n              <;>\n              (try omega) <;>\n              (try linarith)\n            exact Or.inr (Or.inr (Or.inr (Or.inr (Or.inr h₁₅₂))))\n        exact h₁₅\n      -- Now we know n is one of the six numbers.\n      aesop\n    · -- Prove the reverse direction: if n is one of the six numbers, then n ∈ S.\n      intro h\n      have h₂ : n = 400 ∨ n = 470 ∨ n = 2290 ∨ n = 2360 ∨ n = 2430 ∨ n = 2500 := by aesop\n      rcases h₂ with (rfl | rfl | rfl | rfl | rfl | rfl)\n      · -- Case n = 400\n        constructor\n        · -- Prove 0 < 400\n          norm_num\n        · -- Prove (400 + 1000)/70 = floor(sqrt(400))\n          have h₃ : Int.floor (Real.sqrt (400 : ℕ)) = 20 := by\n            norm_num [Int.floor_eq_iff, Real.le_sqrt, Real.sqrt_lt]\n            <;>\n            (try norm_num) <;>\n            (try\n              {\n                constructor <;>\n                norm_num <;>\n                nlinarith [Real.sqrt_nonneg 400, Real.sq_sqrt (show 0 ≤ (400 : ℝ) by norm_num)]\n              })\n          have h₄ : ((400 : ℕ) : ℝ) + 1000 = 1400 := by norm_num\n          have h₅ : (1400 : ℝ) / 70 = (20 : ℝ) := by norm_num\n          have h₆ : (Int.floor (Real.sqrt (400 : ℕ)) : ℝ) = (20 : ℝ) := by\n            rw [h₃]\n            <;> norm_num\n          norm_num [h₃] at *\n          <;>\n          (try simp_all) <;>\n          (try norm_num) <;>\n          (try linarith)\n          <;>\n          (try\n            {\n              simp_all [Int.cast_inj]\n              <;> norm_num at *\n              <;> linarith\n            })\n      · -- Case n = 470\n        constructor\n        · -- Prove 0 < 470\n          norm_num\n        · -- Prove (470 + 1000)/70 = floor(sqrt(470))\n          have h₃ : Int.floor (Real.sqrt (470 : ℕ)) = 21 := by\n            norm_num [Int.floor_eq_iff, Real.le_sqrt, Real.sqrt_lt]\n            <;>\n            (try norm_num) <;>\n            (try\n              {\n                constructor <;>\n                norm_num <;>\n                nlinarith [Real.sqrt_nonneg 470, Real.sq_sqrt (show 0 ≤ (470 : ℝ) by norm_num)]\n              })\n          have h₄ : ((470 : ℕ) : ℝ) + 1000 = 1470 := by norm_num\n          have h₅ : (1470 : ℝ) / 70 = (21 : ℝ) := by norm_num\n          have h₆ : (Int.floor (Real.sqrt (470 : ℕ)) : ℝ) = (21 : ℝ) := by\n            rw [h₃]\n            <;> norm_num\n          norm_num [h₃] at *\n          <;>\n          (try simp_all) <;>\n          (try norm_num) <;>\n          (try linarith)\n          <;>\n          (try\n            {\n              simp_all [Int.cast_inj]\n              <;> norm_num at *\n              <;> linarith\n            })\n      · -- Case n = 2290\n        constructor\n        · -- Prove 0 < 2290\n          norm_num\n        · -- Prove (2290 + 1000)/70 = floor(sqrt(2290))\n          have h₃ : Int.floor (Real.sqrt (2290 : ℕ)) = 47 := by\n            norm_num [Int.floor_eq_iff, Real.le_sqrt, Real.sqrt_lt]\n            <;>\n            (try norm_num) <;>\n            (try\n              {\n                constructor <;>\n                norm_num <;>\n                nlinarith [Real.sqrt_nonneg 2290, Real.sq_sqrt (show 0 ≤ (2290 : ℝ) by norm_num)]\n              })\n          have h₄ : ((2290 : ℕ) : ℝ) + 1000 = 3290 := by norm_num\n          have h₅ : (3290 : ℝ) / 70 = (47 : ℝ) := by norm_num\n          have h₆ : (Int.floor (Real.sqrt (2290 : ℕ)) : ℝ) = (47 : ℝ) := by\n            rw [h₃]\n            <;> norm_num\n          norm_num [h₃] at *\n          <;>\n          (try simp_all) <;>\n          (try norm_num) <;>\n          (try linarith)\n          <;>\n          (try\n            {\n              simp_all [Int.cast_inj]\n              <;> norm_num at *\n              <;> linarith\n            })\n      · -- Case n = 2360\n        constructor\n        · -- Prove 0 < 2360\n          norm_num\n        · -- Prove (2360 + 1000)/70 = floor(sqrt(2360))\n          have h₃ : Int.floor (Real.sqrt (2360 : ℕ)) = 48 := by\n            norm_num [Int.floor_eq_iff, Real.le_sqrt, Real.sqrt_lt]\n            <;>\n            (try norm_num) <;>\n            (try\n              {\n                constructor <;>\n                norm_num <;>\n                nlinarith [Real.sqrt_nonneg 2360, Real.sq_sqrt (show 0 ≤ (2360 : ℝ) by norm_num)]\n              })\n          have h₄ : ((2360 : ℕ) : ℝ) + 1000 = 3360 := by norm_num\n          have h₅ : (3360 : ℝ) / 70 = (48 : ℝ) := by norm_num\n          have h₆ : (Int.floor (Real.sqrt (2360 : ℕ)) : ℝ) = (48 : ℝ) := by\n            rw [h₃]\n            <;> norm_num\n          norm_num [h₃] at *\n          <;>\n          (try simp_all) <;>\n          (try norm_num) <;>\n          (try linarith)\n          <;>\n          (try\n            {\n              simp_all [Int.cast_inj]\n              <;> norm_num at *\n              <;> linarith\n            })\n      · -- Case n = 2430\n        constructor\n        · -- Prove 0 < 2430\n          norm_num\n        · -- Prove (2430 + 1000)/70 = floor(sqrt(2430))\n          have h₃ : Int.floor (Real.sqrt (2430 : ℕ)) = 49 := by\n            norm_num [Int.floor_eq_iff, Real.le_sqrt, Real.sqrt_lt]\n            <;>\n            (try norm_num) <;>\n            (try\n              {\n                constructor <;>\n                norm_num <;>\n                nlinarith [Real.sqrt_nonneg 2430, Real.sq_sqrt (show 0 ≤ (2430 : ℝ) by norm_num)]\n              })\n          have h₄ : ((2430 : ℕ) : ℝ) + 1000 = 3430 := by norm_num\n          have h₅ : (3430 : ℝ) / 70 = (49 : ℝ) := by norm_num\n          have h₆ : (Int.floor (Real.sqrt (2430 : ℕ)) : ℝ) = (49 : ℝ) := by\n            rw [h₃]\n            <;> norm_num\n          norm_num [h₃] at *\n          <;>\n          (try simp_all) <;>\n          (try norm_num) <;>\n          (try linarith)\n          <;>\n          (try\n            {\n              simp_all [Int.cast_inj]\n              <;> norm_num at *\n              <;> linarith\n            })\n      · -- Case n = 2500\n        constructor\n        · -- Prove 0 < 2500\n          norm_num\n        · -- Prove (2500 + 1000)/70 = floor(sqrt(2500))\n          have h₃ : Int.floor (Real.sqrt (2500 : ℕ)) = 50 := by\n            norm_num [Int.floor_eq_iff, Real.le_sqrt, Real.sqrt_lt]\n            <;>\n            (try norm_num) <;>\n            (try\n              {\n                constructor <;>\n                norm_num <;>\n                nlinarith [Real.sqrt_nonneg 2500, Real.sq_sqrt (show 0 ≤ (2500 : ℝ) by norm_num)]\n              })\n          have h₄ : ((2500 : ℕ) : ℝ) + 1000 = 3500 := by norm_num\n          have h₅ : (3500 : ℝ) / 70 = (50 : ℝ) := by norm_num\n          have h₆ : (Int.floor (Real.sqrt (2500 : ℕ)) : ℝ) = (50 : ℝ) := by\n            rw [h₃]\n            <;> norm_num\n          norm_num [h₃] at *\n          <;>\n          (try simp_all) <;>\n          (try norm_num) <;>\n          (try linarith)\n          <;>\n          (try\n            {\n              simp_all [Int.cast_inj]\n              <;> norm_num at *\n              <;> linarith\n            })\n  have h₂ : S.card = 6 := by\n    rw [h₁]\n    <;> norm_num\n    <;> rfl\n  exact h₂",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2020_p21\n  (S : Finset ℕ)\n  (h₀ : ∀ (n : ℕ), n ∈ S ↔ 0 < n ∧ (↑n + (1000 : ℝ)) / 70 = Int.floor (Real.sqrt n)) :\n  S.card = 6 := by\n  have h₁ : S = {400, 470, 2290, 2360, 2430, 2500} := by\n    ext n\n    simp only [Finset.mem_insert, Finset.mem_singleton, h₀]\n    constructor\n    ·\n      intro h\n      have h₂ : 0 < n := h.1\n      have h₃ : ((n : ℝ) + 1000) / 70 = Int.floor (Real.sqrt n) := by\n        exact_mod_cast h.2\n      have h₄ : n = 400 ∨ n = 470 ∨ n = 2290 ∨ n = 2360 ∨ n = 2430 ∨ n = 2500 := by\n        have h₅ : (n : ℝ) + 1000 = 70 * (Int.floor (Real.sqrt n) : ℝ) := by\n          have h₅₁ : ((n : ℝ) + 1000) / 70 = (Int.floor (Real.sqrt n) : ℝ) := by\n            exact_mod_cast h₃\n          linarith\n        have h₆ : (n : ℤ) + 1000 = 70 * (Int.floor (Real.sqrt n)) := by\n          norm_cast at h₅ ⊢\n        have h₇ : ∃ (k : ℤ), (n : ℤ) = 70 * k - 1000 := by\n          use (Int.floor (Real.sqrt n))\n          linarith\n        obtain ⟨k, h₇⟩ := h₇\n        have h₈ : (n : ℝ) = 70 * (k : ℝ) - 1000 := by\n          norm_cast at h₇ ⊢\n        have h₉ : (k : ℝ) ≤ Real.sqrt n := by\n          have h₉₁ : (k : ℝ) = Int.floor (Real.sqrt n) := by\n            have h₉₂ : (k : ℤ) = Int.floor (Real.sqrt n) := by\n              linarith\n            norm_cast at h₉₂ ⊢\n          rw [h₉₁]\n          exact Int.floor_le (Real.sqrt n)\n        have h₁₀ : Real.sqrt n < (k : ℝ) + 1 := by\n          have h₁₀₁ : (k : ℝ) = Int.floor (Real.sqrt n) := by\n            have h₁₀₂ : (k : ℤ) = Int.floor (Real.sqrt n) := by\n              linarith\n            norm_cast at h₁₀₂ ⊢\n          rw [h₁₀₁]\n          exact Int.lt_floor_add_one (Real.sqrt n)\n        have h₁₁ : (k : ℝ) ^ 2 ≤ (n : ℝ) := by\n          have h₁₁₁ : (k : ℝ) ≤ Real.sqrt n := h₉\n          have h₁₁₂ : 0 ≤ Real.sqrt n := Real.sqrt_nonneg n\n          have h₁₁₃ : (k : ℝ) ^ 2 ≤ (Real.sqrt n) ^ 2 := by\n            nlinarith [Real.sqrt_nonneg n, Real.sq_sqrt (by positivity : 0 ≤ (n : ℝ))]\n          have h₁₁₄ : (Real.sqrt n) ^ 2 = (n : ℝ) := by\n            rw [Real.sq_sqrt (by positivity)]\n          nlinarith\n        have h₁₂ : (n : ℝ) < ((k : ℝ) + 1) ^ 2 := by\n          have h₁₂₁ : Real.sqrt n < (k : ℝ) + 1 := h₁₀\n          have h₁₂₂ : 0 ≤ Real.sqrt n := Real.sqrt_nonneg n\n          have h₁₂₃ : (Real.sqrt n) ^ 2 < ((k : ℝ) + 1) ^ 2 := by\n            nlinarith [Real.sqrt_nonneg n, Real.sq_sqrt (by positivity : 0 ≤ (n : ℝ))]\n          have h₁₂₄ : (Real.sqrt n) ^ 2 = (n : ℝ) := by\n            rw [Real.sq_sqrt (by positivity)]\n          nlinarith\n        have h₁₃ : (k : ℤ) ≥ 15 := by\n          by_contra h₁₃₁\n          have h₁₃₂ : (k : ℤ) ≤ 14 := by linarith\n          have h₁₃₃ : (n : ℤ) ≤ 70 * 14 - 1000 := by\n            have h₁₃₄ : (n : ℤ) = 70 * k - 1000 := by linarith\n            linarith\n          have h₁₃₄ : (n : ℕ) ≤ 70 * 14 - 1000 := by\n            norm_cast at h₁₃₃ ⊢\n            <;> (try omega)\n          have h₁₃₅ : (n : ℕ) > 0 := by exact_mod_cast h₂\n          norm_num at h₁₃₄\n          <;> (try omega)\n        have h₁₄ : k = 20 ∨ k = 21 ∨ k = 47 ∨ k = 48 ∨ k = 49 ∨ k = 50 := by\n          have h₁₄₁ : (k : ℤ) ≥ 15 := h₁₃\n          have h₁₄₂ : (k : ℝ) ^ 2 ≤ (n : ℝ) := h₁₁\n          have h₁₄₃ : (n : ℝ) < ((k : ℝ) + 1) ^ 2 := h₁₂\n          have h₁₄₄ : (n : ℝ) = 70 * (k : ℝ) - 1000 := h₈\n          have h₁₄₅ : (k : ℝ) ^ 2 ≤ 70 * (k : ℝ) - 1000 := by\n            linarith\n          have h₁₄₆ : 70 * (k : ℝ) - 1000 < ((k : ℝ) + 1) ^ 2 := by\n            linarith\n          have h₁₄₇ : (k : ℤ) ≤ 50 := by\n            by_contra h₁₄₇₁\n            have h₁₄₇₂ : (k : ℤ) ≥ 51 := by linarith\n            have h₁₄₇₃ : (k : ℝ) ≥ 51 := by\n              norm_cast\n            have h₁₄₇₄ : (k : ℝ) ^ 2 ≥ 51 ^ 2 := by\n              nlinarith\n            have h₁₄₇₅ : 70 * (k : ℝ) - 1000 < ((k : ℝ) + 1) ^ 2 := h₁₄₆\n            nlinarith\n          have h₁₄₈ : k ≤ 50 := by\n            exact_mod_cast h₁₄₇\n          have h₁₄₉ : k ≥ 15 := by\n            exact_mod_cast h₁₃\n          interval_cases k <;> norm_num at h₁₄₅ h₁₄₆ ⊢ \n        have h₁₅ : n = 400 ∨ n = 470 ∨ n = 2290 ∨ n = 2360 ∨ n = 2430 ∨ n = 2500 := by\n          rcases h₁₄ with (rfl | rfl | rfl | rfl | rfl | rfl)\n          ·\n            have h₁₅₁ : (n : ℤ) = 70 * (20 : ℤ) - 1000 := by\n              norm_cast\n            have h₁₅₂ : n = 400 := by\n              norm_cast at h₁₅₁ ⊢\n              <;> (try omega) \n            exact Or.inl h₁₅₂\n          ·\n            have h₁₅₁ : (n : ℤ) = 70 * (21 : ℤ) - 1000 := by\n              norm_cast\n            have h₁₅₂ : n = 470 := by\n              norm_cast at h₁₅₁ ⊢\n              <;> (try omega) \n            exact Or.inr (Or.inl h₁₅₂)\n          ·\n            have h₁₅₁ : (n : ℤ) = 70 * (47 : ℤ) - 1000 := by\n              norm_cast\n            have h₁₅₂ : n = 2290 := by\n              norm_cast at h₁₅₁ ⊢\n              <;> (try omega) \n            exact Or.inr (Or.inr (Or.inl h₁₅₂))\n          ·\n            have h₁₅₁ : (n : ℤ) = 70 * (48 : ℤ) - 1000 := by\n              norm_cast\n            have h₁₅₂ : n = 2360 := by\n              norm_cast at h₁₅₁ ⊢\n              <;> (try omega) \n            exact Or.inr (Or.inr (Or.inr (Or.inl h₁₅₂)))\n          ·\n            have h₁₅₁ : (n : ℤ) = 70 * (49 : ℤ) - 1000 := by\n              norm_cast\n            have h₁₅₂ : n = 2430 := by\n              norm_cast at h₁₅₁ ⊢\n              <;> (try omega) \n            exact Or.inr (Or.inr (Or.inr (Or.inr (Or.inl h₁₅₂))))\n          ·\n            have h₁₅₁ : (n : ℤ) = 70 * (50 : ℤ) - 1000 := by\n              norm_cast\n            have h₁₅₂ : n = 2500 := by\n              norm_cast at h₁₅₁ ⊢\n              <;> (try omega) \n            exact Or.inr (Or.inr (Or.inr (Or.inr (Or.inr h₁₅₂))))\n        exact h₁₅\n      aesop\n    ·\n      intro h\n      have h₂ : n = 400 ∨ n = 470 ∨ n = 2290 ∨ n = 2360 ∨ n = 2430 ∨ n = 2500 := by aesop\n      rcases h₂ with (rfl | rfl | rfl | rfl | rfl | rfl)\n      ·\n        constructor\n        ·\n          norm_num\n        ·\n          have h₃ : Int.floor (Real.sqrt (400 : ℕ)) = 20 := by\n            norm_num [Int.floor_eq_iff, Real.le_sqrt, Real.sqrt_lt]\n          have h₄ : ((400 : ℕ) : ℝ) + 1000 = 1400 := by norm_num\n          have h₅ : (1400 : ℝ) / 70 = (20 : ℝ) := by norm_num\n          norm_num [h₃] at *\n      ·\n        constructor\n        ·\n          norm_num\n        ·\n          have h₃ : Int.floor (Real.sqrt (470 : ℕ)) = 21 := by\n            norm_num [Int.floor_eq_iff, Real.le_sqrt, Real.sqrt_lt]\n          have h₄ : ((470 : ℕ) : ℝ) + 1000 = 1470 := by norm_num\n          have h₅ : (1470 : ℝ) / 70 = (21 : ℝ) := by norm_num\n          norm_num [h₃] at *\n          <;> (try simp_all) \n      ·\n        constructor\n        ·\n          norm_num\n        ·\n          have h₃ : Int.floor (Real.sqrt (2290 : ℕ)) = 47 := by\n            norm_num [Int.floor_eq_iff, Real.le_sqrt, Real.sqrt_lt]\n          have h₄ : ((2290 : ℕ) : ℝ) + 1000 = 3290 := by norm_num\n          have h₅ : (3290 : ℝ) / 70 = (47 : ℝ) := by norm_num\n          norm_num [h₃] at *\n          <;> (try simp_all) \n      ·\n        constructor\n        ·\n          norm_num\n        ·\n          have h₃ : Int.floor (Real.sqrt (2360 : ℕ)) = 48 := by\n            norm_num [Int.floor_eq_iff, Real.le_sqrt, Real.sqrt_lt]\n          have h₄ : ((2360 : ℕ) : ℝ) + 1000 = 3360 := by norm_num\n          have h₅ : (3360 : ℝ) / 70 = (48 : ℝ) := by norm_num\n          norm_num [h₃] at *\n          <;> (try simp_all) \n      ·\n        constructor\n        ·\n          norm_num\n        ·\n          have h₃ : Int.floor (Real.sqrt (2430 : ℕ)) = 49 := by\n            norm_num [Int.floor_eq_iff, Real.le_sqrt, Real.sqrt_lt]\n          have h₄ : ((2430 : ℕ) : ℝ) + 1000 = 3430 := by norm_num\n          have h₅ : (3430 : ℝ) / 70 = (49 : ℝ) := by norm_num\n          norm_num [h₃] at *\n          <;> (try simp_all) \n      ·\n        constructor\n        ·\n          norm_num\n        ·\n          have h₃ : Int.floor (Real.sqrt (2500 : ℕ)) = 50 := by\n            norm_num [Int.floor_eq_iff, Real.le_sqrt, Real.sqrt_lt]\n          have h₄ : ((2500 : ℕ) : ℝ) + 1000 = 3500 := by norm_num\n          have h₅ : (3500 : ℝ) / 70 = (50 : ℝ) := by norm_num\n          norm_num [h₃] at *\n  rw [h₁]\n  norm_num",
    "orig_proof_length": 2980,
    "simp_proof_length": 1802
  },
  {
    "problem_id": "mathd_algebra_107",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_107\n  (x y : ℝ)\n  (h₀ : x^2 + 8 * x + y^2 - 6 * y = 0) :\n  (x + 4)^2 + (y-3)^2 = 5^2 := by\n  have h₁ : (x + 4)^2 + (y - 3)^2 = 25 := by\n    have h₂ : x ^ 2 + 8 * x + y ^ 2 - 6 * y = 0 := h₀\n    have h₃ : (x + 4) ^ 2 + (y - 3) ^ 2 = 25 := by\n      nlinarith [sq_nonneg (x + 4), sq_nonneg (y - 3), sq_nonneg (x + 4 + (y - 3) * 4 / 3)]\n    exact h₃\n  -- Simplify the right-hand side to 25 and use the given hypothesis to conclude the proof.\n  norm_num at h₁ ⊢\n  <;> linarith",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_107\n  (x y : ℝ)\n  (h₀ : x^2 + 8 * x + y^2 - 6 * y = 0) :\n  (x + 4)^2 + (y-3)^2 = 5^2 := by\n  nlinarith",
    "orig_proof_length": 108,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_495",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_495\n  (a b : ℕ)\n  (h₀ : 0 < a ∧ 0 < b)\n  (h₁ : a % 10 = 2)\n  (h₂ : b % 10 = 4)\n  (h₃ : Nat.gcd a b = 6) :\n  108 ≤ Nat.lcm a b := by\n  have h₄ : a % 30 = 12 := by\n    have h₄₁ : a % 6 = 0 := by\n      have h₄₂ : 6 ∣ a := by\n        have h₄₃ : 6 ∣ Nat.gcd a b := by\n          simp [h₃]\n        have h₄₄ : 6 ∣ a := Nat.dvd_trans h₄₃ (Nat.gcd_dvd_left a b)\n        exact h₄₄\n      omega\n    have h₄₅ : a % 10 = 2 := h₁\n    have h₄₆ : a % 30 = 12 := by\n      have h₄₇ : a % 30 = 12 := by\n        omega\n      exact h₄₇\n    exact h₄₆\n  \n  have h₅ : b % 30 = 24 := by\n    have h₅₁ : b % 6 = 0 := by\n      have h₅₂ : 6 ∣ b := by\n        have h₅₃ : 6 ∣ Nat.gcd a b := by\n          simp [h₃]\n        have h₅₄ : 6 ∣ b := Nat.dvd_trans h₅₃ (Nat.gcd_dvd_right a b)\n        exact h₅₄\n      omega\n    have h₅₅ : b % 10 = 4 := h₂\n    have h₅₆ : b % 30 = 24 := by\n      omega\n    exact h₅₆\n  \n  have h₆ : a ≥ 42 ∨ b ≥ 54 := by\n    by_contra! h\n    have h₆₁ : a < 42 := by linarith\n    have h₆₂ : b < 54 := by linarith\n    have h₆₃ : a = 12 := by\n      have h₆₄ : a % 30 = 12 := h₄\n      have h₆₅ : a < 42 := h₆₁\n      have h₆₆ : a > 0 := h₀.1\n      interval_cases a <;> norm_num at h₆₄ ⊢ <;> omega\n    have h₆₇ : b = 24 := by\n      have h₆₈ : b % 30 = 24 := h₅\n      have h₆₉ : b < 54 := h₆₂\n      have h₆₁₀ : b > 0 := h₀.2\n      interval_cases b <;> norm_num at h₆₈ ⊢ <;> omega\n    have h₆₁₁ : Nat.gcd a b = 6 := h₃\n    rw [h₆₃, h₆₇] at h₆₁₁\n    norm_num at h₆₁₁\n    <;> contradiction\n  \n  have h₇ : a * b ≥ 648 := by\n    have h₇₁ : a ≥ 42 ∨ b ≥ 54 := h₆\n    cases h₇₁ with\n    | inl h₇₁ =>\n      -- Case: a ≥ 42\n      have h₇₂ : a ≥ 42 := h₇₁\n      have h₇₃ : b ≥ 24 := by\n        -- Prove that b ≥ 24 since b ≡ 24 mod 30\n        have h₇₄ : b % 30 = 24 := h₅\n        have h₇₅ : b > 0 := h₀.2\n        omega\n      have h₇₆ : a * b ≥ 42 * 24 := by\n        nlinarith\n      have h₇₇ : 42 * 24 ≥ 648 := by norm_num\n      nlinarith\n    | inr h₇₁ =>\n      -- Case: b ≥ 54\n      have h₇₂ : b ≥ 54 := h₇₁\n      have h₇₃ : a ≥ 12 := by\n        -- Prove that a ≥ 12 since a ≡ 12 mod 30\n        have h₇₄ : a % 30 = 12 := h₄\n        have h₇₅ : a > 0 := h₀.1\n        omega\n      have h₇₆ : a * b ≥ 12 * 54 := by\n        nlinarith\n      have h₇₇ : 12 * 54 ≥ 648 := by norm_num\n      nlinarith\n  \n  have h₈ : 108 ≤ Nat.lcm a b := by\n    have h₈₁ : a * b = 6 * Nat.lcm a b := by\n      have h₈₂ : Nat.gcd a b = 6 := h₃\n      have h₈₃ : a * b = Nat.gcd a b * Nat.lcm a b := by\n        rw [Nat.gcd_mul_lcm]\n      rw [h₈₃, h₈₂]\n      <;> ring_nf\n      <;> omega\n    have h₈₄ : 6 * Nat.lcm a b ≥ 648 := by\n      linarith\n    have h₈₅ : Nat.lcm a b ≥ 108 := by\n      omega\n    linarith\n  \n  exact h₈",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_495\n  (a b : ℕ)\n  (h₀ : 0 < a ∧ 0 < b)\n  (h₁ : a % 10 = 2)\n  (h₂ : b % 10 = 4)\n  (h₃ : Nat.gcd a b = 6) :\n  108 ≤ Nat.lcm a b := by\n  have h₄ : a % 30 = 12 := by\n    have h₄₁ : a % 6 = 0 := by\n      have h₄₂ : 6 ∣ a := by\n        have h₄₃ : 6 ∣ Nat.gcd a b := by\n          simp [h₃]\n        exact Nat.dvd_trans h₄₃ (Nat.gcd_dvd_left a b)\n      omega\n    omega\n  have h₅ : b % 30 = 24 := by\n    have h₅₁ : b % 6 = 0 := by\n      have h₅₂ : 6 ∣ b := by\n        have h₅₃ : 6 ∣ Nat.gcd a b := by\n          simp [h₃]\n        exact Nat.dvd_trans h₅₃ (Nat.gcd_dvd_right a b)\n      omega\n    omega\n  have h₆ : a ≥ 42 ∨ b ≥ 54 := by\n    by_contra! h\n    have h₆₁ : a < 42 := by linarith\n    have h₆₂ : b < 54 := by linarith\n    have h₆₃ : a = 12 := by omega\n    have h₆₄ : b = 24 := by omega\n    rw [h₆₃, h₆₄] at h₃\n    norm_num at h₃\n  have h₇ : a * b ≥ 648 := by\n    cases' h₆ with h₆ h₆\n    · have h₇₁ : a ≥ 42 := h₆\n      have h₇₂ : b ≥ 24 := by omega\n      nlinarith\n    · have h₇₁ : b ≥ 54 := h₆\n      have h₇₂ : a ≥ 12 := by omega\n      nlinarith\n  have h₈ : 108 ≤ Nat.lcm a b := by\n    have h₈₁ : a * b = 6 * Nat.lcm a b := by\n      have h₈₂ : Nat.gcd a b = 6 := h₃\n      rw [← Nat.gcd_mul_lcm]\n      rw [h₈₂]\n    have h₈₂ : 6 * Nat.lcm a b ≥ 648 := by linarith\n    omega\n  exact h₈",
    "orig_proof_length": 571,
    "simp_proof_length": 278
  },
  {
    "problem_id": "mathd_algebra_412",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_412\n  (x y : ℝ)\n  (h₀ : x + y = 25)\n  (h₁ : x - y = 11) :\n  x = 18 := by\n  have h₂ : x = 18 := by\n    -- Add the two equations to eliminate y\n    have h₃ : 2 * x = 36 := by\n      linarith\n    -- Solve for x by dividing both sides by 2\n    linarith\n  -- The final result is x = 18\n  exact h₂",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_412\n  (x y : ℝ)\n  (h₀ : x + y = 25)\n  (h₁ : x - y = 11) :\n  x = 18 := by\n  linarith",
    "orig_proof_length": 25,
    "simp_proof_length": 1
  },
  {
    "problem_id": "amc12a_2013_p4",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2013_p4 :\n  (2^2014 + 2^2012) / (2^2014 - 2^2012) = (5: ℝ) / 3 := by\n  have h_denom_pos : (2^2014 - 2^2012 : ℝ) > 0 := by\n    norm_num [pow_succ]\n    <;>\n    positivity\n  \n  have h_num : (2^2014 + 2^2012 : ℝ) = (2^2012 : ℝ) * 5 := by\n    norm_num [pow_succ, pow_add, pow_mul, mul_assoc]\n    <;>\n    ring_nf at *\n    <;>\n    norm_num\n    <;>\n    linarith\n  \n  have h_den : (2^2014 - 2^2012 : ℝ) = (2^2012 : ℝ) * 3 := by\n    norm_num [pow_succ, pow_add, pow_mul, mul_assoc]\n    <;>\n    ring_nf at *\n    <;>\n    norm_num\n    <;>\n    linarith\n  \n  have h_main : (2^2014 + 2^2012 : ℝ) / (2^2014 - 2^2012 : ℝ) = (5 : ℝ) / 3 := by\n    rw [h_num, h_den]\n    have h : (2 : ℝ) ^ 2012 ≠ 0 := by positivity\n    field_simp [h]\n    <;> ring_nf\n    <;> norm_num\n    <;> linarith\n  \n  exact_mod_cast h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2013_p4 :\n  (2^2014 + 2^2012) / (2^2014 - 2^2012) = (5: ℝ) / 3 := by\n  norm_num",
    "orig_proof_length": 185,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_392",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_392\n  (n : ℕ)\n  (h₀ : Even n)\n  (h₁ : ((n:ℤ) - 2)^2 + (n:ℤ)^2 + ((n:ℤ) + 2)^2 = 12296) :\n  ((n - 2) * n * (n + 2)) / 8 = 32736 := by\n  have h₂ : n = 64 := by\n    have h₂₁ : (3 : ℤ) * (n : ℤ) ^ 2 + 8 = 12296 := by\n      have h₂₁₁ : ((n : ℤ) - 2) ^ 2 + (n : ℤ) ^ 2 + ((n : ℤ) + 2) ^ 2 = 12296 := h₁\n      ring_nf at h₂₁₁ ⊢\n      <;> linarith\n    have h₂₂ : (n : ℤ) ^ 2 = 4096 := by\n      have h₂₂₁ : (3 : ℤ) * (n : ℤ) ^ 2 + 8 = 12296 := h₂₁\n      linarith\n    have h₂₃ : n ^ 2 = 4096 := by\n      norm_cast at h₂₂ ⊢\n      <;> nlinarith\n    have h₂₄ : n = 64 := by\n      have h₂₄₁ : n ≤ 100 := by\n        nlinarith\n      interval_cases n <;> norm_num at h₂₃ ⊢ <;>\n        (try omega) <;>\n        (try\n          {\n            simp_all [Nat.even_iff]\n            <;> omega\n          })\n    exact h₂₄\n  \n  have h₃ : ((n - 2) * n * (n + 2)) / 8 = 32736 := by\n    rw [h₂]\n    <;> norm_num\n    <;> rfl\n  \n  apply h₃",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_392\n  (n : ℕ)\n  (h₀ : Even n)\n  (h₁ : ((n:ℤ) - 2)^2 + (n:ℤ)^2 + ((n:ℤ) + 2)^2 = 12296) :\n  ((n - 2) * n * (n + 2)) / 8 = 32736 := by\n  have : n = 64 := by\n    nlinarith\n  simp_all",
    "orig_proof_length": 206,
    "simp_proof_length": 9
  },
  {
    "problem_id": "mathd_numbertheory_343",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_343 :\n  (∏ k ∈ Finset.range 6, (2 * k + 1)) % 10 = 5 := by\n  have h_main : (∏ k ∈ Finset.range 6, (2 * k + 1)) % 10 = 5 := by\n    decide\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_343 :\n  (∏ k ∈ Finset.range 6, (2 * k + 1)) % 10 = 5 := by\n  decide",
    "orig_proof_length": 27,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_314",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_314\n  (r n : ℕ)\n  (h₀ : r = 1342 % 13)\n  (h₁ : 0 < n)\n  (h₂ : 1342∣n)\n  (h₃ : n % 13 < r) :\n  6710 ≤ n := by\n  have h_r : r = 3 := by\n    rw [h₀]\n    <;> norm_num\n    <;> rfl\n  \n  have h_main : 6710 ≤ n := by\n    have h₄ : n % 13 < 3 := by\n      rw [h_r] at h₃\n      exact h₃\n    -- Express n as a multiple of 1342\n    obtain ⟨k, rfl⟩ := h₂\n    have h₅ : 0 < k := by\n      by_contra h\n      -- If k = 0, then n = 0, which contradicts h₁ : 0 < n\n      push_neg at h\n      have h₆ : k = 0 := by omega\n      simp [h₆] at h₁\n      <;> omega\n    -- We will show that if k ≤ 4, then (1342 * k) % 13 ≥ 3, which contradicts h₄\n    by_contra! h₆\n    have h₇ : k ≤ 4 := by\n      by_contra h₈\n      -- If k ≥ 5, then 1342 * k ≥ 1342 * 5 = 6710, which contradicts h₆ : 1342 * k < 6710\n      have h₉ : k ≥ 5 := by omega\n      have h₁₀ : 1342 * k ≥ 1342 * 5 := by\n        nlinarith\n      omega\n    -- Check each case k = 1, 2, 3, 4\n    interval_cases k <;> norm_num [Nat.mul_mod, Nat.add_mod, Nat.mod_mod] at h₄ ⊢ <;>\n      (try omega) <;> (try contradiction)\n  \n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_314\n  (r n : ℕ)\n  (h₀ : r = 1342 % 13)\n  (h₁ : 0 < n)\n  (h₂ : 1342∣n)\n  (h₃ : n % 13 < r) :\n  6710 ≤ n := by\n  rw [h₀] at h₃\n  cases' h₂ with k hk\n  have : k ≥ 5 := by\n    by_contra h\n    push_neg at h\n    interval_cases k <;> omega\n  nlinarith",
    "orig_proof_length": 149,
    "simp_proof_length": 28
  },
  {
    "problem_id": "induction_prod1p1onk3le3m1onn",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem induction_prod1p1onk3le3m1onn\n  (n : ℕ)\n  (h₀ : 0 < n) :\n  ∏ k ∈ Finset.Icc 1 n, (1 + (1: ℝ) / k^3) ≤ (3: ℝ) - 1 / ↑n := by\n  have h_base : ∏ k ∈ Finset.Icc 1 (1 : ℕ), (1 + (1: ℝ) / k^3) ≤ (3:ℝ) - 1 / (1 : ℝ) := by\n    norm_num [Finset.prod_Icc_succ_top]\n    <;>\n    simp [Finset.prod_Icc_succ_top]\n    <;>\n    norm_num\n    <;>\n    linarith\n  \n  have h_inductive_step : ∀ (m : ℕ), 0 < m → (∏ k ∈ Finset.Icc 1 m, (1 + (1: ℝ) / k^3) ≤ (3:ℝ) - 1 / (m : ℝ)) → (∏ k ∈ Finset.Icc 1 (m + 1), (1 + (1: ℝ) / k^3) ≤ (3:ℝ) - 1 / ((m + 1 : ℕ) : ℝ)) := by\n    intro m hm h_ind\n    have h₁ : ∏ k ∈ Finset.Icc 1 (m + 1), (1 + (1:ℝ) / k^3) = (∏ k ∈ Finset.Icc 1 m, (1 + (1:ℝ) / k^3)) * (1 + (1:ℝ) / ((m + 1 : ℕ) : ℝ)^3) := by\n      rw [Finset.prod_Icc_succ_top (by omega : 1 ≤ m + 1)]\n      <;> simp [Nat.cast_add, Nat.cast_one]\n      <;> ring_nf\n      <;> field_simp\n      <;> ring_nf\n    rw [h₁]\n    have h₂ : (∏ k ∈ Finset.Icc 1 m, (1 + (1:ℝ) / k^3)) * (1 + (1:ℝ) / ((m + 1 : ℕ) : ℝ)^3) ≤ ((3:ℝ) - 1 / (m : ℝ)) * (1 + (1:ℝ) / ((m + 1 : ℕ) : ℝ)^3) := by\n      have h₃ : 0 ≤ (1 + (1:ℝ) / ((m + 1 : ℕ) : ℝ)^3 : ℝ) := by positivity\n      have h₄ : (∏ k ∈ Finset.Icc 1 m, (1 + (1:ℝ) / k^3)) ≤ (3: ℝ) - 1 / (m : ℝ) := h_ind\n      nlinarith\n    have h₃ : ((3:ℝ) - 1 / (m : ℝ)) * (1 + (1: ℝ) / ((m + 1 : ℕ) : ℝ)^3) ≤ (3:ℝ) - 1 / ((m + 1 : ℕ) : ℝ) := by\n      have h₄ : 0 < (m : ℝ) := by exact_mod_cast hm\n      have h₅ : 0 < ((m + 1 : ℕ) : ℝ) := by positivity\n      have h₆ : 0 < (m : ℝ) * ((m + 1 : ℕ) : ℝ) ^ 3 := by positivity\n      field_simp [h₄.ne', h₅.ne']\n      rw [div_le_div_iff (by positivity) (by positivity)]\n      ring_nf\n      nlinarith [sq_nonneg ((m : ℝ) - 1), sq_nonneg ((m : ℝ) + 1)]\n    linarith\n  \n  have h_main : ∏ k ∈ Finset.Icc 1 n, (1 + (1: ℝ) / k^3) ≤ (3:ℝ) - 1 / (n : ℝ) := by\n    have h₁ : ∀ (n : ℕ), 0 < n → ∏ k ∈ Finset.Icc 1 n, (1 + (1: ℝ) / k^3) ≤ (3:ℝ) - 1 / (n : ℝ) := by\n      intro n hn\n      induction' hn with n hn IH\n      · -- Base case: n = 1\n        simpa using h_base\n      · -- Inductive step: assume the statement holds for n, prove for n + 1\n        simpa using h_inductive_step n hn IH\n    -- Apply the general result to the specific n\n    exact h₁ n h₀\n  \n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem induction_prod1p1onk3le3m1onn\n  (n : ℕ)\n  (h₀ : 0 < n) :\n  ∏ k ∈ Finset.Icc 1 n, (1 + (1: ℝ) / k^3) ≤ (3: ℝ) - 1 / ↑n := by\n  induction' h₀ with n hn IH\n  norm_num\n  rw [Finset.prod_Icc_succ_top (by omega : 1 ≤ n + 1)]\n  refine' (mul_le_mul_of_nonneg_right IH (by positivity)).trans _\n  have : 0 < (n : ℝ) := by exact_mod_cast hn\n  field_simp\n  rw [div_le_div_iff (by positivity) (by positivity)]\n  ring_nf\n  nlinarith",
    "orig_proof_length": 719,
    "simp_proof_length": 60
  },
  {
    "problem_id": "mathd_algebra_756",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_756\n  (a b : ℝ)\n  (h₀ : (2:ℝ)^a = 32)\n  (h₁ : a^b = 125) :\n  b^a = 243 := by\n  have h_a : a = 5 := by\n    have h₂ : (2 : ℝ) ^ a = 32 := h₀\n    have h₃ : (2 : ℝ) ^ a = (2 : ℝ) ^ (5 : ℝ) := by\n      norm_num at h₂ ⊢\n      <;>\n      linarith\n    -- Use the injectivity of the exponential function to conclude that a = 5\n    have h₄ : a = 5 := by\n      apply_fun (fun x => Real.logb 2 x) at h₃\n      <;>\n      field_simp [Real.logb_pow, Real.logb_rpow, Real.logb_pow] at h₃ ⊢\n      <;>\n      norm_num at h₃ ⊢ <;>\n      linarith\n    exact h₄\n  \n  have h_b : b = 3 := by\n    have h₂ : a ^ b = 125 := h₁\n    rw [h_a] at h₂\n    have h₃ : (5 : ℝ) ^ b = 125 := by exact_mod_cast h₂\n    have h₄ : (5 : ℝ) ^ b = (5 : ℝ) ^ (3 : ℝ) := by\n      norm_num at h₃ ⊢\n      <;>\n      linarith\n    -- Use the injectivity of the exponential function to conclude that b = 3\n    have h₅ : b = 3 := by\n      apply_fun (fun x => Real.logb 5 x) at h₄\n      <;>\n      field_simp [Real.logb_pow, Real.logb_rpow, Real.logb_pow] at h₄ ⊢\n      <;>\n      norm_num at h₄ ⊢ <;>\n      linarith\n    exact_mod_cast h₅\n  \n  have h_main : b^a = 243 := by\n    rw [h_b, h_a]\n    norm_num\n    <;>\n    simp [pow_succ]\n    <;>\n    norm_num\n    <;>\n    rfl\n  \n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_756\n  (a b : ℝ)\n  (h₀ : (2:ℝ)^a = 32)\n  (h₁ : a^b = 125) :\n  b^a = 243 := by\n  have : a = 5 := by\n    rw [show (32 : ℝ) = 2 ^ 5 by norm_num] at h₀\n    apply_fun fun x => logb 2 x at h₀\n    field_simp [Real.logb_pow] at h₀\n    linarith\n  subst this\n  have : b = 3 := by\n    rw [show (125 : ℝ) = 5 ^ 3 by norm_num] at h₁\n    apply_fun fun x => logb 5 x at h₁\n    field_simp [Real.logb_pow] at h₁\n    linarith\n  subst this\n  norm_num",
    "orig_proof_length": 235,
    "simp_proof_length": 85
  },
  {
    "problem_id": "mathd_algebra_80",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_80\n  (x : ℝ)\n  (h₀ : x ≠ -1)\n  (h₁ : (x - 9) / (x + 1) = 2) :\n  x = -11 := by\n  have h_main : x = -11 := by\n    have h₂ : x + 1 ≠ 0 := by\n      intro h\n      apply h₀\n      linarith\n    -- Eliminate the fraction by multiplying both sides by (x + 1)\n    field_simp [h₂] at h₁\n    -- Simplify the equation to x - 9 = 2 * (x + 1)\n    ring_nf at h₁\n    -- Solve the linear equation x - 9 = 2x + 2\n    linarith\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_80\n  (x : ℝ)\n  (h₀ : x ≠ -1)\n  (h₁ : (x - 9) / (x + 1) = 2) :\n  x = -11 := by\n  rw [div_eq_iff] at h₁\n  linarith\n  aesop",
    "orig_proof_length": 39,
    "simp_proof_length": 8
  },
  {
    "problem_id": "amc12b_2002_p7",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2002_p7\n  (a b c : ℕ)\n  (h₀ : 0 < a ∧ 0 < b ∧ 0 < c)\n  (h₁ : b = a + 1)\n  (h₂ : c = b + 1)\n  (h₃ : a * b * c = 8 * (a + b + c)) :\n  a^2 + (b^2 + c^2) = 77 := by\n  have h₄ : c = a + 2 := by\n    have h₄₁ : c = b + 1 := h₂\n    have h₄₂ : b = a + 1 := h₁\n    rw [h₄₂] at h₄₁\n    omega\n  \n  have h₅ : a = 4 := by\n    have h₅₁ : a * b * c = 8 * (a + b + c) := h₃\n    have h₅₂ : b = a + 1 := h₁\n    have h₅₃ : c = a + 2 := h₄\n    rw [h₅₂, h₅₃] at h₅₁\n    ring_nf at h₅₁\n    have h₅₄ : a ≤ 6 := by\n      by_contra! h\n      have h₅₅ : a ≥ 7 := by omega\n      have h₅₆ : a * (a + 1) * (a + 2) > 8 * (a + (a + 1) + (a + 2)) := by\n        have h₅₇ : a ≥ 7 := h₅₅\n        have h₅₈ : a * (a + 1) * (a + 2) ≥ 7 * (a + 1) * (a + 2) := by\n          gcongr <;> nlinarith\n        have h₅₉ : 7 * (a + 1) * (a + 2) > 8 * (a + (a + 1) + (a + 2)) := by\n          nlinarith\n        nlinarith\n      nlinarith\n    interval_cases a <;> norm_num at h₅₁ ⊢ <;>\n      (try omega) <;> (try nlinarith)\n  \n  have h₆ : b = 5 := by\n    have h₆₁ : b = a + 1 := h₁\n    rw [h₆₁]\n    have h₆₂ : a = 4 := h₅\n    rw [h₆₂]\n    <;> norm_num\n  \n  have h₇ : c = 6 := by\n    have h₇₁ : c = a + 2 := h₄\n    rw [h₇₁]\n    have h₇₂ : a = 4 := h₅\n    rw [h₇₂]\n    <;> norm_num\n  \n  have h₈ : a^2 + (b^2 + c^2) = 77 := by\n    have h₈₁ : a = 4 := h₅\n    have h₈₂ : b = 5 := h₆\n    have h₈₃ : c = 6 := h₇\n    subst_vars\n    <;> norm_num\n    <;> ring_nf at *\n    <;> norm_num at *\n    <;> linarith\n  \n  apply h₈",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2002_p7\n  (a b c : ℕ)\n  (h₀ : 0 < a ∧ 0 < b ∧ 0 < c)\n  (h₁ : b = a + 1)\n  (h₂ : c = b + 1)\n  (h₃ : a * b * c = 8 * (a + b + c)) :\n  a^2 + (b^2 + c^2) = 77 := by\n  subst_vars\n  nlinarith",
    "orig_proof_length": 387,
    "simp_proof_length": 2
  },
  {
    "problem_id": "mathd_numbertheory_457",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_457\n  (n : ℕ)\n  (h₀ : 0 < n)\n  (h₁ : 80325∣(n !)) :\n  17 ≤ n := by\n  have h₂ : 17 ∣ n ! := by\n    have h₂₁ : 17 ∣ 80325 := by norm_num\n    exact dvd_trans h₂₁ h₁\n  \n  have h₃ : 17 ≤ n := by\n    by_contra h\n    -- Assume n < 17 and derive a contradiction\n    have h₄ : n ≤ 16 := by linarith\n    interval_cases n <;> norm_num [Nat.factorial_succ, Nat.dvd_iff_mod_eq_zero] at h₂ ⊢ <;>\n      (try omega) <;> (try contradiction)\n  \n  exact h₃",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_457\n  (n : ℕ)\n  (h₀ : 0 < n)\n  (h₁ : 80325∣(n !)) :\n  17 ≤ n := by\n  contrapose! h₁\n  interval_cases n <;> norm_num",
    "orig_proof_length": 68,
    "simp_proof_length": 7
  },
  {
    "problem_id": "mathd_algebra_275",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_275\n  (x : ℝ)\n  (h : ((11:ℝ)^(1 / 4))^(3 * x - 3) = 1 / 5) :\n  ((11:ℝ)^(1 / 4))^(6 * x + 2) = 121 / 25 := by\n  have h₁ : False := by\n    norm_num [pow_mul] at h\n    <;>\n    (try contradiction) <;>\n    (try linarith)\n    <;>\n    (try\n      {\n        -- Simplify the equation 1 = 1/5 to show it's a contradiction\n        norm_num at h ⊢\n        <;>\n        linarith\n      })\n  \n  have h₂ : ((11:ℝ)^(1 / 4))^(6 * x + 2) = 121 / 25 := by\n    exfalso\n    exact h₁\n  \n  exact h₂",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_275\n  (x : ℝ)\n  (h : ((11:ℝ)^(1 / 4))^(3 * x - 3) = 1 / 5) :\n  ((11:ℝ)^(1 / 4))^(6 * x + 2) = 121 / 25 := by\n  simp_all",
    "orig_proof_length": 72,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_388",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_388\n  (x y z : ℝ)\n  (h₀ : 3 * x + 4 * y - 12 * z = 10)\n  (h₁ : -2 * x - 3 * y + 9 * z = -4) :\n  x = 14 := by\n  have h₂ : x = 14 := by\n    have h₃ : 9 * x + 12 * y - 36 * z = 30 := by\n      have h₄ : 9 * x + 12 * y - 36 * z = 3 * (3 * x + 4 * y - 12 * z) := by ring\n      rw [h₄]\n      rw [h₀]\n      <;> ring\n      <;> norm_num\n    have h₄ : -8 * x - 12 * y + 36 * z = -16 := by\n      have h₅ : -8 * x - 12 * y + 36 * z = 4 * (-2 * x - 3 * y + 9 * z) := by ring\n      rw [h₅]\n      rw [h₁]\n      <;> ring\n      <;> norm_num\n    have h₅ : x = 14 := by\n      have h₆ : x = 14 := by\n        linarith\n      exact h₆\n    exact h₅\n  exact h₂",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_388\n  (x y z : ℝ)\n  (h₀ : 3 * x + 4 * y - 12 * z = 10)\n  (h₁ : -2 * x - 3 * y + 9 * z = -4) :\n  x = 14 := by\n  linarith",
    "orig_proof_length": 161,
    "simp_proof_length": 1
  },
  {
    "problem_id": "amc12_2000_p12",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12_2000_p12\n  (a m c : ℕ)\n  (h₀ : a + m + c = 12) :\n  a*m*c + a*m + m*c + a*c ≤ 112 := by\n  have h_main : a*m*c + a*m + m*c + a*c ≤ 112 := by\n    have h₁ : a ≤ 12 := by\n      omega\n    have h₂ : m ≤ 12 := by\n      omega\n    have h₃ : c ≤ 12 := by\n      omega\n    -- We will consider all possible values of a, m, c that satisfy the constraints\n    interval_cases a <;> interval_cases m <;> omega\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12_2000_p12\n  (a m c : ℕ)\n  (h₀ : a + m + c = 12) :\n  a*m*c + a*m + m*c + a*c ≤ 112 := by\n  have : a ≤ 12 := by omega\n  have : m ≤ 12 := by omega\n  have : c ≤ 12 := by omega\n  interval_cases a <;> interval_cases m <;> omega",
    "orig_proof_length": 61,
    "simp_proof_length": 31
  },
  {
    "problem_id": "mathd_numbertheory_135",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_135\n  (n A B C : ℕ)\n  (h₀ : n = 3^17 + 3^10)\n  (h₁ : 11 ∣ (n + 1))\n  (h₂ : [A,B,C].Pairwise (·≠·))\n  (h₃ : {A,B,C} ⊂ Finset.Icc 0 9)\n  (h₄ : Odd A ∧ Odd C)\n  (h₅ : ¬ 3 ∣ B)\n  (h₆ : Nat.digits 10 n = [B,A,B,C,C,A,C,B,A]) :\n  100 * A + 10 * B + C = 129 := by\n  have h₇ : n = 129199212 := by\n    rw [h₀]\n    <;> norm_num\n    <;> rfl\n  \n  have h₈ : Nat.digits 10 n = [2,1,2,9,9,1,9,2,1] := by\n    rw [h₇]\n    <;> norm_num [Nat.digits_len]\n    <;> rfl\n  \n  have h₉ : [B,A,B,C,C,A,C,B,A] = [2,1,2,9,9,1,9,2,1] := by\n    have h₉₁ : [B,A,B,C,C,A,C,B,A] = [2,1,2,9,9,1,9,2,1] := by\n      rw [← h₆, h₈]\n      <;>\n      (try decide) <;>\n      (try simp_all [List.cons, List.nil]) <;>\n      (try ring_nf at *) <;>\n      (try norm_num at *) <;>\n      (try omega)\n    exact h₉₁\n  \n  have h₁₀ : B = 2 := by\n    have h₁₀₁ : B = 2 := by\n      have h₁₀₂ := congr_arg (fun l => l.get? 0) h₉\n      simp [List.get?] at h₁₀₂\n      <;>\n      (try cases B <;> simp_all (config := {decide := true})) <;>\n      (try omega)\n    exact h₁₀₁\n  \n  have h₁₁ : A = 1 := by\n    have h₁₁₁ : A = 1 := by\n      have h₁₁₂ := congr_arg (fun l => l.get? 1) h₉\n      simp [List.get?] at h₁₁₂\n      <;>\n      (try cases A <;> simp_all (config := {decide := true})) <;>\n      (try omega)\n    exact h₁₁₁\n  \n  have h₁₂ : C = 9 := by\n    have h₁₂₁ : C = 9 := by\n      have h₁₂₂ := congr_arg (fun l => l.get? 3) h₉\n      simp [List.get?] at h₁₂₂\n      <;>\n      (try cases C <;> simp_all (config := {decide := true})) <;>\n      (try omega)\n    exact h₁₂₁\n  \n  have h₁₃ : 100 * A + 10 * B + C = 129 := by\n    rw [h₁₁, h₁₀, h₁₂]\n    <;> norm_num\n    <;> rfl\n  \n  exact h₁₃",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_135\n  (n A B C : ℕ)\n  (h₀ : n = 3^17 + 3^10)\n  (h₁ : 11 ∣ (n + 1))\n  (h₂ : [A,B,C].Pairwise (·≠·))\n  (h₃ : {A,B,C} ⊂ Finset.Icc 0 9)\n  (h₄ : Odd A ∧ Odd C)\n  (h₅ : ¬ 3 ∣ B)\n  (h₆ : Nat.digits 10 n = [B,A,B,C,C,A,C,B,A]) :\n  100 * A + 10 * B + C = 129 := by\n  simp_all\n  omega",
    "orig_proof_length": 403,
    "simp_proof_length": 2
  },
  {
    "problem_id": "mathd_algebra_263",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_263\n  (y : ℝ)\n  (h₀ : 0 ≤ 19 + 3 * y)\n  (h₁ : Real.sqrt (19 + 3 * y) = 7) :\n  y = 10 := by\n  have h₂ : (Real.sqrt (19 + 3 * y)) ^ 2 = 19 + 3 * y := by\n    rw [Real.sq_sqrt]\n    <;> linarith\n  \n  have h₃ : (Real.sqrt (19 + 3 * y)) ^ 2 = 49 := by\n    rw [h₁]\n    <;> norm_num\n  \n  have h₄ : 19 + 3 * y = 49 := by\n    linarith\n  \n  have h₅ : 3 * y = 30 := by\n    linarith\n  \n  have h₆ : y = 10 := by\n    linarith\n  \n  exact h₆",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_263\n  (y : ℝ)\n  (h₀ : 0 ≤ 19 + 3 * y)\n  (h₁ : Real.sqrt (19 + 3 * y) = 7) :\n  y = 10 := by\n  nlinarith [Real.sq_sqrt h₀]",
    "orig_proof_length": 94,
    "simp_proof_length": 5
  },
  {
    "problem_id": "amc12a_2020_p7",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2020_p7\n  (a : ℕ → ℕ)\n  (h₀ : (a 0)^3 = 1)\n  (h₁ : (a 1)^3 = 8)\n  (h₂ : (a 2)^3 = 27)\n  (h₃ : (a 3)^3 = 64)\n  (h₄ : (a 4)^3 = 125)\n  (h₅ : (a 5)^3 = 216)\n  (h₆ : (a 6)^3 = 343) :\n  ∑ k ∈ Finset.range 7, (6 * (a k)^2) - ↑(2 * ∑ k ∈ Finset.range 6, (a k)^2) = 658 := by\n  have h_a0 : a 0 = 1 := by\n    have h : a 0 = 1 := by\n      have h₁ : (a 0) ^ 3 = 1 := h₀\n      have h₂ : a 0 ≤ 1 := by\n        nlinarith [pow_two_nonneg (a 0), pow_two_nonneg (a 0 - 1)]\n      interval_cases a 0 <;> norm_num at h₁ ⊢ <;>\n        (try omega) <;>\n        (try nlinarith)\n      <;>\n      (try\n        {\n          simp_all [pow_succ]\n          <;> nlinarith\n        })\n    exact h\n  \n  have h_a1 : a 1 = 2 := by\n    have h : a 1 = 2 := by\n      have h₁ : (a 1) ^ 3 = 8 := h₁\n      have h₂ : a 1 ≤ 2 := by\n        nlinarith [pow_two_nonneg (a 1), pow_two_nonneg (a 1 - 2)]\n      interval_cases a 1 <;> norm_num at h₁ ⊢ <;>\n        (try omega) <;>\n        (try nlinarith)\n      <;>\n      (try\n        {\n          simp_all [pow_succ]\n          <;> nlinarith\n        })\n    exact h\n  \n  have h_a2 : a 2 = 3 := by\n    have h : a 2 = 3 := by\n      have h₁ : (a 2) ^ 3 = 27 := h₂\n      have h₂ : a 2 ≤ 3 := by\n        nlinarith [pow_two_nonneg (a 2), pow_two_nonneg (a 2 - 3)]\n      interval_cases a 2 <;> norm_num at h₁ ⊢ <;>\n        (try omega) <;>\n        (try nlinarith)\n      <;>\n      (try\n        {\n          simp_all [pow_succ]\n          <;> nlinarith\n        })\n    exact h\n  \n  have h_a3 : a 3 = 4 := by\n    have h : a 3 = 4 := by\n      have h₁ : (a 3) ^ 3 = 64 := h₃\n      have h₂ : a 3 ≤ 4 := by\n        nlinarith [pow_two_nonneg (a 3), pow_two_nonneg (a 3 - 4)]\n      interval_cases a 3 <;> norm_num at h₁ ⊢ <;>\n        (try omega) <;>\n        (try nlinarith)\n      <;>\n      (try\n        {\n          simp_all [pow_succ]\n          <;> nlinarith\n        })\n    exact h\n  \n  have h_a4 : a 4 = 5 := by\n    have h : a 4 = 5 := by\n      have h₁ : (a 4) ^ 3 = 125 := h₄\n      have h₂ : a 4 ≤ 5 := by\n        nlinarith [pow_two_nonneg (a 4), pow_two_nonneg (a 4 - 5)]\n      interval_cases a 4 <;> norm_num at h₁ ⊢ <;>\n        (try omega) <;>\n        (try nlinarith)\n      <;>\n      (try\n        {\n          simp_all [pow_succ]\n          <;> nlinarith\n        })\n    exact h\n  \n  have h_a5 : a 5 = 6 := by\n    have h : a 5 = 6 := by\n      have h₁ : (a 5) ^ 3 = 216 := h₅\n      have h₂ : a 5 ≤ 6 := by\n        nlinarith [pow_two_nonneg (a 5), pow_two_nonneg (a 5 - 6)]\n      interval_cases a 5 <;> norm_num at h₁ ⊢ <;>\n        (try omega) <;>\n        (try nlinarith)\n      <;>\n      (try\n        {\n          simp_all [pow_succ]\n          <;> nlinarith\n        })\n    exact h\n  \n  have h_a6 : a 6 = 7 := by\n    have h : a 6 = 7 := by\n      have h₁ : (a 6) ^ 3 = 343 := h₆\n      have h₂ : a 6 ≤ 7 := by\n        nlinarith [pow_two_nonneg (a 6), pow_two_nonneg (a 6 - 7)]\n      interval_cases a 6 <;> norm_num at h₁ ⊢ <;>\n        (try omega) <;>\n        (try nlinarith)\n      <;>\n      (try\n        {\n          simp_all [pow_succ]\n          <;> nlinarith\n        })\n    exact h\n  \n  have h_sum_main : ∑ k ∈ Finset.range 7, (6 * (a k)^2) - ↑(2 * ∑ k ∈ Finset.range 6, (a k)^2) = 658 := by\n    simp [Finset.sum_range_succ, h_a0, h_a1, h_a2, h_a3, h_a4, h_a5, h_a6]\n    <;> norm_num\n    <;> rfl\n  \n  exact h_sum_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2020_p7\n  (a : ℕ → ℕ)\n  (h₀ : (a 0)^3 = 1)\n  (h₁ : (a 1)^3 = 8)\n  (h₂ : (a 2)^3 = 27)\n  (h₃ : (a 3)^3 = 64)\n  (h₄ : (a 4)^3 = 125)\n  (h₅ : (a 5)^3 = 216)\n  (h₆ : (a 6)^3 = 343) :\n  ∑ k ∈ Finset.range 7, (6 * (a k)^2) - ↑(2 * ∑ k ∈ Finset.range 6, (a k)^2) = 658 := by\n  norm_num\n  have h₇ : ∀ k ≤ 6, a k = k + 1 := by\n    intro k hk\n    interval_cases k <;> simp_all [Nat.pow_succ]\n    <;> nlinarith\n  simp_all [Finset.sum_range_succ]",
    "orig_proof_length": 689,
    "simp_proof_length": 33
  },
  {
    "problem_id": "induction_sumkexp3eqsumksq",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem induction_sumkexp3eqsumksq\n  (n : ℕ) :\n  ∑ k ∈ Finset.range n, k^3 = (∑ k ∈ Finset.range n, k)^2 := by\n  have h_lemma : ∀ (m : ℕ), 2 * ∑ k in Finset.range m, k = m * (m - 1) := by\n    intro m\n    have h : ∀ m : ℕ, 2 * ∑ k in Finset.range m, k = m * (m - 1) := by\n      intro m\n      induction m with\n      | zero => simp\n      | succ m ih =>\n        cases m with\n        | zero => simp [Finset.sum_range_succ]\n        | succ m =>\n          simp_all [Finset.sum_range_succ, Nat.succ_eq_add_one, mul_add, mul_one, add_mul]\n          <;> ring_nf at *\n          <;> nlinarith\n    exact h m\n  \n  have h_main : ∑ k ∈ Finset.range n, k^3 = (∑ k ∈ Finset.range n, k)^2 := by\n    have h₁ : ∀ n : ℕ, ∑ k in Finset.range n, k ^ 3 = (∑ k in Finset.range n, k) ^ 2 := by\n      intro n\n      induction n with\n      | zero => simp\n      | succ n ih =>\n        rw [Finset.sum_range_succ, Finset.sum_range_succ]\n        simp [ih, pow_two, Nat.mul_add, Nat.add_mul]\n        have h₂ := h_lemma n\n        have h₃ : 2 * ∑ k in Finset.range n, k = n * (n - 1) := h_lemma n\n        have h₄ : n * (n - 1) = 2 * ∑ k in Finset.range n, k := by\n          linarith\n        cases n with\n        | zero => simp\n        | succ n =>\n          simp [Finset.sum_range_succ, pow_two, Nat.mul_add, Nat.add_mul, Nat.mul_one, Nat.mul_zero] at *\n          <;> ring_nf at *\n          <;> nlinarith\n    exact h₁ n\n  \n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem induction_sumkexp3eqsumksq\n  (n : ℕ) :\n  ∑ k ∈ Finset.range n, k^3 = (∑ k ∈ Finset.range n, k)^2 := by\n  induction n with\n  | zero => simp\n  | succ n ih =>\n    rw [Finset.sum_range_succ, Finset.sum_range_succ]\n    simp [ih]\n    ring_nf\n    have h_lemma : ∀ m : ℕ, 2 * ∑ k in Finset.range m, k = m * (m - 1) := by\n      intro m\n      induction m with\n      | zero => simp\n      | succ m ih =>\n        cases m with\n        | zero => simp [Finset.sum_range_succ]\n        | succ m =>\n          simp_all [Finset.sum_range_succ, Nat.succ_eq_add_one, mul_add, mul_one, add_mul]\n          <;> ring_nf at *\n    have h₁ := h_lemma n\n    have h₂ : n * (n - 1) = 2 * ∑ k in Finset.range n, k := by\n      linarith\n    cases n with\n    | zero => simp\n    | succ n =>\n      simp [Finset.sum_range_succ, pow_two, Nat.mul_add, Nat.add_mul, Nat.mul_one, Nat.mul_zero] at *\n      <;> ring_nf at *\n      <;> nlinarith",
    "orig_proof_length": 285,
    "simp_proof_length": 155
  },
  {
    "problem_id": "mathd_numbertheory_34",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_34\n  (x: ℕ)\n  (h₀ : x < 100)\n  (h₁ : x*9 % 100 = 1) :\n  x = 89 := by\n  have h₂ : x = 89 := by\n    have h₃ : x ≤ 99 := by linarith\n    interval_cases x <;> norm_num at h₁ ⊢ <;>\n      (try contradiction) <;>\n      (try omega)\n  exact h₂",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_34\n  (x: ℕ)\n  (h₀ : x < 100)\n  (h₁ : x*9 % 100 = 1) :\n  x = 89 := by\n  omega",
    "orig_proof_length": 36,
    "simp_proof_length": 1
  },
  {
    "problem_id": "imo_1981_p6",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem imo_1981_p6\n  (f : ℕ → ℕ → ℕ)\n  (g : ℕ → ℕ)\n  (h₀ : ∀ y, f 0 y = y + 1)\n  (h₁ : ∀ x, f (x + 1) 0 = f x 1)\n  (h₂ : ∀ x y, f (x + 1) (y + 1) = f x (f (x + 1) y))\n  (h₃ : g 0 = 2)\n  (h₄ : ∀ n, g (n + 1) = 2^(g n)) :\n  f 4 1981 = g 1983 - 3 := by\n  have h_f1 : ∀ y, f 1 y = y + 2 := by\n    intro y\n    have h : ∀ y, f 1 y = y + 2 := by\n      intro y\n      induction y with\n      | zero =>\n        have h₅ := h₁ 0\n        have h₆ := h₀ 1\n        simp at h₅ h₆ ⊢\n        <;> norm_num [h₅, h₆] at *\n        <;> linarith\n      | succ y ih =>\n        have h₅ := h₂ 0 y\n        have h₆ := h₀ (f 1 y)\n        have h₇ := h₁ 0\n        simp [ih] at h₅ h₆ h₇ ⊢\n        <;> ring_nf at *\n        <;> omega\n    exact h y\n  \n  have h_f2 : ∀ y, f 2 y = 2 * y + 3 := by\n    intro y\n    have h : ∀ y, f 2 y = 2 * y + 3 := by\n      intro y\n      induction y with\n      | zero =>\n        have h₅ := h₁ 1\n        have h₆ := h_f1 1\n        have h₇ := h₀ 1\n        simp at h₅ h₆ h₇ ⊢\n        <;> norm_num [h₅, h₆, h₇] at *\n        <;> linarith\n      | succ y ih =>\n        have h₅ := h₂ 1 y\n        have h₆ := h_f1 (f 2 y)\n        have h₇ := h₁ 1\n        simp [ih] at h₅ h₆ h₇ ⊢\n        <;> ring_nf at *\n        <;> omega\n    exact h y\n  \n  have h_f3_pow : ∀ y, f 3 y + 3 = 2 ^ (y + 3) := by\n    intro y\n    have h : ∀ y, f 3 y + 3 = 2 ^ (y + 3) := by\n      intro y\n      induction y with\n      | zero =>\n        have h₅ := h₁ 2\n        have h₆ := h_f2 1\n        have h₇ := h₂ 1 0\n        have h₈ := h₂ 2 0\n        have h₉ := h₂ 1 1\n        simp at h₅ h₆ h₇ h₈ h₉ ⊢\n        <;> norm_num [h₅, h₆, h₇, h₈, h₉, h_f1, h_f2] at *\n        <;> linarith\n      | succ y ih =>\n        have h₅ := h₂ 2 y\n        have h₆ := h_f2 (f 3 y)\n        have h₇ := h₁ 2\n        simp [ih] at h₅ h₆ h₇ ⊢\n        <;>\n          (try ring_nf at *) <;>\n          (try simp_all [pow_succ, mul_add, mul_one, Nat.mul_sub_left_distrib]) <;>\n          (try omega) <;>\n          (try ring_nf at *) <;>\n          (try norm_num at *) <;>\n          (try nlinarith)\n        <;>\n          (try\n            {\n              simp_all [pow_succ, mul_add, mul_one, Nat.mul_sub_left_distrib]\n              <;> ring_nf at *\n              <;> omega\n            })\n    exact h y\n  \n  have h_f4_g : ∀ y, f 4 y + 3 = g (y + 2) := by\n    intro y\n    have h : ∀ y, f 4 y + 3 = g (y + 2) := by\n      intro y\n      induction y with\n      | zero =>\n        have h₅ := h₁ 3\n        have h₆ := h_f3_pow 1\n        have h₇ := h₂ 2 0\n        have h₈ := h₂ 3 0\n        have h₉ := h₂ 2 1\n        have h₁₀ := h₂ 3 1\n        have h₁₁ := h₃\n        have h₁₂ := h₄ 0\n        have h₁₃ := h₄ 1\n        have h₁₄ := h₄ 2\n        simp at h₅ h₆ h₇ h₈ h₉ h₁₀ h₁₁ h₁₂ h₁₃ h₁₄ ⊢\n        <;> norm_num [h₅, h₆, h₇, h₈, h₉, h₁₀, h₁₁, h₁₂, h₁₃, h₁₄, h_f1, h_f2, h_f3_pow] at *\n        <;>\n          (try omega) <;>\n          (try ring_nf at *) <;>\n          (try norm_num at *) <;>\n          (try nlinarith)\n      | succ y ih =>\n        have h₅ := h₂ 3 y\n        have h₆ := h_f3_pow (f 4 y)\n        have h₇ := h₁ 3\n        have h₈ := h₄ (y + 2)\n        have h₉ := ih\n        simp [h₈, ih] at h₅ h₆ h₇ ⊢\n        <;>\n          (try ring_nf at *) <;>\n          (try simp_all [pow_succ, mul_add, mul_one, Nat.mul_sub_left_distrib]) <;>\n          (try omega) <;>\n          (try ring_nf at *) <;>\n          (try norm_num at *) <;>\n          (try nlinarith)\n        <;>\n          (try\n            {\n              simp_all [pow_succ, mul_add, mul_one, Nat.mul_sub_left_distrib]\n              <;> ring_nf at *\n              <;> omega\n            })\n    exact h y\n  \n  have h_main : f 4 1981 = g 1983 - 3 := by\n    have h₅ : f 4 1981 + 3 = g 1983 := by\n      have h₅₁ := h_f4_g 1981\n      norm_num at h₅₁ ⊢\n      <;> linarith\n    have h₆ : g 1983 ≥ 4 := by\n      have h₆₁ : ∀ n : ℕ, n ≥ 1 → g n ≥ 4 := by\n        intro n hn\n        induction' hn with n hn IH\n        · -- Base case: n = 1\n          norm_num [h₃, h₄]\n        · -- Inductive step: assume the statement holds for n, prove for n + 1\n          have h₆₂ : g (n + 1) = 2 ^ (g n) := h₄ n\n          rw [h₆₂]\n          have h₆₃ : g n ≥ 4 := IH\n          have h₆₄ : 2 ^ (g n) ≥ 2 ^ 4 := by\n            apply Nat.pow_le_pow_of_le_right\n            · norm_num\n            · linarith\n          have h₆₅ : 2 ^ 4 = 16 := by norm_num\n          have h₆₆ : 2 ^ (g n) ≥ 16 := by\n            linarith\n          linarith\n      have h₆₂ : 1983 ≥ 1 := by norm_num\n      have h₆₃ : g 1983 ≥ 4 := h₆₁ 1983 h₆₂\n      linarith\n    have h₇ : f 4 1981 = g 1983 - 3 := by\n      have h₇₁ : f 4 1981 + 3 = g 1983 := h₅\n      have h₇₂ : g 1983 ≥ 4 := h₆\n      have h₇₃ : f 4 1981 = g 1983 - 3 := by\n        have h₇₄ : g 1983 - 3 + 3 = g 1983 := by\n          have h₇₅ : g 1983 ≥ 3 := by linarith\n          have h₇₆ : g 1983 - 3 + 3 = g 1983 := by\n            have h₇₇ : g 1983 - 3 + 3 = g 1983 := by\n              omega\n            exact h₇₇\n          exact h₇₆\n        omega\n      exact h₇₃\n    exact h₇\n  \n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem imo_1981_p6\n  (f : ℕ → ℕ → ℕ)\n  (g : ℕ → ℕ)\n  (h₀ : ∀ y, f 0 y = y + 1)\n  (h₁ : ∀ x, f (x + 1) 0 = f x 1)\n  (h₂ : ∀ x y, f (x + 1) (y + 1) = f x (f (x + 1) y))\n  (h₃ : g 0 = 2)\n  (h₄ : ∀ n, g (n + 1) = 2^(g n)) :\n  f 4 1981 = g 1983 - 3 := by\n  have h₁₀ : ∀ y, f 1 y = y + 2 := by\n    intro y\n    induction y <;> simp_all\n  have h₁₁ : ∀ y, f 2 y = 2 * y + 3 := by\n    intro y\n    induction y <;> simp_all [h₁₀]\n    <;> ring\n  have h₁₂ : ∀ y, f 3 y + 3 = 2 ^ (y + 3) := by\n    intro y\n    induction y <;> simp_all [h₁₁]\n    <;> ring_nf at *\n    <;> omega\n  have h₁₃ : ∀ y, f 4 y + 3 = g (y + 2) := by\n    intro y\n    induction y <;> simp_all [h₁₂]\n    <;> ring_nf at *\n    <;> omega\n  have h₁₄ := h₁₃ 1981\n  norm_num at h₁₄\n  omega",
    "orig_proof_length": 1031,
    "simp_proof_length": 129
  },
  {
    "problem_id": "amc12b_2021_p4",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2021_p4\n  (m a : ℕ)\n  (h₀ : 0 < m ∧ 0 < a)\n  (h₁ : ↑m / ↑a = (3: ℝ) / 4) :\n  (84 * ↑m + 70 * ↑a) / (↑m + ↑a) = (76: ℝ) := by\n  have h₂ : (m : ℝ) = (3 / 4 : ℝ) * (a : ℝ) := by\n    have h₂₁ : (a : ℝ) ≠ 0 := by\n      have h₂₂ : 0 < a := h₀.2\n      exact by\n        norm_cast\n        <;> linarith\n    have h₂₂ : (m : ℝ) / (a : ℝ) = (3 : ℝ) / 4 := by exact_mod_cast h₁\n    have h₂₃ : (m : ℝ) = (3 / 4 : ℝ) * (a : ℝ) := by\n      field_simp at h₂₂ ⊢\n      <;> ring_nf at h₂₂ ⊢ <;>\n      (try norm_num at h₂₂ ⊢) <;>\n      (try linarith) <;>\n      (try nlinarith) <;>\n      (try ring_nf at h₂₂ ⊢ <;> nlinarith) <;>\n      nlinarith\n    exact h₂₃\n  \n  have h₃ : (84 : ℝ) * (m : ℝ) + (70 : ℝ) * (a : ℝ) = (133 : ℝ) * (a : ℝ) := by\n    have h₃₁ : (84 : ℝ) * (m : ℝ) + (70 : ℝ) * (a : ℝ) = (84 : ℝ) * ((3 / 4 : ℝ) * (a : ℝ)) + (70 : ℝ) * (a : ℝ) := by\n      rw [h₂]\n      <;> ring_nf\n    rw [h₃₁]\n    <;> ring_nf\n    <;> norm_num\n    <;> linarith\n  \n  have h₄ : (m : ℝ) + (a : ℝ) = (7 / 4 : ℝ) * (a : ℝ) := by\n    have h₄₁ : (m : ℝ) + (a : ℝ) = (3 / 4 : ℝ) * (a : ℝ) + (a : ℝ) := by\n      rw [h₂]\n      <;> ring_nf\n    rw [h₄₁]\n    <;> ring_nf\n    <;> field_simp\n    <;> ring_nf\n    <;> linarith\n  \n  have h₅ : (84 * (m : ℝ) + 70 * (a : ℝ)) / ((m : ℝ) + (a : ℝ)) = (76 : ℝ) := by\n    have h₅₁ : (m : ℝ) + (a : ℝ) ≠ 0 := by\n      have h₅₂ : 0 < (m : ℝ) := by exact_mod_cast h₀.1\n      have h₅₃ : 0 < (a : ℝ) := by exact_mod_cast h₀.2\n      linarith\n    rw [h₃, h₄]\n    have h₅₂ : (a : ℝ) ≠ 0 := by\n      have h₅₃ : 0 < a := h₀.2\n      exact by\n        norm_cast\n        <;> linarith\n    field_simp [h₅₁, h₅₂]\n    <;> ring_nf at *\n    <;> norm_num at *\n    <;> linarith\n  \n  simpa using h₅",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2021_p4\n  (m a : ℕ)\n  (h₀ : 0 < m ∧ 0 < a)\n  (h₁ : ↑m / ↑a = (3: ℝ) / 4) :\n  (84 * ↑m + 70 * ↑a) / (↑m + ↑a) = (76: ℝ) := by\n  have h₂ : (m : ℝ) = (3 / 4 : ℝ) * (a : ℝ) := by\n    field_simp [h₀.2.ne', h₀.1.ne'] at h₁ ⊢\n    linarith\n  rw [h₂]\n  ring_nf\n  <;> field_simp [h₀.2.ne', h₀.1.ne']\n  <;> linarith",
    "orig_proof_length": 485,
    "simp_proof_length": 48
  },
  {
    "problem_id": "mathd_algebra_432",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_432\n  (x : ℝ) :\n  (x + 3) * (2 * x - 6) = 2 * x^2 - 18 := by\n  have h_main : (x + 3) * (2 * x - 6) = 2 * x ^ 2 - 18 := by\n    ring_nf\n    <;>\n    norm_num\n    <;>\n    linarith\n  \n  apply h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_432\n  (x : ℝ) :\n  (x + 3) * (2 * x - 6) = 2 * x^2 - 18 := by\n  ring_nf",
    "orig_proof_length": 34,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_170",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_170\n  (S : Finset ℤ)\n  (h₀ : ∀ (n : ℤ), n ∈ S ↔ abs (n - 2) ≤ 5 + 6 / 10) :\n  S.card = 11 := by\n  have h₁ : ∀ (n : ℤ), n ∈ S ↔ -3 ≤ n ∧ n ≤ 7 := by\n    intro n\n    rw [h₀]\n    have h₂ : (6 : ℤ) / 10 = 0 := by norm_num\n    have h₃ : (5 : ℤ) + 6 / 10 = 5 := by norm_num\n    rw [h₃]\n    constructor\n    · -- Prove the forward direction: if |n - 2| ≤ 5, then -3 ≤ n ≤ 7\n      intro h\n      have h₄ : abs (n - 2) ≤ 5 := by simpa using h\n      have h₅ : -5 ≤ n - 2 := by\n        cases' abs_cases (n - 2) with h₅ h₅ <;> linarith\n      have h₆ : n - 2 ≤ 5 := by\n        cases' abs_cases (n - 2) with h₆ h₆ <;> linarith\n      constructor <;> linarith\n    · -- Prove the reverse direction: if -3 ≤ n ≤ 7, then |n - 2| ≤ 5\n      intro h\n      have h₄ : -3 ≤ n := h.1\n      have h₅ : n ≤ 7 := h.2\n      have h₆ : -5 ≤ n - 2 := by linarith\n      have h₇ : n - 2 ≤ 5 := by linarith\n      have h₈ : abs (n - 2) ≤ 5 := by\n        rw [abs_le]\n        constructor <;> linarith\n      simpa using h₈\n  \n  have h₂ : S = Finset.Icc (-3 : ℤ) 7 := by\n    apply Finset.ext\n    intro n\n    simp only [Finset.mem_Icc]\n    exact h₁ n\n  \n  have h₃ : S.card = 11 := by\n    rw [h₂]\n    rfl\n  \n  apply h₃",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_170\n  (S : Finset ℤ)\n  (h₀ : ∀ (n : ℤ), n ∈ S ↔ abs (n - 2) ≤ 5 + 6 / 10) :\n  S.card = 11 := by\n  have : S = Finset.Icc (-3) 7 := by\n    ext\n    simp_all [abs_le]\n    omega\n  simp_all",
    "orig_proof_length": 245,
    "simp_proof_length": 19
  },
  {
    "problem_id": "imo_1962_p2",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem imo_1962_p2\n  (x : ℝ)\n  (h₀ : 0 ≤ 3 - x)\n  (h₁ : 0 ≤ x + 1)\n  (h₂ : 1 / 2 < Real.sqrt (3 - x) - Real.sqrt (x + 1)) :\n  -1 ≤ x ∧ x < 1 - Real.sqrt 31 / 8 := by\n  have h_neg_one_le_x : -1 ≤ x := by\n    linarith\n  \n  have h_main : x < 1 - Real.sqrt 31 / 8 := by\n    by_contra! h\n    have h₃ : x ≥ 1 - Real.sqrt 31 / 8 := by linarith\n    have h₄ : Real.sqrt (3 - x) - Real.sqrt (x + 1) ≤ 1 / 2 := by\n      have h₅ : 0 ≤ Real.sqrt (3 - x) := Real.sqrt_nonneg (3 - x)\n      have h₆ : 0 ≤ Real.sqrt (x + 1) := Real.sqrt_nonneg (x + 1)\n      have h₇ : 0 ≤ Real.sqrt 31 := Real.sqrt_nonneg 31\n      -- Case distinction based on whether x ≥ 7/8\n      by_cases h₈ : x ≥ 7 / 8\n      · -- Case: x ≥ 7/8\n        have h₉ : (7 : ℝ) / 4 - 2 * x ≤ 0 := by\n          linarith\n        have h₁₀ : Real.sqrt (3 - x) ≤ 1 / 2 + Real.sqrt (x + 1) := by\n          have h₁₁ : 0 ≤ 1 / 2 + Real.sqrt (x + 1) := by positivity\n          have h₁₂ : 0 ≤ Real.sqrt (3 - x) := Real.sqrt_nonneg (3 - x)\n          nlinarith [Real.sq_sqrt (show 0 ≤ x + 1 by linarith), Real.sq_sqrt (show 0 ≤ 3 - x by linarith)]\n        linarith\n      · -- Case: x < 7/8\n        have h₉ : x < 7 / 8 := by linarith\n        have h₁₀ : (7 : ℝ) / 4 - 2 * x > 0 := by\n          linarith\n        have h₁₁ : (7 / 4 - 2 * x) ^ 2 ≤ x + 1 := by\n          have h₁₂ : x ≥ 1 - Real.sqrt 31 / 8 := h₃\n          have h₁₃ : (x - (1 - Real.sqrt 31 / 8)) ≥ 0 := by linarith\n          nlinarith [Real.sq_sqrt (show 0 ≤ 31 by norm_num), Real.sqrt_nonneg 31,\n            sq_nonneg (x - 1), sq_nonneg (x - (1 + Real.sqrt 31 / 8))]\n        have h₁₂ : 7 / 4 - 2 * x ≤ Real.sqrt (x + 1) := by\n          have h₁₃ : 0 ≤ 7 / 4 - 2 * x := by linarith\n          have h₁₄ : 0 ≤ Real.sqrt (x + 1) := Real.sqrt_nonneg (x + 1)\n          nlinarith [Real.sq_sqrt (show 0 ≤ x + 1 by linarith), h₁₁]\n        have h₁₃ : Real.sqrt (3 - x) ≤ 1 / 2 + Real.sqrt (x + 1) := by\n          have h₁₄ : 0 ≤ Real.sqrt (x + 1) := Real.sqrt_nonneg (x + 1)\n          have h₁₅ : 0 ≤ Real.sqrt (3 - x) := Real.sqrt_nonneg (3 - x)\n          have h₁₆ : 0 ≤ 1 / 2 + Real.sqrt (x + 1) := by positivity\n          nlinarith [Real.sq_sqrt (show 0 ≤ x + 1 by linarith), Real.sq_sqrt (show 0 ≤ 3 - x by linarith),\n            sq_nonneg (Real.sqrt (3 - x) - (1 / 2 + Real.sqrt (x + 1)))]\n        linarith\n    linarith\n  exact ⟨h_neg_one_le_x, h_main⟩",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem imo_1962_p2\n  (x : ℝ)\n  (h₀ : 0 ≤ 3 - x)\n  (h₁ : 0 ≤ x + 1)\n  (h₂ : 1 / 2 < Real.sqrt (3 - x) - Real.sqrt (x + 1)) :\n  -1 ≤ x ∧ x < 1 - Real.sqrt 31 / 8 := by\n  constructor\n  · linarith\n  · by_contra! h\n    have h₃ : 0 ≤ Real.sqrt (3 - x) := Real.sqrt_nonneg (3 - x)\n    have h₄ : 0 ≤ Real.sqrt (x + 1) := Real.sqrt_nonneg (x + 1)\n    by_cases h₅ : x ≥ 7 / 8\n    · have h₆ : Real.sqrt (3 - x) ≤ 1 / 2 + Real.sqrt (x + 1) := by\n        nlinarith [Real.sq_sqrt (show 0 ≤ x + 1 by linarith), Real.sq_sqrt (show 0 ≤ 3 - x by linarith)]\n      linarith\n    · have h₇ : x < 7 / 8 := by linarith\n      have h₈ : (7 / 4 - 2 * x) ^ 2 ≤ x + 1 := by\n        nlinarith [Real.sq_sqrt (show 0 ≤ 31 by norm_num), Real.sqrt_nonneg 31,\n          sq_nonneg (x - 1), sq_nonneg (x - (1 + Real.sqrt 31 / 8))]\n      have h₉ : 7 / 4 - 2 * x ≤ Real.sqrt (x + 1) := by\n        nlinarith [Real.sq_sqrt (show 0 ≤ x + 1 by linarith), h₈]\n      nlinarith [Real.sq_sqrt (show 0 ≤ x + 1 by linarith), Real.sq_sqrt (show 0 ≤ 3 - x by linarith),\n        h₉]",
    "orig_proof_length": 544,
    "simp_proof_length": 232
  },
  {
    "problem_id": "mathd_algebra_598",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_598\n  (a b c d : ℝ)\n  (h₁ : ((4:ℝ)^a) = 5)\n  (h₂ : ((5:ℝ)^b) = 6)\n  (h₃ : ((6:ℝ)^c) = 7)\n  (h₄ : ((7:ℝ)^d) = 8) :\n  a * b * c * d = 3 / 2 := by\n  have h₅ : (4:ℝ) ^ (a * b * c * d) = 8 := by\n    have h₅₁ : (4:ℝ) ^ (a * b * c * d) = (4:ℝ) ^ (a * b * c * d) := rfl\n    have h₅₂ : (4:ℝ) ^ (a * b * c * d) = ((4:ℝ) ^ a) ^ (b * c * d) := by\n      rw [← Real.rpow_mul] <;>\n      (try norm_num) <;>\n      (try ring_nf) <;>\n      (try linarith)\n      <;>\n      (try positivity)\n    have h₅₃ : ((4:ℝ) ^ a) ^ (b * c * d) = (5:ℝ) ^ (b * c * d) := by\n      rw [h₁]\n    have h₅₄ : (5:ℝ) ^ (b * c * d) = ((5:ℝ) ^ b) ^ (c * d) := by\n      rw [← Real.rpow_mul] <;>\n      (try norm_num) <;>\n      (try ring_nf) <;>\n      (try linarith)\n      <;>\n      (try positivity)\n    have h₅₅ : ((5:ℝ) ^ b) ^ (c * d) = (6:ℝ) ^ (c * d) := by\n      rw [h₂]\n    have h₅₆ : (6:ℝ) ^ (c * d) = ((6:ℝ) ^ c) ^ d := by\n      rw [← Real.rpow_mul] <;>\n      (try norm_num) <;>\n      (try ring_nf) <;>\n      (try linarith)\n      <;>\n      (try positivity)\n    have h₅₇ : ((6:ℝ) ^ c) ^ d = (7:ℝ) ^ d := by\n      rw [h₃]\n    have h₅₈ : (7:ℝ) ^ d = 8 := by\n      rw [h₄]\n    calc\n      (4:ℝ) ^ (a * b * c * d) = ((4:ℝ) ^ a) ^ (b * c * d) := by rw [h₅₂]\n      _ = (5:ℝ) ^ (b * c * d) := by rw [h₅₃]\n      _ = ((5:ℝ) ^ b) ^ (c * d) := by rw [h₅₄]\n      _ = (6:ℝ) ^ (c * d) := by rw [h₅₅]\n      _ = ((6:ℝ) ^ c) ^ d := by rw [h₅₆]\n      _ = (7:ℝ) ^ d := by rw [h₅₇]\n      _ = 8 := by rw [h₅₈]\n  \n  have h₆ : (a * b * c * d) * Real.log 4 = Real.log 8 := by\n    have h₆₁ : Real.log ((4:ℝ) ^ (a * b * c * d)) = Real.log 8 := by\n      rw [h₅]\n    have h₆₂ : Real.log ((4:ℝ) ^ (a * b * c * d)) = (a * b * c * d) * Real.log 4 := by\n      rw [Real.log_rpow (by norm_num : (4:ℝ) > 0)]\n      <;> ring_nf\n    rw [h₆₂] at h₆₁\n    linarith\n  \n  have h₇ : Real.log 8 = 3 * Real.log 2 := by\n    have h₇₁ : Real.log 8 = Real.log (2 ^ 3) := by norm_num\n    rw [h₇₁]\n    have h₇₂ : Real.log (2 ^ 3) = 3 * Real.log 2 := by\n      rw [Real.log_pow] <;> norm_num\n    rw [h₇₂]\n    <;>\n    norm_num\n  \n  have h₈ : Real.log 4 = 2 * Real.log 2 := by\n    have h₈₁ : Real.log 4 = Real.log (2 ^ 2) := by norm_num\n    rw [h₈₁]\n    have h₈₂ : Real.log (2 ^ 2) = 2 * Real.log 2 := by\n      rw [Real.log_pow] <;> norm_num\n    rw [h₈₂]\n    <;>\n    norm_num\n  \n  have h₉ : (a * b * c * d) * (2 * Real.log 2) = 3 * Real.log 2 := by\n    have h₉₁ : (a * b * c * d) * Real.log 4 = Real.log 8 := h₆\n    have h₉₂ : Real.log 8 = 3 * Real.log 2 := h₇\n    have h₉₃ : Real.log 4 = 2 * Real.log 2 := h₈\n    calc\n      (a * b * c * d) * (2 * Real.log 2) = (a * b * c * d) * Real.log 4 := by\n        rw [h₉₃]\n        <;> ring_nf\n      _ = Real.log 8 := by\n        linarith\n      _ = 3 * Real.log 2 := by\n        rw [h₉₂]\n  \n  have h₁₀ : Real.log 2 ≠ 0 := by\n    have h₁₀₁ : Real.log 2 > 0 := Real.log_pos (by norm_num)\n    linarith\n  \n  have h₁₁ : (a * b * c * d) * 2 = 3 := by\n    have h₁₁₁ : (a * b * c * d) * (2 * Real.log 2) = 3 * Real.log 2 := h₉\n    have h₁₁₂ : Real.log 2 ≠ 0 := h₁₀\n    have h₁₁₃ : (a * b * c * d) * 2 * Real.log 2 = 3 * Real.log 2 := by\n      linarith\n    have h₁₁₄ : (a * b * c * d) * 2 = 3 := by\n      apply mul_left_cancel₀ h₁₁₂\n      linarith\n    exact h₁₁₄\n  \n  have h₁₂ : a * b * c * d = 3 / 2 := by\n    have h₁₂₁ : (a * b * c * d) * 2 = 3 := h₁₁\n    have h₁₂₂ : a * b * c * d = 3 / 2 := by\n      apply mul_left_cancel₀ (show (2 : ℝ) ≠ 0 by norm_num)\n      linarith\n    exact h₁₂₂\n  \n  apply h₁₂",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_598\n  (a b c d : ℝ)\n  (h₁ : ((4:ℝ)^a) = 5)\n  (h₂ : ((5:ℝ)^b) = 6)\n  (h₃ : ((6:ℝ)^c) = 7)\n  (h₄ : ((7:ℝ)^d) = 8) :\n  a * b * c * d = 3 / 2 := by\n  have : (4:ℝ) ^ (a * b * c * d) = 8 := by\n    rw [show a * b * c * d = a * (b * (c * d)) by ring]\n    rw [Real.rpow_mul] <;> norm_num <;>\n    simp_all [Real.rpow_mul]\n  have h₆ : (a * b * c * d) * Real.log 4 = Real.log 8 := by\n    rw [← Real.log_rpow]\n    · simp_all\n    · norm_num\n  have h₇ : Real.log 8 = 3 * Real.log 2 := by\n    rw [← Real.log_rpow] <;> norm_num <;> linarith\n  have h₈ : Real.log 4 = 2 * Real.log 2 := by\n    rw [← Real.log_rpow] <;> norm_num <;> linarith\n  rw [h₈] at h₆\n  have h₉ : (a * b * c * d) * 2 = 3 := by\n    apply mul_left_cancel₀ (show (Real.log 2 : ℝ) ≠ 0 by\n      have : Real.log 2 > 0 := Real.log_pos (by norm_num)\n      linarith)\n    linarith\n  linarith",
    "orig_proof_length": 1059,
    "simp_proof_length": 181
  },
  {
    "problem_id": "algebra_bleqa_apbon2msqrtableqambsqon8b",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_bleqa_apbon2msqrtableqambsqon8b\n  (a b : ℝ)\n  (h₀ : 0 < a ∧ 0 < b)\n  (h₁ : b ≤ a) :\n  (a + b) / 2 - Real.sqrt (a * b) ≤ (a - b)^2 / (8 * b) := by\n  have h₂ : 0 < b := by linarith\n  have h₃ : 0 < a := by linarith\n  have h₄ : 0 < a * b := by positivity\n  have h₅ : 0 < Real.sqrt (a * b) := Real.sqrt_pos.mpr h₄\n  have h₆ : 4 * b * (a + b) - 8 * b * Real.sqrt (a * b) ≤ (a - b)^2 := by\n    have h₆₁ : 0 ≤ Real.sqrt (a * b) := Real.sqrt_nonneg _\n    have h₆₂ : 0 ≤ a := by linarith\n    have h₆₃ : 0 ≤ b := by linarith\n    have h₆₄ : (a + b - 2 * Real.sqrt (a * b)) ≥ 0 := by\n      -- Prove that (a + b - 2 * Real.sqrt (a * b)) ≥ 0\n      have h₆₄₁ : Real.sqrt (a * b) ≤ (a + b) / 2 := by\n        -- Use AM-GM inequality\n        have h₆₄₂ : 0 ≤ (a - b) ^ 2 := sq_nonneg (a - b)\n        have h₆₄₃ : Real.sqrt (a * b) ≤ (a + b) / 2 := by\n          nlinarith [Real.sq_sqrt (show 0 ≤ a * b by positivity),\n            sq_nonneg (a - b)]\n        linarith\n      nlinarith [Real.sqrt_nonneg (a * b)]\n    have h₆₅ : (a - 3 * b + 2 * Real.sqrt (a * b)) ≥ 0 := by\n      -- Prove that (a - 3 * b + 2 * Real.sqrt (a * b)) ≥ 0\n      have h₆₅₁ : Real.sqrt (a * b) ≥ b := by\n        -- Prove that Real.sqrt (a * b) ≥ b\n        apply Real.le_sqrt_of_sq_le\n        have h₆₅₂ : (b : ℝ) ^ 2 ≤ a * b := by\n          nlinarith\n        nlinarith\n      nlinarith [h₆₅₁]\n    have h₆₆ : (a + b - 2 * Real.sqrt (a * b)) * (a - 3 * b + 2 * Real.sqrt (a * b)) ≥ 0 := by\n      -- Product of two non-negative numbers is non-negative\n      nlinarith [h₆₄, h₆₅]\n    have h₆₇ : (a + b - 2 * Real.sqrt (a * b)) * (a - 3 * b + 2 * Real.sqrt (a * b)) = a^2 - 6 * a * b - 3 * b^2 + 8 * b * Real.sqrt (a * b) := by\n      -- Expand the product\n      ring_nf\n      <;>\n      (try norm_num) <;>\n      (try ring_nf at *) <;>\n      (try nlinarith [Real.sq_sqrt (show 0 ≤ a * b by positivity)]) <;>\n      (try field_simp [h₃.ne', h₂.ne']) <;>\n      (try nlinarith)\n      <;>\n      (try\n        {\n          nlinarith [Real.sq_sqrt (show 0 ≤ a * b by positivity)]\n        })\n    have h₆₈ : a^2 - 6 * a * b - 3 * b^2 + 8 * b * Real.sqrt (a * b) ≥ 0 := by\n      -- Use the fact that the product is non-negative\n      linarith\n    have h₆₉ : (a - b)^2 - (4 * b * (a + b) - 8 * b * Real.sqrt (a * b)) = a^2 - 6 * a * b - 3 * b^2 + 8 * b * Real.sqrt (a * b) := by\n      -- Expand and simplify\n      ring_nf\n      <;>\n      (try norm_num) <;>\n      (try ring_nf at *) <;>\n      (try nlinarith [Real.sq_sqrt (show 0 ≤ a * b by positivity)]) <;>\n      (try field_simp [h₃.ne', h₂.ne']) <;>\n      (try nlinarith)\n      <;>\n      (try\n        {\n          nlinarith [Real.sq_sqrt (show 0 ≤ a * b by positivity)]\n        })\n    have h₆₁₀ : (a - b)^2 - (4 * b * (a + b) - 8 * b * Real.sqrt (a * b)) ≥ 0 := by\n      -- Use the previous result\n      linarith\n    linarith\n  \n  have h₇ : (a + b) / 2 - Real.sqrt (a * b) ≤ (a - b)^2 / (8 * b) := by\n    have h₇₁ : 0 < 8 * b := by positivity\n    have h₇₂ : (a + b) / 2 - Real.sqrt (a * b) ≤ (a - b)^2 / (8 * b) := by\n      -- Divide both sides of the inequality in h₆ by 8 * b to get the desired result\n      have h₇₃ : 4 * b * (a + b) - 8 * b * Real.sqrt (a * b) ≤ (a - b)^2 := h₆\n      have h₇₄ : (4 * b * (a + b) - 8 * b * Real.sqrt (a * b)) / (8 * b) ≤ (a - b)^2 / (8 * b) := by\n        -- Divide both sides by 8 * b (positive)\n        apply (div_le_div_right h₇₁).mpr\n        linarith\n      have h₇₅ : (4 * b * (a + b) - 8 * b * Real.sqrt (a * b)) / (8 * b) = (a + b) / 2 - Real.sqrt (a * b) := by\n        -- Simplify the left side\n        field_simp [h₂.ne']\n        <;> ring_nf\n        <;> field_simp [h₂.ne']\n        <;> ring_nf\n        <;> linarith\n      linarith\n    exact h₇₂\n  \n  exact h₇",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_bleqa_apbon2msqrtableqambsqon8b\n  (a b : ℝ)\n  (h₀ : 0 < a ∧ 0 < b)\n  (h₁ : b ≤ a) :\n  (a + b) / 2 - Real.sqrt (a * b) ≤ (a - b)^2 / (8 * b) := by\n  have : 0 < Real.sqrt (a * b) := Real.sqrt_pos.mpr (by nlinarith)\n  field_simp\n  rw [div_le_div_iff] <;> nlinarith [sq_sqrt (show 0 ≤ a * b by nlinarith),\n    sq_nonneg (a - b), sq_nonneg (a + b - 2 * Real.sqrt (a * b))]",
    "orig_proof_length": 897,
    "simp_proof_length": 59
  },
  {
    "problem_id": "mathd_algebra_276",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_276\n  (a b : ℤ)\n  (h₀ : ∀ x : ℝ, 10 * x^2 - x - 24 = (a * x - 8) * (b * x + 3)) :\n  a * b + b = 12 := by\n  have h₁ : (a - 8 : ℤ) * (b + 3 : ℤ) = -15 := by\n    have h₁₀ := h₀ 1\n    norm_num at h₁₀ ⊢\n    ring_nf at h₁₀ ⊢\n    norm_cast at h₁₀ ⊢\n    <;>\n    (try norm_num at h₁₀ ⊢) <;>\n    (try ring_nf at h₁₀ ⊢) <;>\n    (try norm_cast at h₁₀ ⊢) <;>\n    (try linarith) <;>\n    (try nlinarith) <;>\n    (try\n      {\n        simp_all [mul_comm, mul_assoc, mul_left_comm]\n        <;> ring_nf at *\n        <;> norm_cast at *\n        <;> nlinarith\n      })\n    <;>\n    (try\n      {\n        simp_all [mul_comm, mul_assoc, mul_left_comm]\n        <;> ring_nf at *\n        <;> norm_cast at *\n        <;> nlinarith\n      })\n  \n  have h₂ : (2 * a - 8 : ℤ) * (2 * b + 3 : ℤ) = 14 := by\n    have h₂₀ := h₀ 2\n    norm_num at h₂₀ ⊢\n    ring_nf at h₂₀ ⊢\n    norm_cast at h₂₀ ⊢\n    <;>\n    (try norm_num at h₂₀ ⊢) <;>\n    (try ring_nf at h₂₀ ⊢) <;>\n    (try norm_cast at h₂₀ ⊢) <;>\n    (try linarith) <;>\n    (try nlinarith) <;>\n    (try\n      {\n        simp_all [mul_comm, mul_assoc, mul_left_comm]\n        <;> ring_nf at *\n        <;> norm_cast at *\n        <;> nlinarith\n      })\n    <;>\n    (try\n      {\n        simp_all [mul_comm, mul_assoc, mul_left_comm]\n        <;> ring_nf at *\n        <;> norm_cast at *\n        <;> nlinarith\n      })\n  \n  have h₃ : (a : ℤ) * b + 3 * a - 8 * b = 9 := by\n    have h₃₁ : (a - 8 : ℤ) * (b + 3 : ℤ) = -15 := h₁\n    have h₃₂ : (a : ℤ) * b + 3 * a - 8 * b = 9 := by\n      ring_nf at h₃₁ ⊢\n      linarith\n    exact h₃₂\n  \n  have h₄ : 4 * (a : ℤ) * b + 6 * a - 16 * b = 38 := by\n    have h₄₁ : (2 * a - 8 : ℤ) * (2 * b + 3 : ℤ) = 14 := h₂\n    have h₄₂ : 4 * (a : ℤ) * b + 6 * a - 16 * b = 38 := by\n      ring_nf at h₄₁ ⊢\n      linarith\n    exact h₄₂\n  \n  have h₅ : 3 * (a : ℤ) - 8 * b = -1 := by\n    have h₅₁ : (a : ℤ) * b + 3 * a - 8 * b = 9 := h₃\n    have h₅₂ : 4 * (a : ℤ) * b + 6 * a - 16 * b = 38 := h₄\n    have h₅₃ : 3 * (a : ℤ) - 8 * b = -1 := by\n      have h₅₄ := h₅₂\n      have h₅₅ := h₅₁\n      ring_nf at h₅₄ h₅₅ ⊢\n      nlinarith\n    exact h₅₃\n  \n  have h₆ : (a : ℤ) * b = 10 := by\n    have h₆₁ : (a : ℤ) * b + 3 * a - 8 * b = 9 := h₃\n    have h₆₂ : 3 * (a : ℤ) - 8 * b = -1 := h₅\n    have h₆₃ : (a : ℤ) * b = 10 := by\n      have h₆₄ := h₆₁\n      have h₆₅ := h₆₂\n      ring_nf at h₆₄ h₆₅ ⊢\n      nlinarith\n    exact h₆₃\n  \n  have h₇ : 3 * (a : ℤ)^2 + a - 80 = 0 := by\n    have h₇₁ : 3 * (a : ℤ) - 8 * b = -1 := h₅\n    have h₇₂ : (a : ℤ) * b = 10 := h₆\n    have h₇₃ : 3 * (a : ℤ)^2 + a - 80 = 0 := by\n      have h₇₄ : b = (3 * a + 1) / 8 := by\n        have h₇₅ : 3 * (a : ℤ) - 8 * b = -1 := h₅\n        have h₇₆ : 8 * b = 3 * a + 1 := by linarith\n        have h₇₇ : b = (3 * a + 1) / 8 := by\n          have h₇₈ : (3 * a + 1 : ℤ) % 8 = 0 := by\n            omega\n          have h₇₉ : b = (3 * a + 1) / 8 := by\n            omega\n          exact h₇₉\n        exact h₇₇\n      have h₇₈ : (a : ℤ) * b = 10 := h₆\n      rw [h₇₄] at h₇₈\n      ring_nf at h₇₈ ⊢\n      norm_num at h₇₈ ⊢\n      <;>\n      (try omega) <;>\n      (try\n        {\n          have h₇₉ : a ≤ 10 := by\n            nlinarith\n          have h₈₀ : a ≥ -10 := by\n            nlinarith\n          interval_cases a <;> norm_num at h₇₈ ⊢ <;> omega\n        }) <;>\n      (try\n        {\n          nlinarith\n        })\n      <;>\n      (try omega)\n      <;>\n      (try\n        {\n          ring_nf at h₇₈ ⊢\n          norm_num at h₇₈ ⊢\n          <;>\n          omega\n        })\n    exact h₇₃\n  \n  have h₈ : a = 5 := by\n    have h₈₁ : 3 * (a : ℤ)^2 + a - 80 = 0 := h₇\n    have h₈₂ : a = 5 := by\n      have h₈₃ : a ≤ 16 := by\n        nlinarith\n      have h₈₄ : a ≥ -16 := by\n        nlinarith\n      interval_cases a <;> norm_num at h₈₁ ⊢ <;>\n        (try omega) <;>\n        (try nlinarith)\n    exact h₈₂\n  \n  have h₉ : b = 2 := by\n    have h₉₁ : (a : ℤ) * b = 10 := h₆\n    have h₉₂ : 3 * (a : ℤ) - 8 * b = -1 := h₅\n    have h₉₃ : a = 5 := h₈\n    rw [h₉₃] at h₉₁ h₉₂\n    norm_num at h₉₁ h₉₂ ⊢\n    <;>\n    (try omega) <;>\n    (try nlinarith)\n  \n  have h₁₀ : a * b + b = 12 := by\n    have h₁₀₁ : a = 5 := h₈\n    have h₁₀₂ : b = 2 := h₉\n    rw [h₁₀₁, h₁₀₂]\n    <;> norm_num\n  \n  exact h₁₀",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_276\n  (a b : ℤ)\n  (h₀ : ∀ x : ℝ, 10 * x^2 - x - 24 = (a * x - 8) * (b * x + 3)) :\n  a * b + b = 12 := by\n  have h₁ : (a - 8 : ℤ) * (b + 3 : ℤ) = -15 := by\n    have h₁₀ := h₀ 1\n    ring_nf at h₁₀ ⊢\n    norm_cast at h₁₀ ⊢\n    linarith\n  have h₂ : (2 * a - 8 : ℤ) * (2 * b + 3 : ℤ) = 14 := by\n    have h₂₀ := h₀ 2\n    ring_nf at h₂₀ ⊢\n    norm_cast at h₂₀ ⊢\n    linarith\n  have h₃ : (a : ℤ) * b + 3 * a - 8 * b = 9 := by\n    ring_nf at h₁ h₂ ⊢\n    linarith\n  have h₄ : 4 * (a : ℤ) * b + 6 * a - 16 * b = 38 := by\n    ring_nf at h₁ h₂ h₃ ⊢\n    linarith\n  have h₅ : 3 * (a : ℤ) - 8 * b = -1 := by\n    ring_nf at h₁ h₂ h₃ h₄ ⊢\n    nlinarith\n  have h₆ : (a : ℤ) * b = 10 := by\n    ring_nf at h₁ h₂ h₃ h₄ h₅ ⊢\n    nlinarith\n  have h₇ : 3 * (a : ℤ)^2 + a - 80 = 0 := by\n    ring_nf at h₁ h₂ h₃ h₄ h₅ h₆ ⊢\n    nlinarith\n  have h₈ : a = 5 := by\n    have h₈₁ : a ≤ 16 := by\n      nlinarith\n    have h₈₂ : a ≥ -16 := by\n      nlinarith\n    interval_cases a <;> norm_num at h₇ ⊢ \n  have h₉ : b = 2 := by\n    rw [h₈] at h₆\n    norm_num at h₆ ⊢\n    linarith\n  rw [h₈, h₉]\n  <;> norm_num",
    "orig_proof_length": 1056,
    "simp_proof_length": 277
  },
  {
    "problem_id": "mathd_numbertheory_435",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_435\n  (k : ℕ)\n  (h₀ : 0 < k)\n  (h₁ : ∀ n, Nat.gcd (6 * n + k) (6 * n + 3) = 1)\n  (h₂ : ∀ n, Nat.gcd (6 * n + k) (6 * n + 2) = 1)\n  (h₃ : ∀ n, Nat.gcd (6 * n + k) (6 * n + 1) = 1) :\n  5 ≤ k := by\n  have h_main : 5 ≤ k := by\n    by_contra! h\n    have h₄ : k ≤ 4 := by linarith\n    have h₅ : k = 1 ∨ k = 2 ∨ k = 3 ∨ k = 4 := by\n      omega\n    rcases h₅ with (rfl | rfl | rfl | rfl)\n    · -- Case k = 1\n      have h₆ := h₃ 1\n      norm_num at h₆\n      <;> contradiction\n    · -- Case k = 2\n      have h₆ := h₂ 0\n      norm_num at h₆\n      <;> contradiction\n    · -- Case k = 3\n      have h₆ := h₁ 0\n      norm_num at h₆\n      <;> contradiction\n    · -- Case k = 4\n      have h₆ := h₂ 0\n      norm_num at h₆\n      <;> contradiction\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_435\n  (k : ℕ)\n  (h₀ : 0 < k)\n  (h₁ : ∀ n, Nat.gcd (6 * n + k) (6 * n + 3) = 1)\n  (h₂ : ∀ n, Nat.gcd (6 * n + k) (6 * n + 2) = 1)\n  (h₃ : ∀ n, Nat.gcd (6 * n + k) (6 * n + 1) = 1) :\n  5 ≤ k := by\n  by_contra! h\n  interval_cases k <;> simp_all\n  <;> have h₂' := h₂ 0 <;> simp_all",
    "orig_proof_length": 99,
    "simp_proof_length": 15
  },
  {
    "problem_id": "amc12b_2020_p6",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2020_p6\n  (n : ℕ)\n  (h₀ : 9 ≤ n) :\n  ∃ (x : ℕ), (x : ℝ)^2 = (Nat.factorial (n + 2) - Nat.factorial (n + 1)) / n ! := by\n  have h₁ : ((Nat.factorial (n + 2) - Nat.factorial (n + 1) : ℝ) / (n ! : ℝ)) = ((n + 1 : ℝ)^2) := by\n    have h₂ : (Nat.factorial (n + 2) : ℝ) = (n + 2 : ℝ) * (Nat.factorial (n + 1) : ℝ) := by\n      norm_cast\n      <;> simp [Nat.factorial_succ, mul_comm]\n      <;> ring_nf\n      <;> norm_num\n      <;> linarith\n    have h₃ : (Nat.factorial (n + 1) : ℝ) = (n + 1 : ℝ) * (n ! : ℝ) := by\n      norm_cast\n      <;> simp [Nat.factorial_succ, mul_comm]\n      <;> ring_nf\n      <;> norm_num\n      <;> linarith\n    calc\n      ((Nat.factorial (n + 2) - Nat.factorial (n + 1) : ℝ) / (n ! : ℝ))\n        = (((n + 2 : ℝ) * (Nat.factorial (n + 1) : ℝ) - (Nat.factorial (n + 1) : ℝ)) / (n ! : ℝ)) := by\n          rw [h₂]\n          <;> ring_nf\n        _ = (((n + 2 : ℝ) - 1) * (Nat.factorial (n + 1) : ℝ) / (n ! : ℝ)) := by\n          ring_nf\n          <;> field_simp\n          <;> ring_nf\n        _ = ((n + 1 : ℝ) * (Nat.factorial (n + 1) : ℝ) / (n ! : ℝ)) := by\n          ring_nf\n          <;> field_simp\n          <;> ring_nf\n        _ = ((n + 1 : ℝ) * ((n + 1 : ℝ) * (n ! : ℝ)) / (n ! : ℝ)) := by\n          rw [h₃]\n          <;> ring_nf\n        _ = ((n + 1 : ℝ) * (n + 1 : ℝ)) := by\n          have h₄ : (n ! : ℝ) ≠ 0 := by\n            norm_cast\n            <;> apply Nat.cast_ne_zero.mpr\n            <;> apply Nat.factorial_ne_zero\n          field_simp [h₄]\n          <;> ring_nf\n          <;> field_simp [h₄]\n          <;> ring_nf\n        _ = ((n + 1 : ℝ) ^ 2) := by\n          ring_nf\n  \n  have h₂ : ∃ (x : ℕ), (x : ℝ)^2 = (Nat.factorial (n + 2) - Nat.factorial (n + 1)) / n ! := by\n    use n + 1\n    have h₃ : ((n + 1 : ℕ) : ℝ) ^ 2 = ((n + 1 : ℝ) ^ 2) := by\n      norm_cast\n    have h₄ : ((Nat.factorial (n + 2) - Nat.factorial (n + 1) : ℝ) / (n ! : ℝ)) = ((n + 1 : ℝ) ^ 2) := h₁\n    have h₅ : ((n + 1 : ℕ) : ℝ) ^ 2 = (Nat.factorial (n + 2) - Nat.factorial (n + 1)) / n ! := by\n      calc\n        ((n + 1 : ℕ) : ℝ) ^ 2 = ((n + 1 : ℝ) ^ 2) := by norm_cast\n        _ = ((Nat.factorial (n + 2) - Nat.factorial (n + 1) : ℝ) / (n ! : ℝ)) := by\n          rw [h₄]\n          <;> norm_num\n        _ = (Nat.factorial (n + 2) - Nat.factorial (n + 1)) / n ! := by\n          norm_cast\n          <;> field_simp [Nat.cast_ne_zero]\n          <;> ring_nf\n          <;> norm_num\n          <;> simp_all [Nat.factorial_succ]\n          <;> linarith\n    exact_mod_cast h₅\n  \n  exact h₂",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2020_p6\n  (n : ℕ)\n  (h₀ : 9 ≤ n) :\n  ∃ (x : ℕ), (x : ℝ)^2 = (Nat.factorial (n + 2) - Nat.factorial (n + 1)) / n ! := by\n  use n + 1\n  field_simp [Nat.factorial]\n  ring",
    "orig_proof_length": 663,
    "simp_proof_length": 9
  },
  {
    "problem_id": "algebra_others_exirrpowirrrat",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_others_exirrpowirrrat :\n  ∃ a b, Irrational a ∧ Irrational b ∧ ¬ Irrational (a^b) := by\n  have h_main : ∃ (a b : ℝ), Irrational a ∧ Irrational b ∧ ¬Irrational (a ^ b) := by\n    by_cases h : Irrational ((Real.sqrt 2 : ℝ) ^ (Real.sqrt 2 : ℝ))\n    · -- Case 2: (√2)^√2 is irrational\n      have h₁ : Irrational ((Real.sqrt 2 : ℝ) ^ (Real.sqrt 2 : ℝ)) := h\n      have h₂ : Irrational (Real.sqrt 2 : ℝ) := by\n        apply Nat.Prime.irrational_sqrt\n        <;> norm_num\n      have h₃ : ¬Irrational (((Real.sqrt 2 : ℝ) ^ (Real.sqrt 2 : ℝ)) ^ (Real.sqrt 2 : ℝ)) := by\n        have h₄ : ((Real.sqrt 2 : ℝ) ^ (Real.sqrt 2 : ℝ)) ^ (Real.sqrt 2 : ℝ) = (2 : ℝ) := by\n          have h₅ : 0 < (Real.sqrt 2 : ℝ) := Real.sqrt_pos.mpr (by norm_num)\n          have h₆ : ((Real.sqrt 2 : ℝ) ^ (Real.sqrt 2 : ℝ)) ^ (Real.sqrt 2 : ℝ) = (Real.sqrt 2 : ℝ) ^ ((Real.sqrt 2 : ℝ) * (Real.sqrt 2 : ℝ)) := by\n            rw [← Real.rpow_mul (le_of_lt h₅)]\n            <;> ring_nf\n          rw [h₆]\n          have h₇ : (Real.sqrt 2 : ℝ) * (Real.sqrt 2 : ℝ) = (2 : ℝ) := by\n            nlinarith [Real.sq_sqrt (show 0 ≤ (2 : ℝ) by norm_num)]\n          rw [h₇]\n          have h₈ : (Real.sqrt 2 : ℝ) ^ (2 : ℝ) = (2 : ℝ) := by\n            have h₉ : (Real.sqrt 2 : ℝ) ^ (2 : ℝ) = (Real.sqrt 2 : ℝ) ^ 2 := by\n              norm_cast\n            rw [h₉]\n            nlinarith [Real.sq_sqrt (show 0 ≤ (2 : ℝ) by norm_num)]\n          rw [h₈]\n        rw [h₄]\n        intro h₉\n        exact h₉ ⟨2, by norm_num⟩\n      refine' ⟨(Real.sqrt 2 : ℝ) ^ (Real.sqrt 2 : ℝ), (Real.sqrt 2 : ℝ), h₁, h₂, h₃⟩\n    · -- Case 1: (√2)^√2 is rational\n      have h₁ : ¬Irrational ((Real.sqrt 2 : ℝ) ^ (Real.sqrt 2 : ℝ)) := h\n      have h₂ : Irrational (Real.sqrt 2 : ℝ) := by\n        apply Nat.Prime.irrational_sqrt\n        <;> norm_num\n      have h₃ : ¬Irrational ((Real.sqrt 2 : ℝ) ^ (Real.sqrt 2 : ℝ)) := h₁\n      refine' ⟨(Real.sqrt 2 : ℝ), (Real.sqrt 2 : ℝ), h₂, h₂, h₃⟩\n  \n  obtain ⟨a, b, ha, hb, hab⟩ := h_main\n  refine' ⟨a, b, ha, hb, _⟩\n  exact hab",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_others_exirrpowirrrat :\n  ∃ a b, Irrational a ∧ Irrational b ∧ ¬ Irrational (a^b) := by\n  by_cases h : Irrational (Real.sqrt 2 ^ Real.sqrt 2)\n  · use Real.sqrt 2 ^ Real.sqrt 2, Real.sqrt 2\n    exact ⟨h, irrational_sqrt_two, by simp [← Real.rpow_mul]⟩\n  · use Real.sqrt 2, Real.sqrt 2\n    exact ⟨irrational_sqrt_two, irrational_sqrt_two, h⟩",
    "orig_proof_length": 502,
    "simp_proof_length": 49
  },
  {
    "problem_id": "mathd_algebra_427",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_427\n  (x y z : ℝ)\n  (h₀ : 3 * x + y = 17)\n  (h₁ : 5 * y + z = 14)\n  (h₂ : 3 * x + 5 * z = 41) :\n  x + y + z = 12 := by\n  have h_sum : x + y + z = 12 := by\n    have h₃ : (3 * x + y) + (5 * y + z) + (3 * x + 5 * z) = 17 + 14 + 41 := by\n      linarith\n    have h₄ : 6 * (x + y + z) = 72 := by\n      linarith\n    have h₅ : x + y + z = 12 := by\n      linarith\n    exact h₅\n  exact h_sum",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_427\n  (x y z : ℝ)\n  (h₀ : 3 * x + y = 17)\n  (h₁ : 5 * y + z = 14)\n  (h₂ : 3 * x + 5 * z = 41) :\n  x + y + z = 12 := by\n  linarith",
    "orig_proof_length": 83,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_76",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_76\n  (f : ℤ → ℤ)\n  (h₀ : ∀n, Odd n → f n = n^2)\n  (h₁ : ∀ n, Even n → f n = n^2 - 4*n -1) :\n  f 4 = -1 := by\n  have h_main : f 4 = -1 := by\n    have h₂ : Even (4 : ℤ) := by\n      -- Prove that 4 is even\n      use 2\n      <;> norm_num\n    -- Use the definition of f for even numbers\n    have h₃ : f 4 = (4 : ℤ)^2 - 4*(4 : ℤ) - 1 := by\n      apply h₁\n      exact h₂\n    -- Simplify the expression\n    rw [h₃]\n    norm_num\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_76\n  (f : ℤ → ℤ)\n  (h₀ : ∀n, Odd n → f n = n^2)\n  (h₁ : ∀ n, Even n → f n = n^2 - 4*n -1) :\n  f 4 = -1 := by\n  apply h₁\n  decide",
    "orig_proof_length": 64,
    "simp_proof_length": 3
  },
  {
    "problem_id": "mathd_numbertheory_99",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_99\n  (n : ℕ)\n  (h₀ : (2 * n) % 47 = 15) :\n  n % 47 = 31 := by\n  have h₁ : n % 47 = 31 := by\n    have h₂ : (2 * n) % 47 = 15 := h₀\n    -- We know that 2 * 24 ≡ 1 mod 47, so we can multiply both sides by 24 to get n ≡ 24 * 15 mod 47\n    -- 24 * 15 = 360 ≡ 31 mod 47, so n ≡ 31 mod 47\n    have h₃ : n % 47 = 31 := by\n      -- Use the fact that 2 * n ≡ 15 mod 47 to find n mod 47\n      have h₄ : (2 * n) % 47 = 15 := h₂\n      -- We can use the `omega` tactic to solve the linear congruence\n      have h₅ : n % 47 = 31 := by\n        -- Use the fact that 2 * n ≡ 15 mod 47 to find n mod 47\n        omega\n      exact h₅\n    exact h₃\n  exact h₁",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_99\n  (n : ℕ)\n  (h₀ : (2 * n) % 47 = 15) :\n  n % 47 = 31 := by\n  omega",
    "orig_proof_length": 70,
    "simp_proof_length": 1
  },
  {
    "problem_id": "algebra_9onxpypzleqsum2onxpy",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_9onxpypzleqsum2onxpy\n  (x y z : ℝ)\n  (h₀ : 0 < x ∧ 0 < y ∧ 0 < z) :\n  9 / (x + y + z) ≤ 2 / (x + y) + 2 / (y + z) + 2 / (z + x) := by\n  have h_main : 2 / (x + y) + 2 / (y + z) + 2 / (z + x) ≥ 9 / (x + y + z) := by\n    have h₁ : 0 < x := by linarith\n    have h₂ : 0 < y := by linarith\n    have h₃ : 0 < z := by linarith\n    have h₄ : 0 < x * y := mul_pos h₁ h₂\n    have h₅ : 0 < y * z := mul_pos h₂ h₃\n    have h₆ : 0 < z * x := mul_pos h₃ h₁\n    field_simp\n    rw [div_le_div_iff (by positivity) (by positivity)]\n    nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x),\n      sq_nonneg (x - y + z), sq_nonneg (y - z + x), sq_nonneg (z - x + y)]\n  linarith",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_9onxpypzleqsum2onxpy\n  (x y z : ℝ)\n  (h₀ : 0 < x ∧ 0 < y ∧ 0 < z) :\n  9 / (x + y + z) ≤ 2 / (x + y) + 2 / (y + z) + 2 / (z + x) := by\n  rcases h₀ with ⟨h₀, h₁, h₂⟩\n  field_simp\n  rw [div_le_div_iff]\n  nlinarith [sq_nonneg (x - y), sq_nonneg (y - z), sq_nonneg (z - x)]\n  positivity\n  positivity",
    "orig_proof_length": 165,
    "simp_proof_length": 40
  },
  {
    "problem_id": "algebra_absapbon1pabsapbleqsumabsaon1pabsa",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_absapbon1pabsapbleqsumabsaon1pabsa\n  (a b : ℝ) :\n  abs (a + b) / (1 + abs (a + b)) ≤ abs a / (1 + abs a) + abs b / (1 + abs b) := by\n  have h_main : abs (a + b) / (1 + abs (a + b)) ≤ (abs a + abs b) / (1 + abs a + abs b) := by\n    have h₁ : 0 ≤ abs a := abs_nonneg a\n    have h₂ : 0 ≤ abs b := abs_nonneg b\n    have h₃ : 0 ≤ abs (a + b) := abs_nonneg (a + b)\n    have h₄ : abs (a + b) ≤ abs a + abs b := abs_add a b\n    have h₅ : 0 ≤ 1 + abs a + abs b := by positivity\n    have h₆ : 0 ≤ 1 + abs (a + b) := by positivity\n    -- Use the fact that the function f(x) = x / (1 + x) is increasing for x ≥ 0\n    have h₇ : abs (a + b) / (1 + abs (a + b)) ≤ (abs a + abs b) / (1 + abs a + abs b) := by\n      -- Use the division inequality to compare the two fractions\n      rw [div_le_div_iff] <;>\n        nlinarith [mul_nonneg h₁ h₂, mul_nonneg h₁ h₃, mul_nonneg h₂ h₃,\n          mul_nonneg (abs_nonneg (a + b)) h₁, mul_nonneg (abs_nonneg (a + b)) h₂]\n    exact h₇\n  \n  have h_key : (abs a + abs b) / (1 + abs a + abs b) ≤ abs a / (1 + abs a) + abs b / (1 + abs b) := by\n    have h₁ : 0 ≤ abs a := abs_nonneg a\n    have h₂ : 0 ≤ abs b := abs_nonneg b\n    have h₃ : 0 ≤ 1 + abs a := by positivity\n    have h₄ : 0 ≤ 1 + abs b := by positivity\n    have h₅ : 0 ≤ 1 + abs a + abs b := by positivity\n    have h₆ : 0 ≤ (1 + abs a) * (1 + abs b) := by positivity\n    have h₇ : 0 ≤ (1 + abs a) * (1 + abs b) * (1 + abs a + abs b) := by positivity\n    field_simp\n    rw [div_le_div_iff (by positivity) (by positivity)]\n    nlinarith [sq_nonneg (abs a - abs b), sq_nonneg (abs a - 0), sq_nonneg (abs b - 0),\n      mul_nonneg h₁ h₂, mul_nonneg h₁ (sq_nonneg (abs a - abs b)),\n      mul_nonneg h₂ (sq_nonneg (abs a - abs b))]\n  \n  have h_final : abs (a + b) / (1 + abs (a + b)) ≤ abs a / (1 + abs a) + abs b / (1 + abs b) := by\n    have h₁ : abs (a + b) / (1 + abs (a + b)) ≤ (abs a + abs b) / (1 + abs a + abs b) := h_main\n    have h₂ : (abs a + abs b) / (1 + abs a + abs b) ≤ abs a / (1 + abs a) + abs b / (1 + abs b) := h_key\n    linarith\n  \n  exact h_final",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_absapbon1pabsapbleqsumabsaon1pabsa\n  (a b : ℝ) :\n  abs (a + b) / (1 + abs (a + b)) ≤ abs a / (1 + abs a) + abs b / (1 + abs b) := by\n  field_simp\n  rw [div_le_div_iff] <;>\n  nlinarith [abs_add a b, abs_nonneg a, abs_nonneg b, abs_nonneg (a + b), mul_nonneg (abs_nonneg a) (abs_nonneg b)]",
    "orig_proof_length": 566,
    "simp_proof_length": 35
  },
  {
    "problem_id": "mathd_algebra_153",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_153\n  (n : ℝ)\n  (h₀ : n = 1 / 3) :\n  Int.floor (10 * n) + Int.floor (100 * n) + Int.floor (1000 * n) + Int.floor (10000 * n) = 3702 := by\n  have h₁ : Int.floor (10 * n) = 3 := by\n    rw [h₀]\n    have h₁₁ : Int.floor ((10 : ℝ) * (1 / 3 : ℝ)) = 3 := by\n      norm_num [Int.floor_eq_iff]\n      <;>\n      (try norm_num) <;>\n      (try linarith)\n    exact h₁₁\n  \n  have h₂ : Int.floor (100 * n) = 33 := by\n    rw [h₀]\n    have h₂₁ : Int.floor ((100 : ℝ) * (1 / 3 : ℝ)) = 33 := by\n      norm_num [Int.floor_eq_iff]\n      <;>\n      (try norm_num) <;>\n      (try linarith)\n    exact h₂₁\n  \n  have h₃ : Int.floor (1000 * n) = 333 := by\n    rw [h₀]\n    have h₃₁ : Int.floor ((1000 : ℝ) * (1 / 3 : ℝ)) = 333 := by\n      norm_num [Int.floor_eq_iff]\n      <;>\n      (try norm_num) <;>\n      (try linarith)\n    exact h₃₁\n  \n  have h₄ : Int.floor (10000 * n) = 3333 := by\n    rw [h₀]\n    have h₄₁ : Int.floor ((10000 : ℝ) * (1 / 3 : ℝ)) = 3333 := by\n      norm_num [Int.floor_eq_iff]\n      <;>\n      (try norm_num) <;>\n      (try linarith)\n    exact h₄₁\n  \n  have h₅ : Int.floor (10 * n) + Int.floor (100 * n) + Int.floor (1000 * n) + Int.floor (10000 * n) = 3702 := by\n    rw [h₁, h₂, h₃, h₄]\n    <;> norm_num\n  \n  exact h₅",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_153\n  (n : ℝ)\n  (h₀ : n = 1 / 3) :\n  Int.floor (10 * n) + Int.floor (100 * n) + Int.floor (1000 * n) + Int.floor (10000 * n) = 3702 := by\n  simp_all\n  norm_num",
    "orig_proof_length": 277,
    "simp_proof_length": 2
  },
  {
    "problem_id": "algebra_sqineq_unitcircatbpamblt1",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_sqineq_unitcircatbpamblt1\n  (a b: ℝ)\n  (h₀ : a^2 + b^2 = 1) :\n  a * b + (a - b) ≤ 1 := by\n  have h_main : a * b + (a - b) ≤ 1 := by\n    nlinarith [sq_nonneg (a - 1), sq_nonneg (b + 1), sq_nonneg (a + b - 1),\n      sq_nonneg (a - b), sq_nonneg (a + 1), sq_nonneg (b - 1),\n      sq_nonneg (a + b + 1)]\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_sqineq_unitcircatbpamblt1\n  (a b: ℝ)\n  (h₀ : a^2 + b^2 = 1) :\n  a * b + (a - b) ≤ 1 := by\n  nlinarith [sq_nonneg (a - b)]",
    "orig_proof_length": 73,
    "simp_proof_length": 9
  },
  {
    "problem_id": "mathd_algebra_329",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_329\n  (x y : ℝ)\n  (h₀ : 3 * y = x)\n  (h₁ : 2 * x + 5 * y = 11) :\n  x + y = 4 := by\n  have h₂ : y = 1 := by\n    have h₂₁ : 2 * x + 5 * y = 11 := h₁\n    have h₂₂ : x = 3 * y := by linarith\n    rw [h₂₂] at h₂₁\n    ring_nf at h₂₁ ⊢\n    linarith\n  \n  have h₃ : x = 3 := by\n    have h₃₁ : x = 3 * y := by linarith\n    rw [h₃₁]\n    rw [h₂]\n    <;> norm_num\n  \n  have h₄ : x + y = 4 := by\n    rw [h₃, h₂]\n    <;> norm_num\n  \n  exact h₄",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_329\n  (x y : ℝ)\n  (h₀ : 3 * y = x)\n  (h₁ : 2 * x + 5 * y = 11) :\n  x + y = 4 := by\n  nlinarith",
    "orig_proof_length": 96,
    "simp_proof_length": 1
  },
  {
    "problem_id": "induction_pprime_pdvdapowpma",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem induction_pprime_pdvdapowpma\n  (p a : ℕ)\n  (h₀ : 0 < a)\n  (h₁ : Nat.Prime p) :\n  p ∣ (a^p - a) := by\n  have h₂ : a^p ≥ a := by\n    have h₂₁ : a ^ p ≥ a ^ 1 := by\n      apply Nat.pow_le_pow_of_le_right\n      · linarith\n      · have h₂₂ : p ≥ 1 := Nat.Prime.one_lt h₁ |>.le\n        linarith\n    have h₂₂ : a ^ 1 = a := by simp\n    linarith\n  \n  have h₃ : (a : ZMod p)^p = (a : ZMod p) := by\n    haveI : Fact p.Prime := ⟨h₁⟩\n    have h₃₁ : (a : ZMod p) ^ p = (a : ZMod p) := by\n      -- Use the property of finite fields that x^p = x for any element x\n      have h₃₂ : (a : ZMod p) ^ p = (a : ZMod p) := by\n        -- Apply Fermat's Little Theorem\n        have h₃₃ : (a : ZMod p) ^ p = (a : ZMod p) := by\n          -- Use the fact that in ZMod p, x^p = x\n          have h₃₄ : (a : ZMod p) ^ p = (a : ZMod p) := by\n            -- Use the property of finite fields\n            rw [ZMod.pow_card]\n          exact h₃₄\n        exact h₃₃\n      exact h₃₂\n    exact h₃₁\n  \n  have h₄ : (a^p : ZMod p) = (a : ZMod p) := by\n    have h₄₁ : (a : ZMod p) ^ p = (a : ZMod p) := h₃\n    have h₄₂ : (a^p : ZMod p) = (a : ZMod p) := by\n      -- Use the fact that the coercion from ℕ to ZMod p respects powers\n      calc\n        (a ^ p : ZMod p) = ((a : ZMod p) ^ p : ZMod p) := by\n          norm_cast\n          <;> simp [ZMod.nat_cast_self]\n          <;> rfl\n        _ = (a : ZMod p) := by rw [h₄₁]\n    exact h₄₂\n  \n  have h₅ : (a^p : ZMod p) - (a : ZMod p) = 0 := by\n    rw [h₄]\n    <;> simp [sub_self]\n    <;>\n    (try simp_all [ZMod.nat_cast_self])\n    <;>\n    (try ring_nf at *)\n    <;>\n    (try norm_num at *)\n    <;>\n    (try omega)\n  \n  have h₆ : ((a^p - a : ℕ) : ZMod p) = 0 := by\n    have h₆₁ : ((a ^ p - a : ℕ) : ZMod p) = (a ^ p : ZMod p) - (a : ZMod p) := by\n      have h₆₂ : a ^ p ≥ a := h₂\n      have h₆₃ : (a ^ p - a : ℕ) = a ^ p - a := by\n        have h₆₄ : a ^ p ≥ a := h₂\n        omega\n      rw [h₆₃]\n      norm_cast\n      <;>\n      simp [ZMod.nat_cast_self, Nat.cast_sub (by omega : a ≤ a ^ p)]\n      <;>\n      ring_nf\n      <;>\n      simp_all [ZMod.nat_cast_self]\n      <;>\n      norm_num\n      <;>\n      omega\n    rw [h₆₁]\n    exact h₅\n  \n  have h₇ : p ∣ (a^p - a) := by\n    have h₇₁ : ((a^p - a : ℕ) : ZMod p) = 0 := h₆\n    have h₇₂ : (p : ℕ) ∣ (a^p - a : ℕ) := by\n      -- Use the property of ZMod to deduce that p divides a^p - a\n      have h₇₃ : (a^p - a : ℕ) ≡ 0 [MOD p] := by\n        rw [← ZMod.eq_iff_modEq_nat]\n        simpa [h₇₁] using h₆\n      -- Convert the congruence to a divisibility statement\n      rw [Nat.modEq_zero_iff_dvd] at h₇₃\n      exact h₇₃\n    exact h₇₂\n  \n  exact h₇",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem induction_pprime_pdvdapowpma\n  (p a : ℕ)\n  (h₀ : 0 < a)\n  (h₁ : Nat.Prime p) :\n  p ∣ (a^p - a) := by\n  have : Fact p.Prime := ⟨h₁⟩\n  have h₂ : a ^ p ≥ a := by\n    apply Nat.le_self_pow\n    linarith [h₁.pos]\n  have h₃ : (a^p - a : ℕ) ≡ 0 [MOD p] := by\n    rw [← ZMod.eq_iff_modEq_nat]\n    simp [ZMod.pow_card]\n    <;> simp [h₂]\n  rw [Nat.modEq_zero_iff_dvd] at h₃\n  exact h₃",
    "orig_proof_length": 586,
    "simp_proof_length": 66
  },
  {
    "problem_id": "amc12a_2021_p18",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2021_p18\n  (f : ℚ → ℝ)\n  (h₀ : ∀x>0, ∀y>0, f (x * y) = f x + f y)\n  (h₁ : ∀p, Nat.Prime p → f p = p) :\n  f (25 / 11) < 0 := by\n  have h₂ : f (5 : ℚ) = (5 : ℝ) := by\n    have h₂₁ : f (5 : ℚ) = (5 : ℝ) := by\n      have h₂₂ : Nat.Prime 5 := by decide\n      have h₂₃ : f (5 : ℚ) = (5 : ℝ) := by\n        simpa using h₁ 5 h₂₂\n      exact h₂₃\n    exact h₂₁\n  \n  have h₃ : f (25 : ℚ) = (10 : ℝ) := by\n    have h₃₁ : f (25 : ℚ) = f ((5 : ℚ) * (5 : ℚ)) := by norm_num\n    rw [h₃₁]\n    have h₃₂ : f ((5 : ℚ) * (5 : ℚ)) = f (5 : ℚ) + f (5 : ℚ) := by\n      apply h₀\n      <;> norm_num\n      <;> norm_num\n    rw [h₃₂]\n    rw [h₂]\n    <;> norm_num\n    <;> linarith\n  \n  have h₄ : f (11 : ℚ) = (11 : ℝ) := by\n    have h₄₁ : Nat.Prime 11 := by decide\n    have h₄₂ : f (11 : ℚ) = (11 : ℝ) := by\n      simpa using h₁ 11 h₄₁\n    exact h₄₂\n  \n  have h₅ : f (25 / 11 : ℚ) = (-1 : ℝ) := by\n    have h₅₁ : f (25 : ℚ) = f ((25 / 11 : ℚ) * (11 : ℚ)) := by\n      norm_num [div_eq_mul_inv]\n      <;> field_simp\n      <;> ring_nf\n      <;> norm_num\n    rw [h₅₁] at h₃\n    have h₅₂ : f ((25 / 11 : ℚ) * (11 : ℚ)) = f (25 / 11 : ℚ) + f (11 : ℚ) := by\n      apply h₀\n      <;> norm_num\n      <;> norm_num\n    rw [h₅₂] at h₃\n    rw [h₄] at h₃\n    norm_num at h₃ ⊢\n    <;> linarith\n  \n  have h₆ : f (25 / 11) < 0 := by\n    have h₆₁ : f (25 / 11 : ℚ) = (-1 : ℝ) := h₅\n    have h₆₂ : f (25 / 11 : ℚ) < 0 := by\n      rw [h₆₁]\n      norm_num\n    exact h₆₂\n  \n  exact h₆",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2021_p18\n  (f : ℚ → ℝ)\n  (h₀ : ∀x>0, ∀y>0, f (x * y) = f x + f y)\n  (h₁ : ∀p, Nat.Prime p → f p = p) :\n  f (25 / 11) < 0 := by\n  norm_num\n  have h₂ := h₁ 5\n  have h₃ := h₁ 11\n  have h₄ := h₀ 5 (by norm_num) 5 (by norm_num)\n  have h₅ := h₀ (25 / 11) (by norm_num) 11 (by norm_num)\n  norm_num at h₂ h₃ h₄ h₅\n  linarith",
    "orig_proof_length": 403,
    "simp_proof_length": 50
  },
  {
    "problem_id": "amc12a_2021_p9",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2021_p9 :\n  ∏ k ∈ Finset.range 7, (2^(2^k) + 3^(2^k)) = 3^128 - 2^128 := by\n  have h : ∏ k ∈ Finset.range 7, (2^(2^k) + 3^(2^k)) = 3^128 - 2^128 := by\n    rfl\n  apply h",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2021_p9 :\n  ∏ k ∈ Finset.range 7, (2^(2^k) + 3^(2^k)) = 3^128 - 2^128 := by\n rfl",
    "orig_proof_length": 39,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_229",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_229 :\n  (5^30) % 7 = 1 := by\n  have h : (5^30) % 7 = 1 := by\n    norm_num\n  exact h",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_229 :\n  (5^30) % 7 = 1 := by\n  rfl",
    "orig_proof_length": 17,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_100",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_100\n  (n : ℕ)\n  (h₀ : 0 < n)\n  (h₁ : Nat.gcd n 40 = 10)\n  (h₂ : Nat.lcm n 40 = 280) :\n  n = 70 := by\n  have h₃ : n * 40 = 2800 := by\n    have h₃₁ : Nat.gcd n 40 * Nat.lcm n 40 = n * 40 := by\n      rw [Nat.gcd_mul_lcm]\n    rw [h₁, h₂] at h₃₁\n    norm_num at h₃₁ ⊢\n    <;> linarith\n  \n  have h₄ : n = 70 := by\n    have h₄₁ : n * 40 = 70 * 40 := by\n      norm_num at h₃ ⊢\n      <;> linarith\n    have h₄₂ : n = 70 := by\n      apply mul_left_cancel₀ (show (40 : ℕ) ≠ 0 by norm_num)\n      linarith\n    exact h₄₂\n  \n  exact h₄",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_100\n  (n : ℕ)\n  (h₀ : 0 < n)\n  (h₁ : Nat.gcd n 40 = 10)\n  (h₂ : Nat.lcm n 40 = 280) :\n  n = 70 := by\n  have := Nat.gcd_mul_lcm n 40\n  simp_all\n  omega",
    "orig_proof_length": 99,
    "simp_proof_length": 7
  },
  {
    "problem_id": "aime_1984_p1",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1984_p1\n  (u : ℕ → ℚ)\n  (h₀ : ∀ n, u (n + 1) = u n + 1)\n  (h₁ : ∑ k ∈ Finset.range 98, u k.succ = 137) :\n  ∑ k ∈ Finset.range 49, u (2 * k.succ) = 93 := by\n  have h₂ : ∀ (n : ℕ), u n = u 0 + n := by\n    intro n\n    have h₃ : ∀ (n : ℕ), u n = u 0 + n := by\n      intro n\n      induction n with\n      | zero =>\n        simp\n      | succ n ih =>\n        have h₄ := h₀ n\n        rw [ih] at h₄\n        simp [h₄, add_assoc]\n        <;> ring_nf at *\n        <;> norm_num at *\n        <;> linarith\n    exact h₃ n\n  \n  have h₃ : 98 * u 0 + 4851 = 137 := by\n    have h₄ : ∑ k in Finset.range 98, u (k.succ) = 137 := h₁\n    have h₅ : ∑ k in Finset.range 98, u (k.succ) = ∑ k in Finset.range 98, (u 0 + (k.succ : ℚ)) := by\n      apply Finset.sum_congr rfl\n      intro k _\n      rw [h₂ (k.succ)]\n      <;> simp [Nat.cast_add, Nat.cast_one]\n      <;> ring_nf\n      <;> norm_num\n    rw [h₅] at h₄\n    have h₆ : ∑ k in Finset.range 98, (u 0 + (k.succ : ℚ)) = 98 * u 0 + 4851 := by\n      -- Calculate the sum of (u 0 + (k + 1)) for k from 0 to 97\n      have h₇ : ∑ k in Finset.range 98, (u 0 + (k.succ : ℚ)) = ∑ k in Finset.range 98, (u 0 : ℚ) + ∑ k in Finset.range 98, (k.succ : ℚ) := by\n        rw [Finset.sum_add_distrib]\n      rw [h₇]\n      -- Calculate the sum of u 0\n      have h₈ : ∑ k in Finset.range 98, (u 0 : ℚ) = 98 * u 0 := by\n        simp [Finset.sum_const, Finset.card_range]\n        <;> ring_nf\n      rw [h₈]\n      -- Calculate the sum of (k + 1) for k from 0 to 97\n      have h₉ : ∑ k in Finset.range 98, (k.succ : ℚ) = 4851 := by\n        -- The sum of the first 98 natural numbers is 98 * 99 / 2 = 4851\n        norm_num [Finset.sum_range_succ, Finset.sum_range_succ, Finset.sum_range_succ]\n        <;>\n        rfl\n      rw [h₉]\n      <;> ring_nf\n    rw [h₆] at h₄\n    norm_num at h₄ ⊢\n    <;> linarith\n  \n  have h₄ : ∑ k ∈ Finset.range 49, u (2 * k.succ) = 49 * u 0 + 2450 := by\n    have h₅ : ∑ k in Finset.range 49, u (2 * k.succ) = ∑ k in Finset.range 49, (u 0 + (2 * k.succ : ℚ)) := by\n      apply Finset.sum_congr rfl\n      intro k _\n      have h₆ := h₂ (2 * k.succ)\n      rw [h₆]\n      <;> simp [Nat.cast_add, Nat.cast_mul, Nat.cast_ofNat]\n      <;> ring_nf\n      <;> norm_num\n    rw [h₅]\n    have h₆ : ∑ k in Finset.range 49, (u 0 + (2 * k.succ : ℚ)) = ∑ k in Finset.range 49, (u 0 : ℚ) + ∑ k in Finset.range 49, (2 * k.succ : ℚ) := by\n      rw [Finset.sum_add_distrib]\n    rw [h₆]\n    have h₇ : ∑ k in Finset.range 49, (u 0 : ℚ) = 49 * u 0 := by\n      simp [Finset.sum_const, Finset.card_range]\n      <;> ring_nf\n    rw [h₇]\n    have h₈ : ∑ k in Finset.range 49, (2 * k.succ : ℚ) = 2450 := by\n      -- Calculate the sum of 2*(k+1) for k from 0 to 48\n      -- This is equivalent to 2*(1 + 2 + ... + 49) = 2*(49*50/2) = 49*50 = 2450\n      norm_num [Finset.sum_range_succ, Finset.sum_range_succ, Finset.sum_range_succ]\n      <;>\n      rfl\n    rw [h₈]\n    <;> ring_nf\n    <;> norm_num\n  \n  have h₅ : 49 * u 0 = -2357 := by\n    have h₅₁ : 98 * u 0 + 4851 = 137 := h₃\n    have h₅₂ : 98 * u 0 = -4714 := by\n      linarith\n    have h₅₃ : 49 * u 0 = -2357 := by\n      linarith\n    exact h₅₃\n  \n  have h₆ : ∑ k ∈ Finset.range 49, u (2 * k.succ) = 93 := by\n    rw [h₄]\n    have h₇ : (49 : ℚ) * u 0 + 2450 = 93 := by\n      have h₇₁ : (49 : ℚ) * u 0 = -2357 := by exact_mod_cast h₅\n      linarith\n    linarith\n  \n  exact h₆",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1984_p1\n  (u : ℕ → ℚ)\n  (h₀ : ∀ n, u (n + 1) = u n + 1)\n  (h₁ : ∑ k ∈ Finset.range 98, u k.succ = 137) :\n  ∑ k ∈ Finset.range 49, u (2 * k.succ) = 93 := by\n  simp_all [Finset.sum_range_succ]\n  linarith",
    "orig_proof_length": 690,
    "simp_proof_length": 5
  },
  {
    "problem_id": "mathd_algebra_313",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_313\n  (v i z : ℂ)\n  (h₀ : v = i * z)\n  (h₁ : v = 1 + Complex.I)\n  (h₂ : z = 2 - Complex.I) :\n  i = 1/5 + 3/5 * Complex.I := by\n  have h₃ : i * (2 - Complex.I) = 1 + Complex.I := by\n    have h₃₁ : v = i * (2 - Complex.I) := by\n      rw [h₀, h₂]\n      <;> ring_nf\n    rw [h₃₁] at h₁\n    exact h₁\n  \n  have h₄ : i.re = 1/5 := by\n    have h₄₁ := h₃\n    simp [Complex.ext_iff, Complex.mul_re, Complex.mul_im, Complex.ext_iff, pow_two] at h₄₁ ⊢\n    ring_nf at h₄₁ ⊢\n    nlinarith [sq_nonneg (i.re - 1 / 5), sq_nonneg (i.im - 3 / 5)]\n  \n  have h₅ : i.im = 3/5 := by\n    have h₅₁ := h₃\n    simp [Complex.ext_iff, Complex.mul_re, Complex.mul_im, Complex.ext_iff, pow_two] at h₅₁ ⊢\n    ring_nf at h₅₁ ⊢\n    nlinarith [sq_nonneg (i.re - 1 / 5), sq_nonneg (i.im - 3 / 5)]\n  \n  have h₆ : i = 1/5 + 3/5 * Complex.I := by\n    apply Complex.ext <;> simp [h₄, h₅, Complex.ext_iff, pow_two]\n    <;> norm_num <;>\n    (try ring_nf) <;>\n    (try norm_num) <;>\n    (try linarith)\n    <;>\n    (try\n      {\n        simp_all [Complex.ext_iff, pow_two]\n        <;> norm_num <;>\n        (try ring_nf at *) <;>\n        (try norm_num at *) <;>\n        (try linarith)\n      })\n  \n  exact h₆",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_313\n  (v i z : ℂ)\n  (h₀ : v = i * z)\n  (h₁ : v = 1 + Complex.I)\n  (h₂ : z = 2 - Complex.I) :\n  i = 1/5 + 3/5 * Complex.I := by\n  simp_all [Complex.ext_iff]\n  constructor <;> nlinarith",
    "orig_proof_length": 237,
    "simp_proof_length": 7
  },
  {
    "problem_id": "amc12a_2002_p6",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2002_p6\n  (n : ℕ)\n  (h₀ : 0 < n) :\n  ∃ m, (m > n ∧ ∃ p, m * p ≤ m + p) := by\n  have h_main : ∃ m, (m > n ∧ ∃ p, m * p ≤ m + p) := by\n    use n + 1\n    constructor\n    · -- Prove that n + 1 > n\n      omega\n    · -- Find a p such that (n + 1) * p ≤ (n + 1) + p\n      use 0\n      <;> simp [mul_zero, add_zero]\n      <;> nlinarith\n  \n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2002_p6\n  (n : ℕ)\n  (h₀ : 0 < n) :\n  ∃ m, (m > n ∧ ∃ p, m * p ≤ m + p) := by\n  use n + 1\n  constructor\n  omega\n  use 0\n  simp",
    "orig_proof_length": 46,
    "simp_proof_length": 9
  },
  {
    "problem_id": "mathd_algebra_129",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_129\n  (a : ℝ)\n  (h₀ : a ≠ 0)\n  (h₁ : 8⁻¹ / 4⁻¹ - a⁻¹ = 1) :\n  a = -2 := by\n  have h_main : a = -2 := by\n    have h₂ : (8 : ℝ)⁻¹ / (4 : ℝ)⁻¹ = 1 / 2 := by\n      norm_num\n    rw [h₂] at h₁\n    have h₃ : (1 / 2 : ℝ) - a⁻¹ = 1 := by simpa using h₁\n    have h₄ : a⁻¹ = -1 / 2 := by\n      -- Solve for a⁻¹ using linear arithmetic\n      linarith\n    have h₅ : a = -2 := by\n      -- Take reciprocals to find a\n      have h₆ : a ≠ 0 := h₀\n      have h₇ : a⁻¹ = -1 / 2 := h₄\n      have h₈ : a = -2 := by\n        -- Use the fact that a⁻¹ = -1/2 to find a\n        have h₉ : a = -2 := by\n          -- Take reciprocals and solve for a\n          have h₁₀ : a ≠ 0 := h₆\n          field_simp [h₁₀] at h₇\n          nlinarith\n        exact h₉\n      exact h₈\n    exact h₅\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_129\n  (a : ℝ)\n  (h₀ : a ≠ 0)\n  (h₁ : 8⁻¹ / 4⁻¹ - a⁻¹ = 1) :\n  a = -2 := by\n  field_simp at h₁\n  linarith",
    "orig_proof_length": 145,
    "simp_proof_length": 4
  },
  {
    "problem_id": "amc12b_2002_p4",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2002_p4\n  (n : ℕ)\n  (h₀ : 0 < n)\n  (h₁ : ((1 / 2 + 1 / 3 + 1 / 7 + 1 / n) : ℚ).den = 1) :\n  n = 42 := by\n  have h_main : (n : ℕ) = 42 := by\n    have h₂ : ((1 / 2 + 1 / 3 + 1 / 7 + 1 / (n : ℚ)) : ℚ) = (41 / 42 + 1 / (n : ℚ)) := by\n      norm_num [div_eq_mul_inv]\n      <;> field_simp <;> ring_nf <;> norm_num\n      <;> simp_all [Nat.cast_add, Nat.cast_one]\n      <;> field_simp <;> ring_nf <;> norm_num\n      <;> linarith\n    \n    have h₃ : ((41 / 42 + 1 / (n : ℚ)) : ℚ) = (41 * (n : ℚ) + 42) / (42 * (n : ℚ)) := by\n      have h₄ : (n : ℚ) ≠ 0 := by positivity\n      field_simp [h₄]\n      <;> ring_nf\n      <;> field_simp [h₄]\n      <;> ring_nf\n      <;> norm_num\n      <;> linarith\n    \n    have h₄ : ((1 / 2 + 1 / 3 + 1 / 7 + 1 / (n : ℚ)) : ℚ) = (41 * (n : ℚ) + 42) / (42 * (n : ℚ)) := by\n      rw [h₂, h₃]\n    \n    have h₅ : (((41 * (n : ℚ) + 42) / (42 * (n : ℚ)) : ℚ)).den = 1 := by\n      rw [h₄] at h₁\n      exact h₁\n    \n    have h₆ : ∃ (k : ℤ), (41 * (n : ℚ) + 42) / (42 * (n : ℚ)) = (k : ℚ) := by\n      have h₇ : (((41 * (n : ℚ) + 42) / (42 * (n : ℚ)) : ℚ)).den = 1 := h₅\n      have h₈ : ∃ (k : ℤ), (41 * (n : ℚ) + 42) / (42 * (n : ℚ)) = (k : ℚ) := by\n        -- Use the fact that the denominator is 1 to find an integer k\n        have h₉ : ∃ (k : ℤ), (41 * (n : ℚ) + 42) / (42 * (n : ℚ)) = (k : ℚ) := by\n          -- Since the denominator is 1, the number is an integer\n          refine' ⟨((41 * (n : ℚ) + 42) / (42 * (n : ℚ))).num, _⟩\n          have h₁₀ : (((41 * (n : ℚ) + 42) / (42 * (n : ℚ)) : ℚ)).den = 1 := h₅\n          have h₁₁ : ((41 * (n : ℚ) + 42) / (42 * (n : ℚ)) : ℚ) = (((41 * (n : ℚ) + 42) / (42 * (n : ℚ)) : ℚ).num : ℚ) := by\n            rw [← Rat.num_div_den ((41 * (n : ℚ) + 42) / (42 * (n : ℚ)))]\n            <;> simp [h₁₀]\n            <;> norm_cast\n          rw [h₁₁]\n          <;> norm_cast\n        exact h₉\n      exact h₈\n    \n    obtain ⟨k, h₇⟩ := h₆\n    have h₈ : (41 * (n : ℚ) + 42) / (42 * (n : ℚ)) = (k : ℚ) := h₇\n    have h₉ : (41 * (n : ℚ) + 42) = (k : ℚ) * (42 * (n : ℚ)) := by\n      have h₁₀ : (n : ℚ) ≠ 0 := by positivity\n      field_simp [h₁₀] at h₈ ⊢\n      <;> ring_nf at h₈ ⊢ <;> norm_cast at h₈ ⊢ <;>\n        (try norm_num at h₈ ⊢) <;>\n        (try linarith) <;>\n        (try nlinarith) <;>\n        (try ring_nf at h₈ ⊢ <;> norm_num at h₈ ⊢ <;> linarith)\n      <;>\n      nlinarith\n    \n    have h₁₀ : (41 : ℤ) * n + 42 = k * (42 * n) := by\n      norm_cast at h₉ ⊢\n      <;>\n      (try ring_nf at h₉ ⊢) <;>\n      (try norm_num at h₉ ⊢) <;>\n      (try field_simp at h₉ ⊢) <;>\n      (try norm_cast at h₉ ⊢) <;>\n      (try linarith)\n      <;>\n      (try\n        {\n          ring_nf at h₉ ⊢\n          <;>\n          norm_cast at h₉ ⊢\n          <;>\n          field_simp at h₉ ⊢\n          <;>\n          norm_cast at h₉ ⊢\n          <;>\n          linarith\n        })\n      <;>\n      (try\n        {\n          norm_num at h₉ ⊢\n          <;>\n          ring_nf at h₉ ⊢\n          <;>\n          norm_cast at h₉ ⊢\n          <;>\n          linarith\n        })\n    \n    have h₁₁ : (42 : ℤ) - n = (42 * n : ℤ) * (k - 1) := by\n      have h₁₂ : (41 : ℤ) * n + 42 = k * (42 * n) := h₁₀\n      ring_nf at h₁₂ ⊢\n      linarith\n    \n    have h₁₂ : n ≤ 84 := by\n      by_contra! h\n      have h₁₃ : n ≥ 85 := by linarith\n      have h₁₄ : (n : ℤ) ≥ 85 := by exact_mod_cast h₁₃\n      have h₁₅ : (42 : ℤ) - n < 0 := by linarith\n      have h₁₆ : (42 * n : ℤ) > 0 := by positivity\n      have h₁₇ : (42 : ℤ) - n = (42 * n : ℤ) * (k - 1) := h₁₁\n      have h₁₈ : (k - 1 : ℤ) < 0 := by\n        nlinarith\n      have h₁₉ : (k - 1 : ℤ) ≤ -1 := by\n        linarith\n      have h₂₀ : (42 : ℤ) - n ≤ - (42 * n : ℤ) := by\n        nlinarith\n      have h₂₁ : (n : ℤ) ≥ 85 := by exact_mod_cast h₁₃\n      nlinarith\n    \n    have h₁₃ : n ≤ 84 := h₁₂\n    interval_cases n <;> norm_num at h₁₀ h₁₁ ⊢ <;>\n      (try omega) <;>\n      (try\n        {\n          norm_num at h₁₀ h₁₁ ⊢\n          <;>\n          (try omega)\n          <;>\n          (try\n            {\n              ring_nf at h₁₀ h₁₁ ⊢\n              <;>\n              norm_num at h₁₀ h₁₁ ⊢\n              <;>\n              omega\n            })\n        }) <;>\n      (try\n        {\n          norm_cast at h₁₀ h₁₁ ⊢\n          <;>\n          (try omega)\n          <;>\n          (try\n            {\n              ring_nf at h₁₀ h₁₁ ⊢\n              <;>\n              norm_num at h₁₀ h₁₁ ⊢\n              <;>\n              omega\n            })\n        })\n  \n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2002_p4\n  (n : ℕ)\n  (h₀ : 0 < n)\n  (h₁ : ((1 / 2 + 1 / 3 + 1 / 7 + 1 / n) : ℚ).den = 1) :\n  n = 42 := by\n  have h₂ : n = 42 := by\n    have h₃ : (1 / 2 + 1 / 3 + 1 / 7 + 1 / (n : ℚ)) = (41 / 42 + 1 / (n : ℚ)) := by\n      norm_num\n    have h₄ : (41 / 42 + 1 / (n : ℚ)) = (41 * (n : ℚ) + 42) / (42 * (n : ℚ)) := by\n      field_simp [h₀.ne']\n    rw [h₃, h₄] at h₁\n    have h₅ : ∃ (k : ℤ), (41 * (n : ℚ) + 42) / (42 * (n : ℚ)) = (k : ℚ) := by\n      refine' ⟨((41 * (n : ℚ) + 42) / (42 * (n : ℚ))).num, _⟩\n      rw [← Rat.num_div_den ((41 * (n : ℚ) + 42) / (42 * (n : ℚ)))]\n      <;> simp [h₁]\n    obtain ⟨k, h₆⟩ := h₅\n    have h₇ : (41 * (n : ℚ) + 42) = (k : ℚ) * (42 * (n : ℚ)) := by\n      field_simp [h₀.ne'] at h₆ ⊢\n      ring_nf at h₆ ⊢\n      norm_cast at h₆ ⊢\n    have h₈ : (41 * n + 42) = k * (42 * n) := by\n      norm_cast at h₇ ⊢\n    have h₉ : (42 - n : ℤ) = (42 * n : ℤ) * (k - 1) := by\n      ring_nf at h₈ ⊢\n      linarith\n    have h₁₀ : n ≤ 84 := by\n      by_contra! h\n      have h₁₁ : n ≥ 85 := by linarith\n      have h₁₂ : (n : ℤ) ≥ 85 := by exact_mod_cast h₁₁\n      have h₁₃ : (42 : ℤ) - n < 0 := by linarith\n      have h₁₄ : (42 * n : ℤ) > 0 := by positivity\n      have h₁₅ : (42 : ℤ) - n = (42 * n : ℤ) * (k - 1) := h₉\n      have h₁₆ : (k - 1 : ℤ) < 0 := by\n        nlinarith\n      have h₁₇ : (k - 1 : ℤ) ≤ -1 := by\n        linarith\n      have h₁₈ : (42 : ℤ) - n ≤ - (42 * n : ℤ) := by\n        nlinarith\n      nlinarith\n    interval_cases n <;> norm_num at h₉ h₁₀ ⊢ <;> omega\n  exact h₂",
    "orig_proof_length": 1143,
    "simp_proof_length": 468
  },
  {
    "problem_id": "mathd_algebra_484",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_484 :\n  Real.log 27 / Real.log 3 = 3 := by\n  have h_main : Real.log 27 / Real.log 3 = 3 := by\n    have h₁ : Real.log 27 = Real.log (3 ^ 3) := by norm_num\n    rw [h₁]\n    have h₂ : Real.log (3 ^ 3) = 3 * Real.log 3 := by\n      rw [Real.log_pow] <;> norm_num\n    rw [h₂]\n    have h₃ : Real.log 3 ≠ 0 := by\n      have h₄ : Real.log 3 > 0 := Real.log_pos (by norm_num)\n      linarith\n    field_simp [h₃]\n    <;> ring\n    <;> norm_num\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_484 :\n  Real.log 27 / Real.log 3 = 3 := by\n  rw [show Real.log 27 = Real.log (3 ^ 3) by norm_num]\n  field_simp",
    "orig_proof_length": 90,
    "simp_proof_length": 16
  },
  {
    "problem_id": "mathd_numbertheory_551",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_551 :\n  1529 % 6 = 5 := by\n  have h : 1529 % 6 = 5 := by\n    norm_num\n    <;> rfl\n  \n  apply h",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_551 :\n  1529 % 6 = 5 := by\n  norm_num",
    "orig_proof_length": 16,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_304",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_304 :\n  91^2 = 8281 := by\n  have h : 91^2 = 8281 := by\n    norm_num\n  exact h",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_304 :\n  91^2 = 8281 := by\n norm_num",
    "orig_proof_length": 13,
    "simp_proof_length": 1
  },
  {
    "problem_id": "amc12b_2021_p18",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2021_p18\n  (z : ℂ)\n  (h₀ : 12 * Complex.normSq z = 2 * Complex.normSq (z + 2) + Complex.normSq (z^2 + 1) + 31) :\n  z + 6 / z = -2 := by\n  have h₁ : z.re = -1 := by\n    have h₁₁ := h₀\n    simp [Complex.normSq, Complex.ext_iff, pow_two, pow_succ, Complex.ext_iff, Complex.mul_re, Complex.mul_im,\n      Complex.add_re, Complex.add_im, Complex.ofReal_add, Complex.ofReal_mul, Complex.ofReal_one] at h₁₁\n    ring_nf at h₁₁\n    have h₁₂ : 0 ≤ (z.re * z.re + z.im * z.im - 6) ^ 2 + 4 * (z.re + 1) ^ 2 := by positivity\n    nlinarith [sq_nonneg (z.re - 1), sq_nonneg (z.im), sq_nonneg (z.re + 1),\n      sq_nonneg (z.re * z.re + z.im * z.im - 6)]\n  \n  have h₂ : z.re * z.re + z.im * z.im = 6 := by\n    have h₂₁ := h₀\n    simp [Complex.normSq, Complex.ext_iff, pow_two, pow_succ, Complex.ext_iff, Complex.mul_re, Complex.mul_im,\n      Complex.add_re, Complex.add_im, Complex.ofReal_add, Complex.ofReal_mul, Complex.ofReal_one] at h₂₁\n    ring_nf at h₂₁\n    have h₂₂ : 0 ≤ (z.re * z.re + z.im * z.im - 6) ^ 2 + 4 * (z.re + 1) ^ 2 := by positivity\n    nlinarith [sq_nonneg (z.re - 1), sq_nonneg (z.im), sq_nonneg (z.re + 1),\n      sq_nonneg (z.re * z.re + z.im * z.im - 6)]\n  \n  have h₃ : z.im * z.im = 5 := by\n    have h₃₁ : z.re = -1 := h₁\n    have h₃₂ : z.re * z.re + z.im * z.im = 6 := h₂\n    rw [h₃₁] at h₃₂\n    ring_nf at h₃₂ ⊢\n    <;> nlinarith\n  \n  have h₄ : z + 6 / z = -2 := by\n    have h₄₁ : z.re = -1 := h₁\n    have h₄₂ : z.im * z.im = 5 := h₃\n    have h₄₃ : z ≠ 0 := by\n      by_contra h\n      rw [h] at h₀\n      norm_num [Complex.normSq, pow_two] at h₀\n      <;> simp_all [Complex.ext_iff]\n      <;> nlinarith\n    -- Compute z + 6 / z using the real and imaginary parts\n    have h₄₄ : z + 6 / z = -2 := by\n      field_simp [Complex.ext_iff, Complex.normSq, pow_two, h₄₃, Complex.ext_iff, Complex.div_re, Complex.div_im,\n        Complex.normSq, pow_two]\n      <;> simp_all [Complex.ext_iff, pow_two]\n      <;> ring_nf at *\n      <;> norm_num at *\n      <;>\n      (try\n        {\n          nlinarith\n        })\n      <;>\n      (try\n        {\n          cases' le_total 0 z.im with h₄₅ h₄₅ <;>\n          simp_all [sq, mul_comm] <;>\n          nlinarith [sq_nonneg (z.im)]\n        })\n      <;>\n      (try\n        {\n          nlinarith [sq_nonneg (z.im)]\n        })\n    exact h₄₄\n  \n  exact h₄",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2021_p18\n  (z : ℂ)\n  (h₀ : 12 * Complex.normSq z = 2 * Complex.normSq (z + 2) + Complex.normSq (z^2 + 1) + 31) :\n  z + 6 / z = -2 := by\n  simp [Complex.normSq, Complex.ext_iff, pow_two] at h₀\n  have h₁ : z.re = -1 := by\n    nlinarith [sq_nonneg (z.re - 1), sq_nonneg (z.re + 1),\n      sq_nonneg (z.re * z.re + z.im * z.im - 6)]\n  have h₂ : z.im * z.im = 5 := by\n    nlinarith [sq_nonneg (z.re - 1), sq_nonneg (z.re + 1),\n      sq_nonneg (z.re * z.re + z.im * z.im - 6)]\n  field_simp [Complex.ext_iff, h₁, h₂]\n  <;> norm_num\n  <;> linarith",
    "orig_proof_length": 436,
    "simp_proof_length": 99
  },
  {
    "problem_id": "amc12b_2002_p19",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2002_p19\n  (a b c: ℝ)\n  (h₀ : 0 < a ∧ 0 < b ∧ 0 < c)\n  (h₁ : a * (b + c) = 152)\n  (h₂ : b * (c + a) = 162)\n  (h₃ : c * (a + b) = 170) :\n  a * b * c = 720 := by\n  have h₄ : a * b + a * c + b * c = 242 := by\n    have h₄₁ : a * (b + c) + b * (c + a) + c * (a + b) = 484 := by\n      linarith\n    have h₄₂ : a * (b + c) + b * (c + a) + c * (a + b) = 2 * (a * b + a * c + b * c) := by\n      ring\n    linarith\n  \n  have h₅ : b * c = 90 := by\n    have h₅₁ : a * b + a * c + b * c = 242 := h₄\n    have h₅₂ : a * (b + c) = 152 := h₁\n    have h₅₃ : a * b + a * c = 152 := by linarith\n    linarith\n  \n  have h₆ : a * c = 80 := by\n    have h₆₁ : a * b + a * c + b * c = 242 := h₄\n    have h₆₂ : b * (c + a) = 162 := h₂\n    have h₆₃ : b * c + a * b = 162 := by linarith\n    linarith\n  \n  have h₇ : a * b = 72 := by\n    have h₇₁ : a * b + a * c + b * c = 242 := h₄\n    have h₇₂ : c * (a + b) = 170 := h₃\n    have h₇₃ : a * c + b * c = 170 := by linarith\n    linarith\n  \n  have h₈ : (a * b * c) ^ 2 = 518400 := by\n    have h₈₁ : (a * b * c) ^ 2 = (a * b) * (a * c) * (b * c) := by\n      ring\n    rw [h₈₁]\n    have h₈₂ : a * b = 72 := h₇\n    have h₈₃ : a * c = 80 := h₆\n    have h₈₄ : b * c = 90 := h₅\n    rw [h₈₂, h₈₃, h₈₄]\n    <;> norm_num\n  \n  have h₉ : a * b * c = 720 := by\n    have h₉₁ : 0 < a := h₀.1\n    have h₉₂ : 0 < b := h₀.2.1\n    have h₉₃ : 0 < c := h₀.2.2\n    have h₉₄ : 0 < a * b := by positivity\n    have h₉₅ : 0 < a * c := by positivity\n    have h₉₆ : 0 < b * c := by positivity\n    have h₉₇ : 0 < a * b * c := by positivity\n    have h₉₈ : (a * b * c) ^ 2 = 518400 := h₈\n    have h₉₉ : a * b * c > 0 := by positivity\n    have h₁₀₀ : a * b * c = 720 := by\n      nlinarith [sq_nonneg (a * b * c - 720)]\n    exact h₁₀₀\n  \n  exact h₉",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2002_p19\n  (a b c: ℝ)\n  (h₀ : 0 < a ∧ 0 < b ∧ 0 < c)\n  (h₁ : a * (b + c) = 152)\n  (h₂ : b * (c + a) = 162)\n  (h₃ : c * (a + b) = 170) :\n  a * b * c = 720 := by\n  nlinarith",
    "orig_proof_length": 508,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_341",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_341\n  (a b c : ℕ)\n  (h₀ : a ≤ 9 ∧ b ≤ 9 ∧ c ≤ 9)\n  (h₁ : Nat.digits 10 ((5^100) % 1000) = [c,b,a]) :\n  a + b + c = 13 := by\n  have h₂ : (5^100) % 1000 = 625 := by\n    norm_num\n    <;> rfl\n  \n  have h₃ : Nat.digits 10 625 = [c, b, a] := by\n    have h₃₁ : Nat.digits 10 ((5 ^ 100) % 1000) = [c, b, a] := h₁\n    rw [h₂] at h₃₁\n    exact h₃₁\n  \n  have h₄ : Nat.digits 10 625 = [5, 2, 6] := by\n    norm_num [Nat.digits_len]\n    <;> rfl\n  \n  have h₅ : c = 5 ∧ b = 2 ∧ a = 6 := by\n    have h₅₁ : [c, b, a] = [5, 2, 6] := by\n      rw [h₄] at h₃\n      exact h₃.symm\n    have h₅₂ : c = 5 := by\n      have h₅₂₁ := congr_arg (fun l => l.get? 0) h₅₁\n      simp at h₅₂₁\n      <;> aesop\n    have h₅₃ : b = 2 := by\n      have h₅₃₁ := congr_arg (fun l => l.get? 1) h₅₁\n      simp at h₅₃₁\n      <;> aesop\n    have h₅₄ : a = 6 := by\n      have h₅₄₁ := congr_arg (fun l => l.get? 2) h₅₁\n      simp at h₅₄₁\n      <;> aesop\n    exact ⟨h₅₂, h₅₃, h₅₄⟩\n  \n  have h₆ : a + b + c = 13 := by\n    have h₆₁ : c = 5 := h₅.1\n    have h₆₂ : b = 2 := h₅.2.1\n    have h₆₃ : a = 6 := h₅.2.2\n    subst_vars\n    <;> norm_num\n  \n  exact h₆",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_341\n  (a b c : ℕ)\n  (h₀ : a ≤ 9 ∧ b ≤ 9 ∧ c ≤ 9)\n  (h₁ : Nat.digits 10 ((5^100) % 1000) = [c,b,a]) :\n  a + b + c = 13 := by\n  aesop",
    "orig_proof_length": 263,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_711",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_711\n  (m n : ℕ)\n  (h₀ : 0 < m ∧ 0 < n)\n  (h₁ : Nat.gcd m n = 8)\n  (h₂ : Nat.lcm m n = 112) :\n  72 ≤ m + n := by\n  have h_product : m * n = 896 := by\n    have h₃ : m * n = Nat.gcd m n * Nat.lcm m n := by\n      rw [Nat.gcd_mul_lcm]\n    rw [h₃]\n    rw [h₁, h₂]\n    <;> norm_num\n  \n  have h_main : 72 ≤ m + n := by\n    have h₃ : 0 < m := h₀.1\n    have h₄ : 0 < n := h₀.2\n    have h₅ : m * n = 896 := h_product\n    have h₆ : Nat.gcd m n = 8 := h₁\n    have h₇ : Nat.lcm m n = 112 := h₂\n    -- Use the fact that m and n are positive integers and their product is 896 to find possible pairs\n    have h₈ : m + n ≥ 72 := by\n      by_contra! h\n      -- If m + n < 72, then m and n are bounded above\n      have h₉ : m ≤ 71 := by\n        nlinarith\n      have h₁₀ : n ≤ 71 := by\n        nlinarith\n      -- Use the fact that m and n are positive integers and their product is 896 to find possible pairs\n      have h₁₁ : m ≤ 71 := by nlinarith\n      have h₁₂ : n ≤ 71 := by nlinarith\n      interval_cases m <;> norm_num at h₅ ⊢ <;>\n        (try omega) <;>\n        (try {\n          interval_cases n <;> norm_num at h₅ h₆ h₇ ⊢ <;>\n            (try omega) <;>\n            (try {\n              norm_num [Nat.gcd_eq_right, Nat.lcm, Nat.gcd_mul_left, Nat.gcd_mul_right] at h₆ h₇ ⊢ <;>\n                omega\n            })\n        }) <;>\n        (try {\n          norm_num [Nat.gcd_eq_right, Nat.lcm, Nat.gcd_mul_left, Nat.gcd_mul_right] at h₆ h₇ ⊢ <;>\n            omega\n        })\n    exact h₈\n  \n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_711\n  (m n : ℕ)\n  (h₀ : 0 < m ∧ 0 < n)\n  (h₁ : Nat.gcd m n = 8)\n  (h₂ : Nat.lcm m n = 112) :\n  72 ≤ m + n := by\n  have : m * n = 896 := by\n    rw [← Nat.gcd_mul_lcm m n]\n    simp_all\n  by_contra!\n  have : m ≤ 71 := by nlinarith\n  have : n ≤ 71 := by nlinarith\n  interval_cases m <;> interval_cases n <;> simp_all",
    "orig_proof_length": 232,
    "simp_proof_length": 42
  },
  {
    "problem_id": "mathd_algebra_113",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_113\n  (x : ℝ) :\n  x^2 - 14 * x + 3 ≥ 7^2 - 14 * 7 + 3 := by\n  have h_main : x^2 - 14 * x + 3 ≥ 7^2 - 14 * 7 + 3 := by\n    norm_num [pow_two]\n    nlinarith [sq_nonneg (x - 7)]\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_113\n  (x : ℝ) :\n  x^2 - 14 * x + 3 ≥ 7^2 - 14 * 7 + 3 := by\n  nlinarith [sq_nonneg (x - 7)]",
    "orig_proof_length": 39,
    "simp_proof_length": 9
  },
  {
    "problem_id": "amc12b_2020_p22",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2020_p22\n  (t : ℝ) :\n  ((2^t - 3 * t) * t) / (4^t) ≤ 1 / 12 := by\n  have h_main : ((2:ℝ)^t - 3 * t) * t / (4:ℝ)^t ≤ 1 / 12 := by\n    have h₁ : ((2:ℝ)^t - 3 * t) * t / (4:ℝ)^t = (t / (2:ℝ)^t) - 3 * (t / (2:ℝ)^t) ^ 2 := by\n      have h₁₁ : (4:ℝ)^t = (2:ℝ)^(2 * t) := by\n        rw [show (4:ℝ) = (2:ℝ)^( (2:ℝ) ) by norm_num]\n        rw [← Real.rpow_mul] <;>\n        ring_nf <;>\n        norm_num\n        <;>\n        linarith\n      have h₁₂ : (2:ℝ)^(2 * t) = ((2:ℝ)^t)^2 := by\n        have h₁₂₁ : (2:ℝ)^(2 * t) = (2:ℝ)^(t + t) := by ring_nf\n        rw [h₁₂₁]\n        have h₁₂₂ : (2:ℝ)^(t + t) = (2:ℝ)^t * (2:ℝ)^t := by\n          rw [Real.rpow_add (by norm_num : (2:ℝ) > 0)] <;>\n          ring_nf\n        rw [h₁₂₂]\n        ring_nf\n      have h₁₃ : ((2:ℝ)^t - 3 * t) * t / (4:ℝ)^t = ((2:ℝ)^t * t - 3 * t ^ 2) / (4:ℝ)^t := by\n        ring_nf\n        <;>\n        field_simp\n        <;>\n        ring_nf\n      rw [h₁₃]\n      have h₁₄ : ((2:ℝ)^t * t - 3 * t ^ 2) / (4:ℝ)^t = (t / (2:ℝ)^t) - 3 * (t / (2:ℝ)^t) ^ 2 := by\n        have h₁₄₁ : (4:ℝ)^t = ((2:ℝ)^t)^2 := by\n          rw [h₁₁, h₁₂]\n        rw [h₁₄₁]\n        have h₁₄₂ : (2:ℝ)^t > 0 := by positivity\n        field_simp [h₁₄₂.ne']\n        <;>\n        ring_nf\n        <;>\n        field_simp [h₁₄₂.ne']\n        <;>\n        ring_nf\n        <;>\n        nlinarith\n      rw [h₁₄]\n    rw [h₁]\n    have h₂ : ∀ (y : ℝ), y - 3 * y ^ 2 ≤ 1 / 12 := by\n      intro y\n      have h₂₁ : y - 3 * y ^ 2 ≤ 1 / 12 := by\n        nlinarith [sq_nonneg (y - 1 / 6)]\n      exact h₂₁\n    have h₃ : (t / (2:ℝ)^t : ℝ) - 3 * (t / (2:ℝ)^t : ℝ) ^ 2 ≤ 1 / 12 := by\n      have h₃₁ : (t / (2:ℝ)^t : ℝ) - 3 * (t / (2:ℝ)^t : ℝ) ^ 2 ≤ 1 / 12 := by\n        apply h₂\n      exact h₃₁\n    linarith\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2020_p22\n  (t : ℝ) :\n  ((2^t - 3 * t) * t) / (4^t) ≤ 1 / 12 := by\n  rw [show (4:ℝ)^t = (2:ℝ)^(2 * t) by norm_num [Real.rpow_mul]]\n  rw [show (2:ℝ)^(2 * t) = ((2:ℝ)^t)^2 by\n    rw [show (2:ℝ)^(2 * t) = (2:ℝ)^(t + t) by ring]\n    rw [Real.rpow_add two_pos]\n    ring]\n  rw [show ((2:ℝ)^t - 3 * t) * t / ((2:ℝ)^t)^2 = (t / (2:ℝ)^t) - 3 * (t / (2:ℝ)^t) ^ 2 by\n    field_simp [show (2:ℝ)^t > 0 by positivity]\n    <;> ring]\n  nlinarith [sq_nonneg (t / (2:ℝ)^t - 1 / 6)]",
    "orig_proof_length": 598,
    "simp_proof_length": 187
  },
  {
    "problem_id": "algebra_amgm_sumasqdivbgeqsuma",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_amgm_sumasqdivbgeqsuma\n  (a b c d : ℝ)\n  (h₀ : 0 < a ∧ 0 < b ∧ 0 < c ∧ 0 < d) :\n  a^2 / b + b^2 / c + c^2 / d + d^2 / a ≥ a + b + c + d := by\n  have h₁ : ∀ (x y : ℝ), 0 < x → 0 < y → x^2 / y + y ≥ 2 * x := by\n    intro x y hx hy\n    have h₂ : 0 < y := hy\n    have h₃ : 0 < x := hx\n    have h₄ : 0 < x * y := mul_pos h₃ h₂\n    have h₅ : (x - y) ^ 2 / y ≥ 0 := by\n      apply div_nonneg\n      · exact sq_nonneg (x - y)\n      · exact le_of_lt h₂\n    have h₆ : x ^ 2 / y + y - 2 * x = (x - y) ^ 2 / y := by\n      field_simp [h₂.ne']\n      ring_nf\n      <;> field_simp [h₂.ne']\n      <;> ring_nf\n      <;> linarith\n    have h₇ : x ^ 2 / y + y - 2 * x ≥ 0 := by\n      linarith\n    linarith\n  \n  have h₂ : a^2 / b + b ≥ 2 * a := by\n    have h₂₁ : 0 < a := h₀.1\n    have h₂₂ : 0 < b := h₀.2.1\n    have h₂₃ : a^2 / b + b ≥ 2 * a := h₁ a b h₂₁ h₂₂\n    exact h₂₃\n  \n  have h₃ : b^2 / c + c ≥ 2 * b := by\n    have h₃₁ : 0 < b := h₀.2.1\n    have h₃₂ : 0 < c := h₀.2.2.1\n    have h₃₃ : b^2 / c + c ≥ 2 * b := h₁ b c h₃₁ h₃₂\n    exact h₃₃\n  \n  have h₄ : c^2 / d + d ≥ 2 * c := by\n    have h₄₁ : 0 < c := h₀.2.2.1\n    have h₄₂ : 0 < d := h₀.2.2.2\n    have h₄₃ : c^2 / d + d ≥ 2 * c := h₁ c d h₄₁ h₄₂\n    exact h₄₃\n  \n  have h₅ : d^2 / a + a ≥ 2 * d := by\n    have h₅₁ : 0 < d := h₀.2.2.2\n    have h₅₂ : 0 < a := h₀.1\n    have h₅₃ : d^2 / a + a ≥ 2 * d := h₁ d a h₅₁ h₅₂\n    exact h₅₃\n  \n  have h₆ : a^2 / b + b^2 / c + c^2 / d + d^2 / a + (a + b + c + d) ≥ 2 * (a + b + c + d) := by\n    have h₆₁ : a^2 / b + b ≥ 2 * a := h₂\n    have h₆₂ : b^2 / c + c ≥ 2 * b := h₃\n    have h₆₃ : c^2 / d + d ≥ 2 * c := h₄\n    have h₆₄ : d^2 / a + a ≥ 2 * d := h₅\n    have h₆₅ : a^2 / b + b^2 / c + c^2 / d + d^2 / a + (a + b + c + d) = (a^2 / b + b) + (b^2 / c + c) + (c^2 / d + d) + (d^2 / a + a) := by\n      ring\n    rw [h₆₅]\n    linarith\n  \n  have h₇ : a^2 / b + b^2 / c + c^2 / d + d^2 / a ≥ a + b + c + d := by\n    have h₇₁ : a^2 / b + b^2 / c + c^2 / d + d^2 / a + (a + b + c + d) ≥ 2 * (a + b + c + d) := h₆\n    have h₇₂ : a^2 / b + b^2 / c + c^2 / d + d^2 / a ≥ a + b + c + d := by\n      linarith\n    exact h₇₂\n  \n  exact h₇",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_amgm_sumasqdivbgeqsuma\n  (a b c d : ℝ)\n  (h₀ : 0 < a ∧ 0 < b ∧ 0 < c ∧ 0 < d) :\n  a^2 / b + b^2 / c + c^2 / d + d^2 / a ≥ a + b + c + d := by\n  have : ∀ {x y : ℝ}, 0 < x → 0 < y → x ^ 2 / y + y ≥ 2 * x := by\n    intro x y hx hy\n    have : x ^ 2 / y + y - 2 * x = (x - y) ^ 2 / y := by\n      field_simp [hy.ne']\n      ring_nf\n    linarith [div_nonneg (sq_nonneg (x - y)) hy.le]\n  nlinarith [this h₀.1 h₀.2.1, this h₀.2.1 h₀.2.2.1, this h₀.2.2.1 h₀.2.2.2, this h₀.2.2.2 h₀.1]",
    "orig_proof_length": 703,
    "simp_proof_length": 97
  },
  {
    "problem_id": "mathd_numbertheory_212",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_212 :\n  (16^17 * 17^18 * 18^19) % 10 = 8 := by\n  have h1 : (16^17 * 17^18 * 18^19) % 10 = 8 := by\n    norm_num [pow_succ, Nat.mul_mod, Nat.pow_mod, Nat.mod_mod]\n    <;>\n    rfl\n  exact h1",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_212 :\n  (16^17 * 17^18 * 18^19) % 10 = 8 := by\n  norm_num",
    "orig_proof_length": 36,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_320",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_320\n  (n : ℕ)\n  (h₀ : n < 101)\n  (h₁ : 101 ∣ (123456 - n)) :\n  n = 34 := by\n  have h₂ : n = 34 := by\n    have h₃ : n ≤ 100 := by linarith\n    interval_cases n <;> norm_num at h₁ ⊢ <;>\n      (try omega) <;>\n      (try\n        {\n          norm_num at h₁\n          <;>\n          (try contradiction)\n          <;>\n          (try omega)\n        })\n    <;>\n    (try\n      {\n        omega\n      })\n  exact h₂",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_320\n  (n : ℕ)\n  (h₀ : n < 101)\n  (h₁ : 101 ∣ (123456 - n)) :\n  n = 34 := by\n  omega",
    "orig_proof_length": 57,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_125",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_125\n  (x y : ℕ)\n  (h₀ : 0 < x ∧ 0 < y)\n  (h₁ : 5 * x = y)\n  (h₂ : (↑x - (3:ℤ)) + (y - (3:ℤ)) = 30) :\n  x = 6 := by\n  have h₃ : (x : ℤ) = 6 := by\n    have h₃₁ : (y : ℤ) = 5 * (x : ℤ) := by\n      norm_cast\n      <;> rw [h₁]\n      <;> ring_nf\n      <;> norm_cast\n    have h₃₂ : (↑x - (3 : ℤ)) + (↑y - (3 : ℤ)) = 30 := h₂\n    rw [h₃₁] at h₃₂\n    ring_nf at h₃₂ ⊢\n    -- Simplify the equation to 6 * (x : ℤ) - 6 = 30\n    linarith\n  \n  have h₄ : x = 6 := by\n    norm_cast at h₃\n    <;>\n    (try omega) <;>\n    (try linarith)\n  \n  exact h₄",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_125\n  (x y : ℕ)\n  (h₀ : 0 < x ∧ 0 < y)\n  (h₁ : 5 * x = y)\n  (h₂ : (↑x - (3:ℤ)) + (y - (3:ℤ)) = 30) :\n  x = 6 := by\n  omega",
    "orig_proof_length": 105,
    "simp_proof_length": 1
  },
  {
    "problem_id": "amc12_2000_p1",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12_2000_p1\n  (i m o : ℕ)\n  (h₀ : i ≠ m ∧ m ≠ o ∧ o ≠ i)\n  (h₁ : i*m*o = 2001) :\n  i+m+o ≤ 671 := by\n  have h_main : i + m + o ≤ 671 := by\n    have h₂ : i ∣ 2001 := by\n      use m * o\n      <;>\n      (try omega) <;>\n      (try ring_nf at h₁ ⊢) <;>\n      (try linarith) <;>\n      (try nlinarith) <;>\n      (try nlinarith) <;>\n      (try omega)\n      <;>\n      linarith\n    have h₃ : m ∣ 2001 := by\n      use i * o\n      <;>\n      (try omega) <;>\n      (try ring_nf at h₁ ⊢) <;>\n      (try linarith) <;>\n      (try nlinarith) <;>\n      (try nlinarith) <;>\n      (try omega)\n      <;>\n      linarith\n    have h₄ : o ∣ 2001 := by\n      use i * m\n      <;>\n      (try omega) <;>\n      (try ring_nf at h₁ ⊢) <;>\n      (try linarith) <;>\n      (try nlinarith) <;>\n      (try nlinarith) <;>\n      (try omega)\n      <;>\n      linarith\n    -- We now check all possible divisors of 2001 for i, m, o and ensure the sum does not exceed 671.\n    have h₅ : i ≤ 2001 := by\n      have h₅₁ : i ∣ 2001 := h₂\n      exact Nat.le_of_dvd (by norm_num) h₅₁\n    have h₆ : m ≤ 2001 := by\n      have h₆₁ : m ∣ 2001 := h₃\n      exact Nat.le_of_dvd (by norm_num) h₆₁\n    have h₇ : o ≤ 2001 := by\n      have h₇₁ : o ∣ 2001 := h₄\n      exact Nat.le_of_dvd (by norm_num) h₇₁\n    -- We use interval_cases to check all possible values of i, m, o within the range [1, 2001].\n    -- This is a brute-force approach but ensures we cover all cases.\n    interval_cases i <;> norm_num at h₂ h₁ ⊢ <;>\n      (try omega) <;>\n      (try {\n        interval_cases m <;> norm_num at h₃ h₁ ⊢ <;>\n          (try omega) <;>\n          (try {\n            interval_cases o <;> norm_num at h₄ h₁ ⊢ <;>\n              (try omega) <;>\n              (try {\n                simp_all [Nat.mul_assoc]\n                <;>\n                (try omega)\n              })\n          })\n      })\n    <;>\n    (try {\n      norm_num at h₁ ⊢ <;>\n      (try omega)\n    })\n    <;>\n    (try {\n      simp_all [Nat.mul_assoc]\n      <;>\n      (try omega)\n    })\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12_2000_p1\n  (i m o : ℕ)\n  (h₀ : i ≠ m ∧ m ≠ o ∧ o ≠ i)\n  (h₁ : i*m*o = 2001) :\n  i+m+o ≤ 671 := by\n  rcases i with (_ | _ | _ | _ | _ | _ | _ | _ | _ | i) <;>\n  rcases m with (_ | _ | _ | _ | _ | _ | _ | _ | _ | m) <;>\n  rcases o with (_ | _ | _ | _ | _ | _ | _ | _ | _ | o) <;>\n  simp_all\n  all_goals\n    ring_nf at h₁\n    omega",
    "orig_proof_length": 323,
    "simp_proof_length": 81
  },
  {
    "problem_id": "mathd_algebra_148",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_148\n  (c : ℝ)\n  (f : ℝ → ℝ)\n  (h₀ : ∀ x, f x = c * x^3 - 9 * x + 3)\n  (h₁ : f 2 = 9) :\n  c = 3 := by\n  have h_main : c = 3 := by\n    have h₂ : f 2 = c * (2 : ℝ)^3 - 9 * (2 : ℝ) + 3 := by\n      rw [h₀]\n      <;> norm_num\n    rw [h₂] at h₁\n    norm_num at h₁ ⊢\n    linarith\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_148\n  (c : ℝ)\n  (f : ℝ → ℝ)\n  (h₀ : ∀ x, f x = c * x^3 - 9 * x + 3)\n  (h₁ : f 2 = 9) :\n  c = 3 := by\n  simp_all\n  linarith",
    "orig_proof_length": 54,
    "simp_proof_length": 2
  },
  {
    "problem_id": "induction_1pxpownlt1pnx",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem induction_1pxpownlt1pnx\n  (x : ℝ)\n  (n : ℕ)\n  (h₀ : -1 < x)\n  (h₁ : 0 < n) :\n  (1 + ↑n*x) ≤ (1 + x)^(n:ℕ) := by\n  have h_main : (1 + (n : ℝ) * x) ≤ (1 + x) ^ n := by\n    have h₂ : 1 + x > 0 := by linarith\n    -- Use induction on n\n    have h₃ : ∀ (n : ℕ), 0 < n → (1 + (n : ℝ) * x) ≤ (1 + x) ^ n := by\n      intro n hn\n      induction' hn with n hn IH\n      · -- Base case: n = 1\n        norm_num\n        <;>\n        (try norm_num at *) <;>\n        (try linarith)\n      · -- Inductive step: assume the statement holds for n, prove for n + 1\n        simp [pow_succ, mul_add, add_mul, mul_one, mul_assoc] at IH ⊢\n        -- Use nlinarith to handle the inequality involving squares\n        nlinarith [sq_nonneg (x : ℝ), mul_nonneg (Nat.cast_nonneg n) (sq_nonneg x),\n          mul_pos (by positivity : (0 : ℝ) < 1 + x) (by positivity : (0 : ℝ) < 1 + x)]\n    -- Apply the general statement to n and h₁\n    exact h₃ n h₁\n  -- The main statement directly implies the goal\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem induction_1pxpownlt1pnx\n  (x : ℝ)\n  (n : ℕ)\n  (h₀ : -1 < x)\n  (h₁ : 0 < n) :\n  (1 + ↑n*x) ≤ (1 + x)^(n:ℕ) := by\n  induction' h₁ with k hk\n  all_goals simp_all [pow_succ]\n  nlinarith [sq_nonneg x]",
    "orig_proof_length": 168,
    "simp_proof_length": 15
  },
  {
    "problem_id": "induction_11div10tonmn1ton",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem induction_11div10tonmn1ton\n  (n : ℕ) :\n  11 ∣ (10^n - (-1 : ℤ)^n) := by\n  have h_main : (11 : ℤ) ∣ (10 : ℤ)^n - (-1 : ℤ)^n := by\n    have h : (10 : ℤ) - (-1 : ℤ) ∣ (10 : ℤ)^n - (-1 : ℤ)^n := by\n      -- Use the lemma that x - y divides x^n - y^n in a commutative ring\n      apply sub_dvd_pow_sub_pow\n    -- Simplify (10 : ℤ) - (-1 : ℤ) to 11\n    have h₁ : (10 : ℤ) - (-1 : ℤ) = (11 : ℤ) := by norm_num\n    -- Substitute 11 for (10 : ℤ) - (-1 : ℤ) in the divisibility statement\n    rw [h₁] at h\n    -- The result follows directly from the divisibility statement\n    exact h\n  \n  -- Convert the divisibility statement in ℤ to the required form\n  exact_mod_cast h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem induction_11div10tonmn1ton\n  (n : ℕ) :\n  11 ∣ (10^n - (-1 : ℤ)^n) := by\n  apply sub_dvd_pow_sub_pow",
    "orig_proof_length": 103,
    "simp_proof_length": 2
  },
  {
    "problem_id": "amc12a_2019_p12",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2019_p12 (x y : ℕ) (h₀ : x ≠ 1 ∧ y ≠ 1)\n    (h₁ : Real.log x / Real.log 2 = Real.log 16 / Real.log y) (h₂ : x * y = 64) :\n    (Real.log (x / y) / Real.log 2) ^ 2 = 20 := by\n  have h_main : False := by\n    have h₃ : x ∣ 64 := by\n      use y\n      <;> norm_cast at h₂ ⊢ <;> linarith\n    have h₄ : y ∣ 64 := by\n      use x\n      <;> norm_cast at h₂ ⊢ <;> linarith\n    have h₅ : x = 2 ∨ x = 4 ∨ x = 8 ∨ x = 16 ∨ x = 32 ∨ x = 64 := by\n      have h₅₁ : x ∣ 64 := h₃\n      have h₅₂ : x ≠ 1 := h₀.1\n      have h₅₃ : x ≤ 64 := by\n        have h₅₄ : x ∣ 64 := h₃\n        exact Nat.le_of_dvd (by norm_num) h₅₄\n      interval_cases x <;> norm_num at h₅₁ ⊢ <;>\n        (try omega) <;> (try norm_num) <;> (try omega)\n      <;>\n      (try {\n        simp_all [Nat.dvd_iff_mod_eq_zero]\n        <;> omega\n      })\n    have h₆ : y = 2 ∨ y = 4 ∨ y = 8 ∨ y = 16 ∨ y = 32 ∨ y = 64 := by\n      have h₆₁ : y ∣ 64 := h₄\n      have h₆₂ : y ≠ 1 := h₀.2\n      have h₆₃ : y ≤ 64 := by\n        have h₆₄ : y ∣ 64 := h₄\n        exact Nat.le_of_dvd (by norm_num) h₆₄\n      interval_cases y <;> norm_num at h₆₁ ⊢ <;>\n        (try omega) <;> (try norm_num) <;> (try omega)\n      <;>\n      (try {\n        simp_all [Nat.dvd_iff_mod_eq_zero]\n        <;> omega\n      })\n    -- We now check all possible pairs (x, y) to find a contradiction.\n    have h₇ : False := by\n      rcases h₅ with (rfl | rfl | rfl | rfl | rfl | rfl) <;>\n        rcases h₆ with (rfl | rfl | rfl | rfl | rfl | rfl) <;>\n          norm_num at h₀ h₂ ⊢ <;>\n          (try contradiction) <;>\n          (try {\n            have h₈ : Real.log 2 > 0 := Real.log_pos (by norm_num)\n            have h₉ : Real.log 4 = 2 * Real.log 2 := by\n              have h₉₁ : Real.log 4 = Real.log (2 ^ 2) := by norm_num\n              rw [h₉₁]\n              have h₉₂ : Real.log (2 ^ 2) = 2 * Real.log 2 := by\n                rw [Real.log_pow] <;> norm_num\n              rw [h₉₂]\n            have h₁₀ : Real.log 8 = 3 * Real.log 2 := by\n              have h₁₀₁ : Real.log 8 = Real.log (2 ^ 3) := by norm_num\n              rw [h₁₀₁]\n              have h₁₀₂ : Real.log (2 ^ 3) = 3 * Real.log 2 := by\n                rw [Real.log_pow] <;> norm_num\n              rw [h₁₀₂]\n            have h₁₁ : Real.log 16 = 4 * Real.log 2 := by\n              have h₁₁₁ : Real.log 16 = Real.log (2 ^ 4) := by norm_num\n              rw [h₁₁₁]\n              have h₁₁₂ : Real.log (2 ^ 4) = 4 * Real.log 2 := by\n                rw [Real.log_pow] <;> norm_num\n              rw [h₁₁₂]\n            have h₁₂ : Real.log 32 = 5 * Real.log 2 := by\n              have h₁₂₁ : Real.log 32 = Real.log (2 ^ 5) := by norm_num\n              rw [h₁₂₁]\n              have h₁₂₂ : Real.log (2 ^ 5) = 5 * Real.log 2 := by\n                rw [Real.log_pow] <;> norm_num\n              rw [h₁₂₂]\n            have h₁₃ : Real.log 64 = 6 * Real.log 2 := by\n              have h₁₃₁ : Real.log 64 = Real.log (2 ^ 6) := by norm_num\n              rw [h₁₃₁]\n              have h₁₃₂ : Real.log (2 ^ 6) = 6 * Real.log 2 := by\n                rw [Real.log_pow] <;> norm_num\n              rw [h₁₃₂]\n            -- Simplify the given logarithmic equation for each pair (x, y)\n            field_simp [Real.log_mul, Real.log_pow, h₉, h₁₀, h₁₁, h₁₂, h₁₃, Real.log_ne_zero_of_pos_of_ne_one (by norm_num : (0 : ℝ) < 2) (by norm_num : (2 : ℝ) ≠ 1)] at h₁ ⊢\n            <;>\n            (try {\n              nlinarith [Real.log_pos (by norm_num : (1 : ℝ) < 2)]\n            }) <;>\n            (try {\n              ring_nf at h₁ ⊢ <;>\n              nlinarith [Real.log_pos (by norm_num : (1 : ℝ) < 2)]\n            }) <;>\n            (try {\n              norm_num at h₁ ⊢ <;>\n              nlinarith [Real.log_pos (by norm_num : (1 : ℝ) < 2)]\n            })\n          })\n    exact h₇\n  have h_final : (Real.log (x / y) / Real.log 2) ^ 2 = 20 := by\n    exfalso\n    exact h_main\n  exact h_final",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2019_p12 (x y : ℕ) (h₀ : x ≠ 1 ∧ y ≠ 1)\n    (h₁ : Real.log x / Real.log 2 = Real.log 16 / Real.log y) (h₂ : x * y = 64) :\n    (Real.log (x / y) / Real.log 2) ^ 2 = 20 := by\n  have h₃ : x ∣ 64 := by\n    use y\n    linarith\n  have h₄ : y ∣ 64 := by\n    use x\n    linarith\n  have h₅ : x ≤ 64 := Nat.le_of_dvd (by norm_num) h₃\n  have h₆ : y ≤ 64 := Nat.le_of_dvd (by norm_num) h₄\n  interval_cases x <;> interval_cases y <;> norm_num at h₀ h₂ h₁ ⊢\n  all_goals\n    have h₈ : Real.log 2 > 0 := Real.log_pos (by norm_num)\n    have h₉ : Real.log 4 = 2 * Real.log 2 := by\n      rw [← Real.log_rpow] <;> norm_num\n    have h₁₀ : Real.log 8 = 3 * Real.log 2 := by\n      rw [← Real.log_rpow] <;> norm_num\n    have h₁₁ : Real.log 16 = 4 * Real.log 2 := by\n      rw [← Real.log_rpow] <;> norm_num\n    have h₁₂ : Real.log 32 = 5 * Real.log 2 := by\n      rw [← Real.log_rpow] <;> norm_num\n    have h₁₃ : Real.log 64 = 6 * Real.log 2 := by\n      rw [← Real.log_rpow] <;> norm_num\n    field_simp [Real.log_mul, Real.log_pow, h₉, h₁₀, h₁₁, h₁₂, h₁₃, Real.log_ne_zero_of_pos_of_ne_one (by norm_num : (0 : ℝ) < 2) (by norm_num : (2 : ℝ) ≠ 1)] at h₁ ⊢\n    <;> nlinarith [Real.log_pos (by norm_num : (1 : ℝ) < 2)]",
    "orig_proof_length": 746,
    "simp_proof_length": 231
  },
  {
    "problem_id": "algebra_amgm_sum1toneqn_prod1tonleq1",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_amgm_sum1toneqn_prod1tonleq1\n  (a : ℕ → NNReal)\n  (n : ℕ)\n  (h₀ : ∑ x ∈ Finset.range n, a x = n) :\n  ∏ x ∈ Finset.range n, a x ≤ 1 := by\n  have h₁ : (∏ x ∈ Finset.range n, (a x : ℝ)) ≤ 1 := by\n    have h₂ : ∀ (x : ℝ), 0 ≤ x → x ≤ Real.exp (x - 1) := by\n      intro x hx\n      have h₃ : Real.exp (x - 1) ≥ x := by\n        have h₄ : Real.exp (x - 1) ≥ 1 + (x - 1) := by\n          linarith [Real.add_one_le_exp (x - 1)]\n        linarith\n      linarith\n    have h₃ : ∀ i ∈ Finset.range n, (a i : ℝ) ≤ Real.exp ((a i : ℝ) - 1) := by\n      intro i _\n      have h₄ : 0 ≤ (a i : ℝ) := by exact mod_cast (a i).prop\n      exact h₂ (a i : ℝ) h₄\n    have h₄ : (∏ x ∈ Finset.range n, (a x : ℝ)) ≤ ∏ x ∈ Finset.range n, Real.exp ((a x : ℝ) - 1) := by\n      apply Finset.prod_le_prod\n      · intro i hi\n        exact by\n          have h₅ : 0 ≤ (a i : ℝ) := by exact mod_cast (a i).prop\n          linarith [h₃ i hi]\n      · intro i hi\n        exact h₃ i hi\n    have h₅ : ∏ x ∈ Finset.range n, Real.exp ((a x : ℝ) - 1) = Real.exp (∑ x ∈ Finset.range n, ((a x : ℝ) - 1)) := by\n      have h₆ : ∏ x ∈ Finset.range n, Real.exp ((a x : ℝ) - 1) = Real.exp (∑ x ∈ Finset.range n, ((a x : ℝ) - 1)) := by\n        rw [Real.exp_sum]\n        <;> simp [Finset.prod_const]\n      rw [h₆]\n    have h₆ : (∑ x ∈ Finset.range n, ((a x : ℝ) - 1 : ℝ)) = 0 := by\n      have h₇ : (∑ x ∈ Finset.range n, ((a x : ℝ) - 1 : ℝ)) = (∑ x ∈ Finset.range n, (a x : ℝ)) - n := by\n        calc\n          (∑ x ∈ Finset.range n, ((a x : ℝ) - 1 : ℝ)) = ∑ x ∈ Finset.range n, ((a x : ℝ) - 1 : ℝ) := rfl\n          _ = ∑ x ∈ Finset.range n, ((a x : ℝ) - 1 : ℝ) := rfl\n          _ = (∑ x ∈ Finset.range n, (a x : ℝ)) - ∑ x ∈ Finset.range n, (1 : ℝ) := by\n            rw [Finset.sum_sub_distrib]\n          _ = (∑ x ∈ Finset.range n, (a x : ℝ)) - n := by\n            simp [Finset.sum_const, Finset.card_range]\n            <;> ring_nf\n            <;> norm_cast\n            <;> field_simp\n            <;> ring_nf\n      have h₈ : (∑ x ∈ Finset.range n, (a x : ℝ)) = n := by\n        have h₉ : (∑ x ∈ Finset.range n, (a x : ℝ)) = (∑ x ∈ Finset.range n, a x : ℝ) := by simp\n        rw [h₉]\n        norm_cast\n        <;> simp [h₀]\n        <;> simp_all [Finset.sum_range_succ]\n        <;> norm_num\n        <;> linarith\n      rw [h₇, h₈]\n      <;> ring_nf\n      <;> norm_num\n    have h₇ : Real.exp (∑ x ∈ Finset.range n, ((a x : ℝ) - 1)) = 1 := by\n      rw [h₆]\n      norm_num [Real.exp_zero]\n    calc\n      (∏ x ∈ Finset.range n, (a x : ℝ)) ≤ ∏ x ∈ Finset.range n, Real.exp ((a x : ℝ) - 1) := h₄\n      _ = Real.exp (∑ x ∈ Finset.range n, ((a x : ℝ) - 1)) := by rw [h₅]\n      _ = 1 := by rw [h₇]\n  \n  have h₂ : ∏ x ∈ Finset.range n, a x ≤ 1 := by\n    have h₃ : (∏ x ∈ Finset.range n, a x : ℝ) ≤ 1 := by\n      -- Use the fact that the product of the real numbers is less than or equal to 1\n      simpa [Finset.prod_coe_sort] using h₁\n    -- Use the property of the coercion from NNReal to Real to conclude the proof\n    exact mod_cast h₃\n  \n  exact h₂",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_amgm_sum1toneqn_prod1tonleq1\n  (a : ℕ → NNReal)\n  (n : ℕ)\n  (h₀ : ∑ x ∈ Finset.range n, a x = n) :\n  ∏ x ∈ Finset.range n, a x ≤ 1 := by\n  exact_mod_cast calc\n    ∏ x ∈ Finset.range n, (a x : ℝ) ≤ ∏ x ∈ Finset.range n, Real.exp ((a x : ℝ) - 1) :=\n      Finset.prod_le_prod (fun i _ ↦ by simp) (fun i _ ↦ by\n        linarith [add_one_le_exp ((a i : ℝ) - 1)])\n    _ = Real.exp (∑ x ∈ Finset.range n, ((a x : ℝ) - 1)) := by rw [Real.exp_sum]\n    _ = 1 := by simp [show ∑ x ∈ Finset.range n, (a x : ℝ) = n by exact_mod_cast h₀]",
    "orig_proof_length": 766,
    "simp_proof_length": 116
  },
  {
    "problem_id": "mathd_algebra_332",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_332\n  (x y : ℝ)\n  (h₀ : (x + y) / 2 = 7)\n  (h₁ : Real.sqrt (x * y) = Real.sqrt 19) :\n  x^2 + y^2 = 158 := by\n  have h₂ : x + y = 14 := by\n    have h₂₁ : (x + y) / 2 = 7 := h₀\n    have h₂₂ : x + y = 14 := by\n      linarith\n    exact h₂₂\n  \n  have h₃ : x * y = 19 := by\n    have h₃₁ : Real.sqrt (x * y) = Real.sqrt 19 := h₁\n    have h₃₂ : Real.sqrt 19 > 0 := Real.sqrt_pos.mpr (by norm_num)\n    have h₃₃ : x * y ≥ 0 := by\n      by_contra h\n      have h₄ : x * y < 0 := by linarith\n      have h₅ : Real.sqrt (x * y) = 0 := by\n        rw [Real.sqrt_eq_zero_of_nonpos] <;> linarith\n      have h₆ : Real.sqrt 19 > 0 := Real.sqrt_pos.mpr (by norm_num)\n      rw [h₅] at h₃₁\n      linarith\n    have h₃₄ : Real.sqrt (x * y) = Real.sqrt 19 := h₁\n    have h₃₅ : (Real.sqrt (x * y)) ^ 2 = (Real.sqrt 19) ^ 2 := by rw [h₃₄]\n    have h₃₆ : (Real.sqrt (x * y)) ^ 2 = x * y := by\n      rw [Real.sq_sqrt] <;> linarith\n    have h₃₇ : (Real.sqrt 19) ^ 2 = (19 : ℝ) := by\n      rw [Real.sq_sqrt] <;> norm_num\n    nlinarith\n  \n  have h₄ : x^2 + y^2 = 158 := by\n    have h₄₁ : x ^ 2 + y ^ 2 = (x + y) ^ 2 - 2 * (x * y) := by ring\n    rw [h₄₁]\n    rw [h₂, h₃]\n    norm_num\n  \n  exact h₄",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_332\n  (x y : ℝ)\n  (h₀ : (x + y) / 2 = 7)\n  (h₁ : Real.sqrt (x * y) = Real.sqrt 19) :\n  x^2 + y^2 = 158 := by\n  have : x * y = 19 := by\n    have : 0 ≤ x * y := by\n      apply le_of_lt\n      apply Real.sqrt_pos.mp\n      rw [h₁]\n      norm_num\n    rw [Real.sqrt_inj this (by norm_num)] at h₁\n    linarith\n  nlinarith",
    "orig_proof_length": 284,
    "simp_proof_length": 40
  },
  {
    "problem_id": "mathd_algebra_440",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_440\n  (x : ℝ)\n  (h₀ : 3 / 2 / 3 = x / 10) :\n  x = 5 := by\n  have h₁ : x = 5 := by\n    have h₂ : (3 : ℝ) / 2 / 3 = x / 10 := h₀\n    -- Simplify the left-hand side of the equation\n    norm_num at h₂ ⊢\n    -- Solve the equation using linear arithmetic\n    <;> linarith\n  -- The final result is x = 5\n  exact h₁",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_440\n  (x : ℝ)\n  (h₀ : 3 / 2 / 3 = x / 10) :\n  x = 5 := by\n  linarith",
    "orig_proof_length": 37,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_293",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_293\n  (x : NNReal) :\n  Real.sqrt (60 * x) * Real.sqrt (12 * x) * Real.sqrt (63 * x) = 36 * x * Real.sqrt (35 * x) := by\n  have h₁ : (Real.sqrt (60 * x) * Real.sqrt (12 * x) * Real.sqrt (63 * x) : ℝ) = Real.sqrt ((60 * x : ℝ) * (12 * x : ℝ) * (63 * x : ℝ)) := by\n    have h₁₁ : 0 ≤ (60 * x : ℝ) := by positivity\n    have h₁₂ : 0 ≤ (12 * x : ℝ) := by positivity\n    have h₁₃ : 0 ≤ (63 * x : ℝ) := by positivity\n    have h₁₄ : 0 ≤ (60 * x : ℝ) * (12 * x : ℝ) := by positivity\n    have h₁₅ : 0 ≤ (60 * x : ℝ) * (12 * x : ℝ) * (63 * x : ℝ) := by positivity\n    have h₁₆ : Real.sqrt (60 * x) * Real.sqrt (12 * x) = Real.sqrt ((60 * x : ℝ) * (12 * x : ℝ)) := by\n      rw [← Real.sqrt_mul] <;> positivity\n    calc\n      (Real.sqrt (60 * x) * Real.sqrt (12 * x) * Real.sqrt (63 * x) : ℝ) = Real.sqrt ((60 * x : ℝ) * (12 * x : ℝ)) * Real.sqrt (63 * x : ℝ) := by\n        rw [h₁₆]\n      _ = Real.sqrt ((60 * x : ℝ) * (12 * x : ℝ) * (63 * x : ℝ)) := by\n        have h₁₇ : 0 ≤ (60 * x : ℝ) * (12 * x : ℝ) := by positivity\n        have h₁₈ : 0 ≤ (63 * x : ℝ) := by positivity\n        have h₁₉ : 0 ≤ (60 * x : ℝ) * (12 * x : ℝ) * (63 * x : ℝ) := by positivity\n        rw [← Real.sqrt_mul] <;> ring_nf <;> positivity\n  \n  have h₂ : (60 : ℝ) * (12 : ℝ) * (63 : ℝ) = (36 : ℝ)^2 * (35 : ℝ) := by\n    norm_num\n  \n  have h₃ : ((60 * x : ℝ) * (12 * x : ℝ) * (63 * x : ℝ) : ℝ) = (36 * (x : ℝ))^2 * (35 * (x : ℝ)) := by\n    have h₃₁ : ((60 * x : ℝ) * (12 * x : ℝ) * (63 * x : ℝ) : ℝ) = (60 : ℝ) * (12 : ℝ) * (63 : ℝ) * (x : ℝ)^3 := by\n      ring_nf\n      <;> field_simp [NNReal.coe_mul, NNReal.coe_pow]\n      <;> ring_nf\n    rw [h₃₁]\n    have h₃₂ : (60 : ℝ) * (12 : ℝ) * (63 : ℝ) = (36 : ℝ)^2 * (35 : ℝ) := h₂\n    rw [h₃₂]\n    have h₃₃ : ((36 : ℝ)^2 * (35 : ℝ) * (x : ℝ)^3 : ℝ) = (36 * (x : ℝ))^2 * (35 * (x : ℝ)) := by\n      ring_nf\n      <;> field_simp [NNReal.coe_mul, NNReal.coe_pow]\n      <;> ring_nf\n      <;> norm_num\n      <;> nlinarith\n    linarith\n  \n  have h₄ : Real.sqrt ((60 * x : ℝ) * (12 * x : ℝ) * (63 * x : ℝ)) = 36 * (x : ℝ) * Real.sqrt (35 * (x : ℝ)) := by\n    have h₄₁ : 0 ≤ (x : ℝ) := by exact mod_cast x.property\n    have h₄₂ : 0 ≤ (36 * (x : ℝ) : ℝ) := by positivity\n    have h₄₃ : 0 ≤ (35 * (x : ℝ) : ℝ) := by positivity\n    have h₄₄ : 0 ≤ (36 * (x : ℝ))^2 * (35 * (x : ℝ)) := by positivity\n    have h₄₅ : Real.sqrt ((60 * x : ℝ) * (12 * x : ℝ) * (63 * x : ℝ)) = Real.sqrt ((36 * (x : ℝ))^2 * (35 * (x : ℝ))) := by\n      rw [h₃]\n    rw [h₄₅]\n    have h₄₆ : Real.sqrt ((36 * (x : ℝ))^2 * (35 * (x : ℝ))) = 36 * (x : ℝ) * Real.sqrt (35 * (x : ℝ)) := by\n      have h₄₇ : 0 ≤ (36 * (x : ℝ) : ℝ) := by positivity\n      have h₄₈ : 0 ≤ (35 * (x : ℝ) : ℝ) := by positivity\n      have h₄₉ : 0 ≤ (36 * (x : ℝ))^2 := by positivity\n      have h₄₁₀ : 0 ≤ (36 * (x : ℝ))^2 * (35 * (x : ℝ)) := by positivity\n      have h₄₁₁ : Real.sqrt ((36 * (x : ℝ))^2 * (35 * (x : ℝ))) = Real.sqrt ((36 * (x : ℝ))^2) * Real.sqrt (35 * (x : ℝ)) := by\n        rw [Real.sqrt_mul (by positivity)]\n      rw [h₄₁₁]\n      have h₄₁₂ : Real.sqrt ((36 * (x : ℝ))^2) = 36 * (x : ℝ) := by\n        rw [Real.sqrt_sq (by positivity)]\n      rw [h₄₁₂]\n      <;> ring_nf\n      <;> field_simp [Real.sqrt_eq_iff_sq_eq] <;> ring_nf <;> nlinarith\n    rw [h₄₆]\n    <;> ring_nf\n    <;> field_simp [Real.sqrt_eq_iff_sq_eq] <;> ring_nf <;> nlinarith\n  \n  have h₅ : (36 * (x : ℝ) * Real.sqrt (35 * (x : ℝ)) : ℝ) = (36 * x * Real.sqrt (35 * x) : ℝ) := by\n    simp [NNReal.coe_mul]\n    <;>\n    (try norm_num) <;>\n    (try ring_nf) <;>\n    (try field_simp [Real.sqrt_eq_iff_sq_eq]) <;>\n    (try norm_cast) <;>\n    (try simp_all [NNReal.coe_mul]) <;>\n    (try ring_nf) <;>\n    (try nlinarith)\n  \n  have h₆ : (Real.sqrt (60 * x) * Real.sqrt (12 * x) * Real.sqrt (63 * x) : ℝ) = (36 * x * Real.sqrt (35 * x) : ℝ) := by\n    calc\n      (Real.sqrt (60 * x) * Real.sqrt (12 * x) * Real.sqrt (63 * x) : ℝ) = Real.sqrt ((60 * x : ℝ) * (12 * x : ℝ) * (63 * x : ℝ)) := by\n        rw [h₁]\n      _ = 36 * (x : ℝ) * Real.sqrt (35 * (x : ℝ)) := by\n        rw [h₄]\n      _ = (36 * x * Real.sqrt (35 * x) : ℝ) := by\n        rw [h₅]\n  \n  exact_mod_cast h₆",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_293\n  (x : NNReal) :\n  Real.sqrt (60 * x) * Real.sqrt (12 * x) * Real.sqrt (63 * x) = 36 * x * Real.sqrt (35 * x) := by\n  rw [← Real.sqrt_mul]\n  rw [← Real.sqrt_mul]\n  rw [Real.sqrt_eq_iff_mul_self_eq]\n  · norm_num\n    ring_nf\n    simp\n    <;> ring_nf\n    <;> norm_cast\n  all_goals positivity",
    "orig_proof_length": 1343,
    "simp_proof_length": 24
  },
  {
    "problem_id": "mathd_numbertheory_254",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_254 :\n  (239 + 174 + 83) % 10 = 6 := by\n  have h : (239 + 174 + 83) % 10 = 6 := by\n    norm_num\n    <;> rfl\n  \n  apply h",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_254 :\n  (239 + 174 + 83) % 10 = 6 := by\n  norm_num",
    "orig_proof_length": 22,
    "simp_proof_length": 1
  },
  {
    "problem_id": "amc12_2000_p6",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12_2000_p6\n  (p q : ℕ)\n  (h₀ : Nat.Prime p ∧ Nat.Prime q)\n  (h₁ : 4 ≤ p ∧ p ≤ 18)\n  (h₂ : 4 ≤ q ∧ q ≤ 18) :\n  p * q - (p + q) ≠ 194 := by\n  have h_main : p * q - (p + q) ≠ 194 := by\n    have h₄ : p ≤ 18 := by linarith\n    have h₅ : q ≤ 18 := by linarith\n    have h₆ : p ≥ 4 := by linarith\n    have h₇ : q ≥ 4 := by linarith\n    interval_cases p <;> interval_cases q <;> norm_num [Nat.Prime] at h₀ ⊢ <;>\n      (try contradiction) <;> (try omega)\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12_2000_p6\n  (p q : ℕ)\n  (h₀ : Nat.Prime p ∧ Nat.Prime q)\n  (h₁ : 4 ≤ p ∧ p ≤ 18)\n  (h₂ : 4 ≤ q ∧ q ≤ 18) :\n  p * q - (p + q) ≠ 194 := by\n  rcases h₁ with ⟨hp1, hp2⟩\n  rcases h₂ with ⟨hq1, hq2⟩\n  interval_cases p <;> interval_cases q <;> norm_num\n  <;> contradiction",
    "orig_proof_length": 77,
    "simp_proof_length": 25
  },
  {
    "problem_id": "mathd_algebra_114",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_114\n  (a : ℝ)\n  (h₀ : a = 8) :\n  (16 * (a^2) ^ (1 / 3 : ℝ)) ^ (1 / 3 : ℝ) = 4 := by\n  have h₁ : (64 : ℝ) ^ (1 / 3 : ℝ) = 4 := by\n    have h₂ : (64 : ℝ) = (4 : ℝ) ^ (3 : ℝ) := by norm_num\n    rw [h₂]\n    have h₃ : ((4 : ℝ) ^ (3 : ℝ)) ^ (1 / 3 : ℝ) = (4 : ℝ) ^ ((3 : ℝ) * (1 / 3 : ℝ)) := by\n      rw [← Real.rpow_mul] <;> norm_num\n    rw [h₃]\n    have h₄ : (3 : ℝ) * (1 / 3 : ℝ) = (1 : ℝ) := by norm_num\n    rw [h₄]\n    norm_num\n  \n  have h₂ : (16 * (a^2) ^ (1 / 3 : ℝ)) ^ (1 / 3 : ℝ) = 4 := by\n    have h₃ : a = 8 := h₀\n    rw [h₃]\n    have h₄ : ((8 : ℝ) ^ 2 : ℝ) = 64 := by norm_num\n    have h₅ : (16 * ((8 : ℝ) ^ 2 : ℝ) ^ (1 / 3 : ℝ)) ^ (1 / 3 : ℝ) = 4 := by\n      have h₆ : ((8 : ℝ) ^ 2 : ℝ) ^ (1 / 3 : ℝ) = (64 : ℝ) ^ (1 / 3 : ℝ) := by\n        norm_num\n      rw [h₆]\n      have h₇ : (16 * (64 : ℝ) ^ (1 / 3 : ℝ)) ^ (1 / 3 : ℝ) = 4 := by\n        have h₈ : (64 : ℝ) ^ (1 / 3 : ℝ) = 4 := h₁\n        rw [h₈]\n        have h₉ : (16 * (4 : ℝ)) ^ (1 / 3 : ℝ) = (64 : ℝ) ^ (1 / 3 : ℝ) := by\n          norm_num\n        rw [h₉]\n        have h₁₀ : (64 : ℝ) ^ (1 / 3 : ℝ) = 4 := h₁\n        rw [h₁₀]\n      exact h₇\n    exact h₅\n  \n  rw [h₂]\n  <;> norm_num",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_114\n  (a : ℝ)\n  (h₀ : a = 8) :\n  (16 * (a^2) ^ (1 / 3 : ℝ)) ^ (1 / 3 : ℝ) = 4 := by\n  rw [h₀]\n  have h₁ : (64 : ℝ) ^ (1 / 3 : ℝ) = 4 := by\n    have h₂ : (64 : ℝ) = (4 : ℝ) ^ (3 : ℝ) := by norm_num\n    rw [h₂]\n    rw [← Real.rpow_mul] <;> norm_num\n  norm_num [h₁]",
    "orig_proof_length": 413,
    "simp_proof_length": 62
  },
  {
    "problem_id": "mathd_algebra_513",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_513\n  (a b : ℝ)\n  (h₀ : 3 * a + 2 * b = 5)\n  (h₁ : a + b = 2) :\n  a = 1 ∧ b = 1 := by\n  have h₂ : b = 1 := by\n    have h₂₁ : 3 * a + 2 * b = 5 := h₀\n    have h₂₂ : a + b = 2 := h₁\n    have h₂₃ : a = 2 - b := by linarith\n    rw [h₂₃] at h₂₁\n    ring_nf at h₂₁ ⊢\n    linarith\n  \n  have h₃ : a = 1 := by\n    have h₃₁ : a + b = 2 := h₁\n    have h₃₂ : b = 1 := h₂\n    rw [h₃₂] at h₃₁\n    linarith\n  \n  have h₄ : a = 1 ∧ b = 1 := by\n    exact ⟨h₃, h₂⟩\n  \n  exact h₄",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_513\n  (a b : ℝ)\n  (h₀ : 3 * a + 2 * b = 5)\n  (h₁ : a + b = 2) :\n  a = 1 ∧ b = 1 := by\n  constructor\n  linarith\n  linarith",
    "orig_proof_length": 110,
    "simp_proof_length": 3
  },
  {
    "problem_id": "mathd_algebra_143",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_143\n  (f g : ℝ → ℝ)\n  (h₀ : ∀ x, f x = x + 1)\n  (h₁ : ∀ x, g x = x^2 + 3) :\n  f (g 2) = 8 := by\n  have h₂ : g 2 = 7 := by\n    have h₂₁ : g 2 = (2 : ℝ) ^ 2 + 3 := by\n      rw [h₁]\n      <;> norm_num\n    rw [h₂₁]\n    norm_num\n  \n  have h₃ : f (g 2) = 8 := by\n    rw [h₂]\n    have h₃₁ : f (7 : ℝ) = (7 : ℝ) + 1 := by\n      rw [h₀]\n      <;> norm_num\n    rw [h₃₁]\n    norm_num\n  \n  exact h₃",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_143\n  (f g : ℝ → ℝ)\n  (h₀ : ∀ x, f x = x + 1)\n  (h₁ : ∀ x, g x = x^2 + 3) :\n  f (g 2) = 8 := by\n  simp_all\n  norm_num",
    "orig_proof_length": 87,
    "simp_proof_length": 2
  },
  {
    "problem_id": "mathd_algebra_354",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_354\n  (a d : ℝ)\n  (h₀ : a + 6 * d = 30)\n  (h₁ : a + 10 * d = 60) :\n  a + 20 * d = 135 := by\n  have h₂ : a + 20 * d = (-5 / 2 : ℝ) * (a + 6 * d) + (7 / 2 : ℝ) * (a + 10 * d) := by\n    have h₂₁ : (-5 / 2 : ℝ) * (a + 6 * d) + (7 / 2 : ℝ) * (a + 10 * d) = a + 20 * d := by\n      ring_nf\n      <;>\n      linarith\n    linarith\n  \n  have h₃ : a + 20 * d = 135 := by\n    rw [h₂]\n    rw [h₀, h₁]\n    norm_num\n    <;>\n    linarith\n  \n  exact h₃",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_354\n  (a d : ℝ)\n  (h₀ : a + 6 * d = 30)\n  (h₁ : a + 10 * d = 60) :\n  a + 20 * d = 135 := by\n  linarith",
    "orig_proof_length": 119,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_246",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_246\n  (a b : ℝ)\n  (f : ℝ → ℝ)\n  (h₀ : ∀ x, f x = a * x^4 - b * x^2 + x + 5)\n  (h₂ : f (-3) = 2) :\n  f 3 = 8 := by\n  have h₃ : a * 81 - b * 9 = 0 := by\n    have h₃₁ : f (-3) = a * (-3 : ℝ)^4 - b * (-3 : ℝ)^2 + (-3 : ℝ) + 5 := by\n      rw [h₀]\n      <;> norm_num\n    rw [h₃₁] at h₂\n    norm_num at h₂ ⊢\n    linarith\n  \n  have h₄ : f 3 = 8 := by\n    have h₄₁ : f 3 = a * (3 : ℝ)^4 - b * (3 : ℝ)^2 + (3 : ℝ) + 5 := by\n      rw [h₀]\n      <;> norm_num\n    rw [h₄₁]\n    norm_num at h₃ ⊢\n    linarith\n  \n  exact h₄",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_246\n  (a b : ℝ)\n  (f : ℝ → ℝ)\n  (h₀ : ∀ x, f x = a * x^4 - b * x^2 + x + 5)\n  (h₂ : f (-3) = 2) :\n  f 3 = 8 := by\n  simp_all\n  linarith",
    "orig_proof_length": 135,
    "simp_proof_length": 2
  },
  {
    "problem_id": "aime_1988_p8",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1988_p8\n  (f : ℕ → ℕ → ℝ)\n  (h₀ : ∀ x, 0 < x → f x x = x)\n  (h₁ : ∀ x y, (0 < x ∧ 0 < y) → f x y = f y x)\n  (h₂ : ∀ x y, (0 < x ∧ 0 < y) → (↑x + ↑y) * f x y = y * (f x (x + y))) :\n  f 14 52 = 364 := by\n  have h_f24 : f 2 4 = 4 := by\n    have h₃ : ( (2 : ℕ) + 2 : ℝ) * f 2 2 = (2 : ℝ) * f 2 (2 + 2) := by\n      have h₄ := h₂ 2 2 ⟨by norm_num, by norm_num⟩\n      norm_cast at h₄ ⊢\n      <;> ring_nf at h₄ ⊢ <;> linarith\n    have h₄ : f 2 2 = (2 : ℝ) := by\n      have h₅ := h₀ 2 (by norm_num)\n      norm_cast at h₅ ⊢ <;> linarith\n    have h₅ : ( (2 : ℕ) + 2 : ℝ) * f 2 2 = (2 : ℝ) * f 2 (2 + 2) := h₃\n    have h₆ : f 2 (2 + 2) = f 2 4 := by norm_num\n    rw [h₆] at h₅\n    rw [h₄] at h₅\n    norm_num at h₅ ⊢\n    <;> linarith\n  \n  have h_f42 : f 4 2 = 4 := by\n    have h₃ : f 4 2 = f 2 4 := by\n      apply h₁\n      <;> norm_num\n    rw [h₃]\n    exact h_f24\n  \n  have h_f46 : f 4 6 = 12 := by\n    have h₃ : ( (4 : ℕ) + 2 : ℝ) * f 4 2 = (2 : ℝ) * f 4 (4 + 2) := by\n      have h₄ := h₂ 4 2 ⟨by norm_num, by norm_num⟩\n      norm_cast at h₄ ⊢\n      <;> ring_nf at h₄ ⊢ <;> linarith\n    have h₄ : f 4 (4 + 2) = f 4 6 := by norm_num\n    rw [h₄] at h₃\n    have h₅ : ( (4 : ℕ) + 2 : ℝ) * f 4 2 = (2 : ℝ) * f 4 6 := by exact_mod_cast h₃\n    have h₆ : f 4 2 = (4 : ℝ) := by\n      norm_cast at h_f42 ⊢\n      <;> simp_all [h_f42]\n      <;> norm_num\n    rw [h₆] at h₅\n    norm_num at h₅ ⊢\n    <;> linarith\n  \n  have h_f410 : f 4 10 = 20 := by\n    have h₃ : ( (4 : ℕ) + 6 : ℝ) * f 4 6 = (6 : ℝ) * f 4 (4 + 6) := by\n      have h₄ := h₂ 4 6 ⟨by norm_num, by norm_num⟩\n      norm_cast at h₄ ⊢\n      <;> ring_nf at h₄ ⊢ <;> linarith\n    have h₄ : f 4 (4 + 6) = f 4 10 := by norm_num\n    rw [h₄] at h₃\n    have h₅ : ( (4 : ℕ) + 6 : ℝ) * f 4 6 = (6 : ℝ) * f 4 10 := by exact_mod_cast h₃\n    have h₆ : f 4 6 = (12 : ℝ) := by\n      norm_cast at h_f46 ⊢\n      <;> simp_all [h_f46]\n      <;> norm_num\n    rw [h₆] at h₅\n    norm_num at h₅ ⊢\n    <;> linarith\n  \n  have h_f104 : f 10 4 = 20 := by\n    have h₃ : f 10 4 = f 4 10 := by\n      apply h₁\n      <;> norm_num\n    rw [h₃]\n    exact h_f410\n  \n  have h_f1014 : f 10 14 = 70 := by\n    have h₃ : ( (10 : ℕ) + 4 : ℝ) * f 10 4 = (4 : ℝ) * f 10 (10 + 4) := by\n      have h₄ := h₂ 10 4 ⟨by norm_num, by norm_num⟩\n      norm_cast at h₄ ⊢\n      <;> ring_nf at h₄ ⊢ <;> linarith\n    have h₄ : f 10 (10 + 4) = f 10 14 := by norm_num\n    rw [h₄] at h₃\n    have h₅ : ( (10 : ℕ) + 4 : ℝ) * f 10 4 = (4 : ℝ) * f 10 14 := by exact_mod_cast h₃\n    have h₆ : f 10 4 = (20 : ℝ) := by\n      norm_cast at h_f104 ⊢\n      <;> simp_all [h_f104]\n      <;> norm_num\n    rw [h₆] at h₅\n    norm_num at h₅ ⊢\n    <;> linarith\n  \n  have h_f1410 : f 14 10 = 70 := by\n    have h₃ : f 14 10 = f 10 14 := by\n      apply h₁\n      <;> norm_num\n    rw [h₃]\n    exact h_f1014\n  \n  have h_f1424 : f 14 24 = 168 := by\n    have h₃ : ( (14 : ℕ) + 10 : ℝ) * f 14 10 = (10 : ℝ) * f 14 (14 + 10) := by\n      have h₄ := h₂ 14 10 ⟨by norm_num, by norm_num⟩\n      norm_cast at h₄ ⊢\n      <;> ring_nf at h₄ ⊢ <;> linarith\n    have h₄ : f 14 (14 + 10) = f 14 24 := by norm_num\n    rw [h₄] at h₃\n    have h₅ : ( (14 : ℕ) + 10 : ℝ) * f 14 10 = (10 : ℝ) * f 14 24 := by exact_mod_cast h₃\n    have h₆ : f 14 10 = (70 : ℝ) := by\n      norm_cast at h_f1410 ⊢\n      <;> simp_all [h_f1410]\n      <;> norm_num\n    rw [h₆] at h₅\n    norm_num at h₅ ⊢\n    <;> linarith\n  \n  have h_f1438 : f 14 38 = 266 := by\n    have h₃ : ( (14 : ℕ) + 24 : ℝ) * f 14 24 = (24 : ℝ) * f 14 (14 + 24) := by\n      have h₄ := h₂ 14 24 ⟨by norm_num, by norm_num⟩\n      norm_cast at h₄ ⊢\n      <;> ring_nf at h₄ ⊢ <;> linarith\n    have h₄ : f 14 (14 + 24) = f 14 38 := by norm_num\n    rw [h₄] at h₃\n    have h₅ : ( (14 : ℕ) + 24 : ℝ) * f 14 24 = (24 : ℝ) * f 14 38 := by exact_mod_cast h₃\n    have h₆ : f 14 24 = (168 : ℝ) := by\n      norm_cast at h_f1424 ⊢\n      <;> simp_all [h_f1424]\n      <;> norm_num\n    rw [h₆] at h₅\n    norm_num at h₅ ⊢\n    <;> linarith\n  \n  have h_f1452 : f 14 52 = 364 := by\n    have h₃ : ( (14 : ℕ) + 38 : ℝ) * f 14 38 = (38 : ℝ) * f 14 (14 + 38) := by\n      have h₄ := h₂ 14 38 ⟨by norm_num, by norm_num⟩\n      norm_cast at h₄ ⊢\n      <;> ring_nf at h₄ ⊢ <;> linarith\n    have h₄ : f 14 (14 + 38) = f 14 52 := by norm_num\n    rw [h₄] at h₃\n    have h₅ : ( (14 : ℕ) + 38 : ℝ) * f 14 38 = (38 : ℝ) * f 14 52 := by exact_mod_cast h₃\n    have h₆ : f 14 38 = (266 : ℝ) := by\n      norm_cast at h_f1438 ⊢\n      <;> simp_all [h_f1438]\n      <;> norm_num\n    rw [h₆] at h₅\n    norm_num at h₅ ⊢\n    <;> linarith\n  \n  exact h_f1452",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1988_p8\n  (f : ℕ → ℕ → ℝ)\n  (h₀ : ∀ x, 0 < x → f x x = x)\n  (h₁ : ∀ x y, (0 < x ∧ 0 < y) → f x y = f y x)\n  (h₂ : ∀ x y, (0 < x ∧ 0 < y) → (↑x + ↑y) * f x y = y * (f x (x + y))) :\n  f 14 52 = 364 := by\n  have h₃ := h₂ 2 2\n  have h₄ := h₂ 4 2\n  have h₅ := h₂ 4 6\n  have h₆ := h₂ 10 4\n  have h₇ := h₂ 14 10\n  have h₈ := h₂ 14 24\n  have h₉ := h₂ 14 38\n  simp_all\n  linarith",
    "orig_proof_length": 1234,
    "simp_proof_length": 44
  },
  {
    "problem_id": "imo_2019_p1",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem imo_2019_p1\n  (f : ℤ → ℤ) :\n  ((∀ a b, f (2 * a) + (2 * f b) = f (f (a + b))) ↔ (∀ z, f z = 0) ∨ (∃ c, ∀ z, f z = 2 * z + c)) := by\n  have h_imp : (∀ a b, f (2 * a) + (2 * f b) = f (f (a + b))) → (∀ z, f z = 0) ∨ (∃ c, ∀ z, f z = 2 * z + c) := by\n    intro h\n    have h₁ : ∀ b, f (f b) = f 0 + 2 * f b := by\n      intro b\n      have h₂ := h 0 b\n      ring_nf at h₂ ⊢\n      linarith\n    have h₂ : ∀ a, f (2 * a) = 2 * f a - f 0 := by\n      intro a\n      have h₃ := h a a\n      have h₄ := h₁ (2 * a)\n      have h₅ := h₁ a\n      ring_nf at h₃ h₄ h₅ ⊢\n      linarith\n    have h₃ : ∀ a, f (a + 1) = f a + (f 1 - f 0) := by\n      intro a\n      have h₄ := h a 1\n      have h₅ := h₁ (a + 1)\n      have h₆ := h₂ a\n      have h₇ := h₂ 1\n      ring_nf at h₄ h₅ h₆ h₇ ⊢\n      linarith\n    -- Prove that f is linear: f(n) = d * n + c\n    have h₄ : ∃ (d c : ℤ), ∀ (n : ℤ), f n = d * n + c := by\n      use (f 1 - f 0), f 0\n      intro n\n      have h₅ : ∀ n : ℤ, f n = (f 1 - f 0) * n + f 0 := by\n        intro n\n        have h₆ : ∀ n : ℤ, f n = (f 1 - f 0) * n + f 0 := by\n          intro n\n          -- Use induction to prove that f(n) is linear\n          have h₇ : ∀ n : ℕ, f n = (f 1 - f 0) * n + f 0 := by\n            intro n\n            induction n with\n            | zero =>\n              simp [h₂]\n              <;> ring_nf at * <;> linarith\n            | succ n ih =>\n              have h₈ := h₃ n\n              simp [ih] at h₈ ⊢\n              <;> ring_nf at h₈ ⊢ <;> linarith\n          have h₈ : ∀ n : ℕ, f (-n : ℤ) = (f 1 - f 0) * (-n : ℤ) + f 0 := by\n            intro n\n            induction n with\n            | zero =>\n              simp [h₂]\n              <;> ring_nf at * <;> linarith\n            | succ n ih =>\n              have h₉ := h₃ (-(n : ℤ) - 1)\n              have h₁₀ := h₃ (-(n : ℤ))\n              simp [ih] at h₉ h₁₀ ⊢\n              <;> ring_nf at h₉ h₁₀ ⊢ <;>\n                (try omega) <;>\n                (try linarith) <;>\n                (try {\n                  have h₁₁ := h₇ 0\n                  have h₁₂ := h₇ 1\n                  have h₁₃ := h₇ 2\n                  simp at h₁₁ h₁₂ h₁₃\n                  <;> ring_nf at h₁₁ h₁₂ h₁₃ ⊢ <;> linarith\n                })\n              <;>\n                (try {\n                  simp_all [h₂, h₃]\n                  <;> ring_nf at *\n                  <;> linarith\n                })\n          -- Combine the results for positive and negative integers\n          by_cases h₉ : n ≥ 0\n          · -- Case: n ≥ 0\n            have h₁₀ : (n : ℤ) ≥ 0 := by exact_mod_cast h₉\n            have h₁₁ : ∃ m : ℕ, (m : ℤ) = n := by\n              use n.toNat\n              <;> simp [Int.toNat_of_nonneg h₁₀]\n              <;> omega\n            rcases h₁₁ with ⟨m, rfl⟩\n            have h₁₂ := h₇ m\n            simp at h₁₂ ⊢\n            <;> ring_nf at h₁₂ ⊢ <;> linarith\n          · -- Case: n < 0\n            have h₁₀ : (n : ℤ) < 0 := by\n              linarith\n            have h₁₁ : ∃ m : ℕ, (m : ℤ) = -n := by\n              use (-n).toNat\n              <;> simp [Int.toNat_of_nonneg (by linarith : (0 : ℤ) ≤ -n)]\n              <;> omega\n            rcases h₁₁ with ⟨m, h₁₂⟩\n            have h₁₃ := h₈ m\n            have h₁₄ : (m : ℤ) = -n := by exact_mod_cast h₁₂\n            have h₁₅ : f (-(m : ℤ)) = (f 1 - f 0) * (-(m : ℤ)) + f 0 := by simpa using h₁₃\n            have h₁₆ : f n = (f 1 - f 0) * n + f 0 := by\n              have h₁₇ : n = - (m : ℤ) := by\n                linarith\n              rw [h₁₇]\n              simpa [h₁₄] using h₁₃\n            exact h₁₆\n        exact h₆ n\n      exact h₅ n\n    -- Substitute f(n) = d * n + c into the original equation to find constraints on d and c\n    rcases h₄ with ⟨d, c, h₄⟩\n    have h₅ : d = 0 ∨ d = 2 := by\n      have h₆ := h 0 0\n      have h₇ := h 1 0\n      have h₈ := h 0 1\n      have h₉ := h 1 1\n      have h₁₀ := h (-1) 0\n      have h₁₁ := h 0 (-1)\n      have h₁₂ := h 1 (-1)\n      have h₁₃ := h (-1) 1\n      simp [h₄] at h₆ h₇ h₈ h₉ h₁₀ h₁₁ h₁₂ h₁₃\n      ring_nf at h₆ h₇ h₈ h₉ h₁₀ h₁₁ h₁₂ h₁₃\n      have h₁₄ : d = 0 ∨ d = 2 := by\n        have h₁₅ : d * (d - 2) = 0 := by\n          nlinarith [sq_nonneg (d - 2), sq_nonneg d, sq_nonneg (d + 2)]\n        have h₁₆ : d = 0 ∨ d - 2 = 0 := by\n          apply eq_zero_or_eq_zero_of_mul_eq_zero h₁₅\n        cases h₁₆ with\n        | inl h₁₆ =>\n          exact Or.inl h₁₆\n        | inr h₁₆ =>\n          have h₁₇ : d = 2 := by linarith\n          exact Or.inr h₁₇\n      exact h₁₄\n    cases h₅ with\n    | inl h₅ =>\n      -- Case: d = 0\n      have h₆ : ∀ z, f z = 0 := by\n        intro z\n        have h₇ := h₄ z\n        rw [h₅] at h₇\n        have h₈ : c = 0 := by\n          have h₉ := h 0 0\n          have h₁₀ := h 1 0\n          have h₁₁ := h 0 1\n          have h₁₂ := h 1 1\n          simp [h₄, h₅] at h₉ h₁₀ h₁₁ h₁₂\n          <;> ring_nf at h₉ h₁₀ h₁₁ h₁₂ ⊢\n          <;> nlinarith\n        rw [h₈] at h₇\n        ring_nf at h₇ ⊢\n        <;> linarith\n      exact Or.inl h₆\n    | inr h₅ =>\n      -- Case: d = 2\n      have h₆ : ∃ c, ∀ z, f z = 2 * z + c := by\n        use c\n        intro z\n        have h₇ := h₄ z\n        rw [h₅] at h₇\n        ring_nf at h₇ ⊢\n        <;> linarith\n      exact Or.inr h₆\n  \n  have h_converse : ((∀ z, f z = 0) ∨ (∃ c, ∀ z, f z = 2 * z + c)) → (∀ a b, f (2 * a) + (2 * f b) = f (f (a + b))) := by\n    intro h\n    cases h with\n    | inl h =>\n      -- Case: f(z) = 0 for all z\n      intro a b\n      have h₁ : f (2 * a) = 0 := by rw [h]\n      have h₂ : f b = 0 := by rw [h]\n      have h₃ : f (a + b) = 0 := by rw [h]\n      have h₄ : f (f (a + b)) = 0 := by\n        have h₅ : f (a + b) = 0 := by rw [h]\n        rw [h₅]\n        rw [h]\n      simp [h₁, h₂, h₄]\n    | inr h =>\n      -- Case: f(z) = 2z + c for some constant c\n      rcases h with ⟨c, hc⟩\n      intro a b\n      have h₁ : f (2 * a) = 2 * (2 * a) + c := by\n        rw [hc]\n        <;> ring_nf\n      have h₂ : f b = 2 * b + c := by\n        rw [hc]\n      have h₃ : f (a + b) = 2 * (a + b) + c := by\n        rw [hc]\n        <;> ring_nf\n      have h₄ : f (f (a + b)) = 2 * (2 * (a + b) + c) + c := by\n        have h₅ : f (a + b) = 2 * (a + b) + c := by rw [hc] <;> ring_nf\n        rw [h₅]\n        rw [hc]\n        <;> ring_nf\n      calc\n        f (2 * a) + 2 * f b = (2 * (2 * a) + c) + 2 * (2 * b + c) := by rw [h₁, h₂]\n        _ = 4 * a + c + 4 * b + 2 * c := by ring_nf\n        _ = 4 * a + 4 * b + 3 * c := by ring_nf\n        _ = 2 * (2 * (a + b) + c) + c := by ring_nf\n        _ = f (f (a + b)) := by\n          rw [h₄]\n          <;> ring_nf\n  \n  have h_main : ((∀ a b, f (2 * a) + (2 * f b) = f (f (a + b))) ↔ (∀ z, f z = 0) ∨ (∃ c, ∀ z, f z = 2 * z + c)) := by\n    apply Iff.intro\n    · -- Prove the forward direction: functional equation implies the form of f\n      intro h\n      exact h_imp h\n    · -- Prove the backward direction: the form of f implies the functional equation\n      intro h\n      exact h_converse h\n  \n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem imo_2019_p1\n  (f : ℤ → ℤ) :\n  ((∀ a b, f (2 * a) + (2 * f b) = f (f (a + b))) ↔ (∀ z, f z = 0) ∨ (∃ c, ∀ z, f z = 2 * z + c)) := by\n  constructor\n  · intro h\n    have h₁ : ∀ b, f (f b) = f 0 + 2 * f b := by\n      intro b\n      have h₂ := h 0 b\n      simp at h₂ ⊢\n      linarith\n    have h₂ : ∀ a, f (2 * a) = 2 * f a - f 0 := by\n      intro a\n      have h₃ := h a a\n      have h₄ := h₁ (2 * a)\n      have h₅ := h₁ a\n      ring_nf at h₃ h₄ h₅ ⊢\n      linarith\n    have h₃ : ∀ a, f (a + 1) = f a + (f 1 - f 0) := by\n      intro a\n      have h₄ := h a 1\n      have h₅ := h₁ (a + 1)\n      have h₆ := h₂ a\n      have h₇ := h₂ 1\n      ring_nf at h₄ h₅ h₆ h₇ ⊢\n      linarith\n    have h₄ : ∃ (d c : ℤ), ∀ (n : ℤ), f n = d * n + c := by\n      use (f 1 - f 0), f 0\n      intro n\n      have h₅ : ∀ n : ℕ, f n = (f 1 - f 0) * n + f 0 := by\n        intro n\n        induction n with\n        | zero =>\n          simp [h₂]\n        | succ n ih =>\n          have h₆ := h₃ n\n          simp [ih] at h₆ ⊢\n          <;> ring_nf at h₆ ⊢ <;> linarith\n      have h₆ : ∀ n : ℕ, f (-n : ℤ) = (f 1 - f 0) * (-n : ℤ) + f 0 := by\n        intro n\n        induction n with\n        | zero =>\n          simp [h₂]\n        | succ n ih =>\n          have h₇ := h₃ (-(n : ℤ) - 1)\n          have h₈ := h₃ (-(n : ℤ))\n          simp [ih] at h₇ h₈ ⊢\n          <;> ring_nf at h₇ h₈ ⊢ <;> linarith\n      by_cases h₉ : n ≥ 0\n      ·\n        have h₁₀ : (n : ℤ) ≥ 0 := by exact_mod_cast h₉\n        have h₁₁ : ∃ m : ℕ, (m : ℤ) = n := by\n          use n.toNat\n          <;> simp [Int.toNat_of_nonneg h₁₀]\n        rcases h₁₁ with ⟨m, rfl⟩\n        have h₁₂ := h₅ m\n        simp at h₁₂ ⊢\n        <;> ring_nf at h₁₂ ⊢ <;> linarith\n      ·\n        have h₁₀ : (n : ℤ) < 0 := by linarith\n        have h₁₁ : ∃ m : ℕ, (m : ℤ) = -n := by\n          use (-n).toNat\n          <;> simp [Int.toNat_of_nonneg (by linarith : (0 : ℤ) ≤ -n)]\n        rcases h₁₁ with ⟨m, h₁₂⟩\n        have h₁₃ := h₆ m\n        have h₁₄ : (m : ℤ) = -n := by exact_mod_cast h₁₂\n        have h₁₅ : f (-(m : ℤ)) = (f 1 - f 0) * (-(m : ℤ)) + f 0 := by simpa using h₁₃\n        have h₁₆ : f n = (f 1 - f 0) * n + f 0 := by\n          have h₁₇ : n = - (m : ℤ) := by\n            linarith\n          rw [h₁₇]\n          simpa [h₁₄] using h₁₃\n        exact h₁₆\n    rcases h₄ with ⟨d, c, h₄⟩\n    have h₅ : d = 0 ∨ d = 2 := by\n      have h₆ := h 0 0\n      have h₇ := h 1 0\n      have h₈ := h 0 1\n      have h₉ := h 1 1\n      simp [h₄] at h₆ h₇ h₈ h₉\n      ring_nf at h₆ h₇ h₈ h₉\n      have h₁₀ : d = 0 ∨ d = 2 := by\n        have h₁₁ : d * (d - 2) = 0 := by\n          nlinarith [sq_nonneg (d - 2), sq_nonneg d, sq_nonneg (d + 2)]\n        have h₁₂ : d = 0 ∨ d - 2 = 0 := by\n          apply eq_zero_or_eq_zero_of_mul_eq_zero h₁₁\n        cases h₁₂ with\n        | inl h₁₂ =>\n          exact Or.inl h₁₂\n        | inr h₁₂ =>\n          have h₁₃ : d = 2 := by linarith\n          exact Or.inr h₁₃\n      exact h₁₀\n    cases h₅ with\n    | inl h₅ =>\n      have h₆ : ∀ z, f z = 0 := by\n        intro z\n        have h₇ := h₄ z\n        rw [h₅] at h₇\n        simp_all\n      exact Or.inl h₆\n    | inr h₅ =>\n      have h₆ : ∃ c, ∀ z, f z = 2 * z + c := by\n        use c\n        intro z\n        have h₇ := h₄ z\n        rw [h₅] at h₇\n        simp_all\n      exact Or.inr h₆\n  · rintro (h | ⟨c, hc⟩) <;> simp_all\n    <;> intro a b <;> ring_nf <;> omega",
    "orig_proof_length": 1649,
    "simp_proof_length": 832
  },
  {
    "problem_id": "mathd_numbertheory_85",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_85 :\n  1 * 3^3 + 2 * 3^2 + 2*3 + 2 = 53 := by\n  have h : 1 * 3^3 + 2 * 3^2 + 2*3 + 2 = 53 := by\n    norm_num\n    <;> rfl\n  \n  exact h",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_85 :\n  1 * 3^3 + 2 * 3^2 + 2*3 + 2 = 53 := by\n  norm_num",
    "orig_proof_length": 30,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_239",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_239 :\n  (∑ k ∈ Finset.Icc 1 12, k) % 4 = 2 := by\n  have h : (∑ k ∈ Finset.Icc 1 12, k) % 4 = 2 := by\n    norm_num [Finset.sum_Icc_succ_top]\n    <;> rfl\n  \n  apply h",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_239 :\n  (∑ k ∈ Finset.Icc 1 12, k) % 4 = 2 := by\n  rfl",
    "orig_proof_length": 28,
    "simp_proof_length": 1
  },
  {
    "problem_id": "amc12b_2002_p2",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2002_p2\n  (x : ℤ)\n  (h₀ : x = 4) :\n  (3 * x - 2) * (4 * x + 1) - (3 * x - 2) * (4 * x) + 1 = 11 := by\n  have h₁ : (3 * x - 2) * (4 * x + 1) - (3 * x - 2) * (4 * x) + 1 = 11 := by\n    rw [h₀]\n    norm_num\n    <;> ring_nf\n    <;> norm_num\n    <;> linarith\n  exact h₁",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2002_p2\n  (x : ℤ)\n  (h₀ : x = 4) :\n  (3 * x - 2) * (4 * x + 1) - (3 * x - 2) * (4 * x) + 1 = 11 := by\n  simp_all",
    "orig_proof_length": 51,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_196",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_196\n  (S : Finset ℝ)\n  (h₀ : ∀ (x : ℝ), x ∈ S ↔ abs (2 - x) = 3) :\n  ∑ k ∈ S, k = 4 := by\n  have h₁ : S = { -1, 5 } := by\n    apply Finset.ext\n    intro x\n    simp only [Finset.mem_insert, Finset.mem_singleton, h₀]\n    constructor\n    · -- Prove the forward direction: if |2 - x| = 3, then x = -1 or x = 5\n      intro h\n      have h₂ : abs (2 - x) = 3 := by exact h\n      have h₃ : 2 - x = 3 ∨ 2 - x = -3 := by\n        apply eq_or_eq_neg_of_abs_eq\n        <;> linarith\n      cases h₃ with\n      | inl h₃ =>\n        -- Case: 2 - x = 3\n        have h₄ : x = -1 := by linarith\n        simp [h₄]\n      | inr h₃ =>\n        -- Case: 2 - x = -3\n        have h₄ : x = 5 := by linarith\n        simp [h₄]\n    · -- Prove the reverse direction: if x = -1 or x = 5, then |2 - x| = 3\n      intro h\n      cases h with\n      | inl h =>\n        -- Case: x = -1\n        rw [h]\n        norm_num [abs_of_pos, abs_of_nonneg]\n      | inr h =>\n        -- Case: x = 5\n        rw [h]\n        norm_num [abs_of_neg, abs_of_nonneg]\n  \n  have h₂ : ∑ k ∈ S, k = 4 := by\n    rw [h₁]\n    norm_num [Finset.sum_pair (show (-1 : ℝ) ≠ 5 by norm_num)]\n  \n  exact h₂",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_196\n  (S : Finset ℝ)\n  (h₀ : ∀ (x : ℝ), x ∈ S ↔ abs (2 - x) = 3) :\n  ∑ k ∈ S, k = 4 := by\n  have : S = {-1, 5} := by\n    ext x\n    simp_all [abs_eq_max_neg]\n    constructor\n    · intro h\n      cases' max_eq_iff.mp h with h₁ h₂\n      · left\n        linarith\n      · right\n        linarith\n    · rintro (rfl | rfl) <;> norm_num\n  simp_all\n  norm_num",
    "orig_proof_length": 180,
    "simp_proof_length": 45
  },
  {
    "problem_id": "mathd_algebra_342",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_342\n  (a d: ℝ)\n  (h₀ : ∑ k ∈ (Finset.range 5), (a + k * d) = 70)\n  (h₁ : ∑ k ∈ (Finset.range 10), (a + k * d) = 210) :\n  a = 42/5 := by\n  have h₂ : 5 * a + 10 * d = 70 := by\n    norm_num [Finset.sum_range_succ, Finset.sum_range_succ, Finset.sum_range_succ] at h₀\n    <;> ring_nf at h₀ ⊢\n    <;> linarith\n  \n  have h₃ : 10 * a + 45 * d = 210 := by\n    norm_num [Finset.sum_range_succ] at h₁\n    <;> ring_nf at h₁ ⊢\n    <;> linarith\n  \n  have h₄ : d = 14 / 5 := by\n    have h₄₁ : 25 * d = 70 := by\n      linarith\n    -- Solve for d by dividing both sides by 25\n    have h₄₂ : d = 14 / 5 := by\n      linarith\n    exact h₄₂\n  \n  have h₅ : a = 42 / 5 := by\n    have h₅₁ : 5 * a + 10 * d = 70 := h₂\n    rw [h₄] at h₅₁\n    ring_nf at h₅₁ ⊢\n    linarith\n  \n  apply h₅",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_342\n  (a d: ℝ)\n  (h₀ : ∑ k ∈ (Finset.range 5), (a + k * d) = 70)\n  (h₁ : ∑ k ∈ (Finset.range 10), (a + k * d) = 210) :\n  a = 42/5 := by\n  simp_all [Finset.sum_range_succ]\n  linarith",
    "orig_proof_length": 134,
    "simp_proof_length": 5
  },
  {
    "problem_id": "amc12_2001_p21",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12_2001_p21\n  (a b c d : ℕ)\n  (h₀ : a * b * c * d = Nat.factorial 8)\n  (h₁ : a * b + a + b = 524)\n  (h₂ : b * c + b + c = 146)\n  (h₃ : c * d + c + d = 104) :\n  ↑a - ↑d = (10 : ℤ) := by\n  have h₄ : (a + 1) * (b + 1) = 525 := by\n    have h₄₁ : (a + 1) * (b + 1) = a * b + a + b + 1 := by\n      ring\n    rw [h₄₁]\n    have h₄₂ : a * b + a + b + 1 = 525 := by\n      have h₄₃ : a * b + a + b = 524 := h₁\n      omega\n    linarith\n  \n  have h₅ : (b + 1) * (c + 1) = 147 := by\n    have h₅₁ : (b + 1) * (c + 1) = b * c + b + c + 1 := by\n      ring\n    rw [h₅₁]\n    have h₅₂ : b * c + b + c + 1 = 147 := by\n      have h₅₃ : b * c + b + c = 146 := h₂\n      omega\n    linarith\n  \n  have h₆ : (c + 1) * (d + 1) = 105 := by\n    have h₆₁ : (c + 1) * (d + 1) = c * d + c + d + 1 := by\n      ring\n    rw [h₆₁]\n    have h₆₂ : c * d + c + d + 1 = 105 := by\n      have h₆₃ : c * d + c + d = 104 := h₃\n      omega\n    linarith\n  \n  have h₇ : b = 20 := by\n    have h₇₁ : b + 1 ∣ 525 := by\n      use a + 1\n      linarith\n    have h₇₂ : b + 1 ∣ 147 := by\n      use c + 1\n      linarith\n    have h₇₃ : b + 1 ∣ Nat.gcd 525 147 := Nat.dvd_gcd h₇₁ h₇₂\n    have h₇₄ : Nat.gcd 525 147 = 21 := by norm_num\n    rw [h₇₄] at h₇₃\n    have h₇₅ : b + 1 ∣ 21 := h₇₃\n    have h₇₆ : b + 1 ≤ 21 := Nat.le_of_dvd (by norm_num) h₇₅\n    have h₇₇ : b ≤ 20 := by\n      omega\n    interval_cases b <;> norm_num at h₄ h₅ ⊢ <;>\n      (try omega) <;>\n      (try {\n        have h₇₈ : a ≤ 525 := by\n          nlinarith\n        interval_cases a <;> norm_num at h₄ ⊢ <;>\n          (try omega) <;>\n          (try {\n            have h₇₉ : c ≤ 147 := by\n              nlinarith\n            interval_cases c <;> norm_num at h₅ ⊢ <;>\n              (try omega) <;>\n              (try {\n                norm_num [Nat.factorial] at h₀ ⊢\n                <;>\n                (try omega)\n              })\n          })\n      }) <;>\n      (try {\n        have h₇₈ : c ≤ 147 := by\n          nlinarith\n        interval_cases c <;> norm_num at h₅ ⊢ <;>\n          (try omega) <;>\n          (try {\n            have h₇₉ : a ≤ 525 := by\n              nlinarith\n            interval_cases a <;> norm_num at h₄ ⊢ <;>\n              (try omega) <;>\n              (try {\n                norm_num [Nat.factorial] at h₀ ⊢\n                <;>\n                (try omega)\n              })\n          })\n      }) <;>\n      (try {\n        norm_num [Nat.factorial] at h₀ ⊢\n        <;>\n        (try omega)\n      })\n  \n  have h₈ : a = 24 := by\n    have h₈₁ : (a + 1) * (b + 1) = 525 := h₄\n    rw [h₇] at h₈₁\n    ring_nf at h₈₁ ⊢\n    nlinarith\n  \n  have h₉ : c = 6 := by\n    have h₉₁ : (b + 1) * (c + 1) = 147 := h₅\n    rw [h₇] at h₉₁\n    ring_nf at h₉₁ ⊢\n    have h₉₂ : c ≤ 147 := by\n      nlinarith\n    interval_cases c <;> norm_num at h₉₁ ⊢ <;>\n      (try omega) <;>\n      (try {\n        norm_num [h₈, h₇, Nat.factorial] at h₀ ⊢\n        <;>\n        (try omega)\n      })\n  \n  have h₁₀ : d = 14 := by\n    have h₁₀₁ : a * b * c * d = Nat.factorial 8 := h₀\n    rw [h₈, h₇, h₉] at h₁₀₁\n    norm_num [Nat.factorial] at h₁₀₁ ⊢\n    <;>\n    (try omega) <;>\n    (try {\n      have h₁₀₂ : d ≤ 105 := by\n        nlinarith\n      interval_cases d <;> norm_num at h₁₀₁ ⊢ <;>\n        (try omega) <;>\n        (try {\n          norm_num [h₈, h₇, h₉] at h₆ ⊢ <;>\n          (try omega)\n        })\n    })\n  \n  have h₁₁ : (a : ℤ) - (d : ℤ) = 10 := by\n    rw [h₈, h₁₀]\n    <;> norm_num\n    <;> rfl\n  \n  exact_mod_cast h₁₁",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12_2001_p21\n  (a b c d : ℕ)\n  (h₀ : a * b * c * d = Nat.factorial 8)\n  (h₁ : a * b + a + b = 524)\n  (h₂ : b * c + b + c = 146)\n  (h₃ : c * d + c + d = 104) :\n  ↑a - ↑d = (10 : ℤ) := by\n  norm_num [Nat.factorial] at h₀\n  have : b ≤ 525 := by nlinarith\n  interval_cases b <;> simp_all\n  <;> nlinarith",
    "orig_proof_length": 769,
    "simp_proof_length": 20
  },
  {
    "problem_id": "mathd_numbertheory_517",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_517 :\n  (121 * 122 * 123) % 4 = 2 := by\n  have h₁ : (121 * 122 * 123) % 4 = 2 := by\n    norm_num [Nat.mul_mod, Nat.add_mod, Nat.mod_mod]\n    <;> rfl\n  exact h₁",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_517 :\n  (121 * 122 * 123) % 4 = 2 := by\n  norm_num",
    "orig_proof_length": 28,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_270",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_270\n  (f : ℝ → ℝ)\n  (h₀ : ∀ x, x ≠ -2 -> f x = 1 / (x + 2)) :\n  f (f 1) = 3/7 := by\n  have h₁ : f 1 = 1/3 := by\n    have h₁₁ : (1 : ℝ) ≠ -2 := by norm_num\n    have h₁₂ : f 1 = 1 / (1 + 2 : ℝ) := by\n      apply h₀\n      exact h₁₁\n    rw [h₁₂]\n    norm_num\n  \n  have h₂ : f (f 1) = 3/7 := by\n    rw [h₁]\n    have h₂₁ : (1 / 3 : ℝ) ≠ -2 := by norm_num\n    have h₂₂ : f (1 / 3 : ℝ) = 1 / ((1 / 3 : ℝ) + 2) := by\n      apply h₀\n      exact h₂₁\n    rw [h₂₂]\n    norm_num\n  \n  rw [h₂]",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_270\n  (f : ℝ → ℝ)\n  (h₀ : ∀ x, x ≠ -2 -> f x = 1 / (x + 2)) :\n  f (f 1) = 3/7 := by\n  norm_num [h₀]",
    "orig_proof_length": 127,
    "simp_proof_length": 4
  },
  {
    "problem_id": "amc12a_2009_p7",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2009_p7\n  (x : ℝ)\n  (n : ℕ)\n  (a : ℕ → ℝ)\n  (h₁ : ∀ m, a (m + 1) - a m = a (m + 2) - a (m + 1))\n  (h₂ : a 1 = 2 * x - 3)\n  (h₃ : a 2 = 5 * x - 11)\n  (h₄ : a 3 = 3 * x + 1)\n  (h₅ : a n = 2009) :\n  n = 502 := by\n  have h_x : x = 4 := by\n    have h₆ : (5 : ℝ) * x - 11 - (2 * x - 3) = (3 * x + 1) - (5 * x - 11) := by\n      have h₇ := h₁ 1\n      have h₈ := h₁ 0\n      have h₉ := h₁ 2\n      norm_num at h₇ h₈ h₉ ⊢\n      <;>\n      (try linarith) <;>\n      (try ring_nf at h₇ h₈ h₉ ⊢ <;> linarith) <;>\n      (try linarith)\n      <;>\n      (try\n        {\n          simp [h₂, h₃, h₄] at h₇ h₈ h₉ ⊢\n          <;>\n          ring_nf at h₇ h₈ h₉ ⊢ <;>\n          linarith\n        })\n    -- Simplify the equation to solve for x\n    ring_nf at h₆ ⊢\n    linarith\n  \n  have h_a1 : a 1 = 5 := by\n    rw [h₂]\n    rw [h_x]\n    <;> norm_num\n  \n  have h_a2 : a 2 = 9 := by\n    rw [h₃]\n    rw [h_x]\n    <;> norm_num\n  \n  have h_a3 : a 3 = 13 := by\n    rw [h₄]\n    rw [h_x]\n    <;> norm_num\n  \n  have h_diff : ∀ m : ℕ, a (m + 1) - a m = 4 := by\n    have h₆ : ∀ m : ℕ, a (m + 1) - a m = 4 := by\n      intro m\n      induction m with\n      | zero =>\n        have h₇ := h₁ 0\n        have h₈ := h₁ 1\n        have h₉ := h₁ 2\n        norm_num at h₇ h₈ h₉ ⊢\n        have h₁₀ : a 1 - a 0 = 4 := by\n          have h₁₁ := h₁ 0\n          have h₁₂ := h₁ 1\n          have h₁₃ := h₁ 2\n          norm_num at h₁₁ h₁₂ h₁₃ ⊢\n          linarith [h_a1, h_a2, h_a3]\n        linarith [h_a1, h_a2, h_a3]\n      | succ m ih =>\n        have h₇ := h₁ m\n        have h₈ := h₁ (m + 1)\n        have h₉ := h₁ (m + 2)\n        simp [ih] at h₇ h₈ h₉ ⊢\n        <;> linarith\n    exact h₆\n  \n  have h_a0 : a 0 = 1 := by\n    have h₆ := h_diff 0\n    have h₇ : a 1 - a 0 = 4 := by simpa using h₆\n    have h₈ : a 1 = 5 := h_a1\n    linarith\n  \n  have h_general : ∀ m : ℕ, a m = 1 + 4 * (m : ℝ) := by\n    intro m\n    have h₆ : ∀ m : ℕ, a m = 1 + 4 * (m : ℝ) := by\n      intro m\n      induction m with\n      | zero =>\n        norm_num [h_a0] at *\n        <;>\n        simp_all [h_a0]\n        <;>\n        norm_num\n        <;>\n        linarith\n      | succ m ih =>\n        have h₇ := h_diff m\n        have h₈ := h_diff (m + 1)\n        simp [ih] at h₇ h₈ ⊢\n        <;>\n        ring_nf at h₇ h₈ ⊢ <;>\n        norm_num at h₇ h₈ ⊢ <;>\n        linarith\n    exact h₆ m\n  \n  have h_n : n = 502 := by\n    have h₆ : a n = 2009 := h₅\n    have h₇ : a n = 1 + 4 * (n : ℝ) := by\n      have h₈ := h_general n\n      exact h₈\n    rw [h₇] at h₆\n    have h₈ : (1 : ℝ) + 4 * (n : ℝ) = 2009 := by linarith\n    have h₉ : (n : ℝ) = 502 := by\n      linarith\n    have h₁₀ : n = 502 := by\n      norm_cast at h₉ ⊢\n      <;>\n      (try linarith) <;>\n      (try ring_nf at h₉ ⊢ <;> linarith)\n    exact h₁₀\n  \n  exact h_n",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2009_p7\n  (x : ℝ)\n  (n : ℕ)\n  (a : ℕ → ℝ)\n  (h₁ : ∀ m, a (m + 1) - a m = a (m + 2) - a (m + 1))\n  (h₂ : a 1 = 2 * x - 3)\n  (h₃ : a 2 = 5 * x - 11)\n  (h₄ : a 3 = 3 * x + 1)\n  (h₅ : a n = 2009) :\n  n = 502 := by\n  have h_diff : ∀ m, a (m + 1) - a m = 4 := by\n    intro m\n    induction' m with m ih\n    · linarith [h₁ 0, h₁ 1, h₁ 2]\n    · linarith [h₁ m, h₁ (m + 1), h₁ (m + 2)]\n  have h_a0 : a 0 = 1 := by linarith [h_diff 0, h_diff 1, h_diff 2, h₂, h₃, h₄]\n  have h_general : ∀ m, a m = 1 + 4 * m := by\n    intro m\n    induction' m with m ih\n    · simp_all\n    · simp_all\n      linarith [h_diff m]\n  rw [h_general n] at h₅\n  norm_cast at h₅\n  linarith",
    "orig_proof_length": 613,
    "simp_proof_length": 127
  },
  {
    "problem_id": "mathd_numbertheory_521",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_521\n  (m n : ℕ)\n  (h₀ : Even m)\n  (h₁ : Even n)\n  (h₂ : m - n = 2)\n  (h₃ : m * n = 288) :\n  m = 18 := by\n  have h₄ : m = n + 2 := by\n    have h₄₁ : m ≥ n + 2 := by\n      by_contra h\n      -- Assume for contradiction that m < n + 2\n      have h₄₂ : m ≤ n + 1 := by\n        omega\n      -- Since m ≤ n + 1, we have m - n ≤ 1\n      have h₄₃ : m - n ≤ 1 := by\n        have h₄₄ : m ≤ n + 1 := h₄₂\n        have h₄₅ : m - n ≤ 1 := by\n          omega\n        exact h₄₅\n      -- But m - n = 2, which is a contradiction\n      omega\n    -- Now we know m ≥ n + 2, so we can write m = n + 2 + k for some k ≥ 0\n    have h₄₅ : m = n + 2 := by\n      have h₄₆ : m ≥ n + 2 := h₄₁\n      have h₄₇ : m - n = 2 := h₂\n      have h₄₈ : m = n + 2 := by\n        have h₄₉ : m ≥ n := by omega\n        have h₄₁₀ : m - n = 2 := h₂\n        have h₄₁₁ : m = n + 2 := by\n          omega\n        exact h₄₁₁\n      exact h₄₈\n    exact h₄₅\n  \n  have h₅ : n = 16 := by\n    have h₅₁ : (n + 1) ^ 2 = 289 := by\n      have h₅₂ : m * n = 288 := h₃\n      have h₅₃ : m = n + 2 := h₄\n      rw [h₅₃] at h₅₂\n      ring_nf at h₅₂ ⊢\n      nlinarith\n    have h₅₄ : n + 1 = 17 := by\n      have h₅₅ : (n + 1) ^ 2 = 289 := h₅₁\n      have h₅₆ : n + 1 ≤ 17 := by\n        nlinarith\n      have h₅₇ : n + 1 ≥ 1 := by\n        nlinarith\n      interval_cases n + 1 <;> norm_num at h₅₅ ⊢ <;> omega\n    have h₅₈ : n = 16 := by\n      omega\n    exact h₅₈\n  \n  have h₆ : m = 18 := by\n    have h₆₁ : m = n + 2 := h₄\n    rw [h₆₁]\n    rw [h₅]\n    <;> norm_num\n  \n  exact h₆",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_521\n  (m n : ℕ)\n  (h₀ : Even m)\n  (h₁ : Even n)\n  (h₂ : m - n = 2)\n  (h₃ : m * n = 288) :\n  m = 18 := by\n  have : m = n + 2 := by omega\n  nlinarith",
    "orig_proof_length": 301,
    "simp_proof_length": 11
  },
  {
    "problem_id": "mathd_algebra_362",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_362\n  (a b : ℝ)\n  (h₀ : a^2 * b^3 = 32 / 27)\n  (h₁ : a / b^3 = 27 / 4) :\n  a + b = 8 / 3 := by\n  have h₂ : a = (27 / 4 : ℝ) * b^3 := by\n    have h₂₁ : b ≠ 0 := by\n      by_contra h\n      rw [h] at h₁\n      norm_num at h₁ ⊢\n      <;> simp_all [pow_three]\n      <;> ring_nf at *\n      <;> nlinarith\n    -- Eliminate the denominator by multiplying both sides by b^3\n    have h₂₂ : a = (27 / 4 : ℝ) * b^3 := by\n      field_simp [h₂₁, pow_ne_zero] at h₁ ⊢\n      <;> ring_nf at h₁ ⊢ <;> nlinarith\n    exact h₂₂\n  \n  have h₃ : ((27 / 4 : ℝ) * b^3)^2 * b^3 = 32 / 27 := by\n    have h₃₁ : a = (27 / 4 : ℝ) * b^3 := h₂\n    rw [h₃₁] at h₀\n    ring_nf at h₀ ⊢\n    <;>\n    (try norm_num at h₀ ⊢) <;>\n    (try linarith) <;>\n    (try nlinarith) <;>\n    (try ring_nf at h₀ ⊢ <;> nlinarith) <;>\n    (try field_simp at h₀ ⊢ <;> ring_nf at h₀ ⊢ <;> nlinarith)\n    <;>\n    nlinarith\n  \n  have h₄ : b^3 = 8 / 27 := by\n    have h₄₁ : ((27 / 4 : ℝ) * b^3)^2 * b^3 = 32 / 27 := h₃\n    have h₄₂ : (729 / 16 : ℝ) * (b^3)^3 = 32 / 27 := by\n      ring_nf at h₄₁ ⊢\n      <;> nlinarith\n    have h₄₃ : (b^3)^3 = 512 / 19683 := by\n      ring_nf at h₄₂ ⊢\n      <;> nlinarith\n    have h₄₄ : b^3 = 8 / 27 := by\n      have h₄₅ : (b^3 - 8 / 27) * ((b^3)^2 + (8 / 27) * b^3 + (64 / 729)) = 0 := by\n        nlinarith [sq_nonneg (b^3 - 8 / 27), sq_nonneg (b^3 + 8 / 27)]\n      have h₄₆ : (b^3)^2 + (8 / 27) * b^3 + (64 / 729) > 0 := by\n        nlinarith [sq_nonneg (b^3 + 4 / 27)]\n      have h₄₇ : b^3 - 8 / 27 = 0 := by\n        apply mul_left_cancel₀ (show ( (b^3)^2 + (8 / 27) * b^3 + (64 / 729) : ℝ) ≠ 0 by linarith)\n        nlinarith\n      nlinarith\n    exact h₄₄\n  \n  have h₅ : b = 2 / 3 := by\n    have h₅₁ : b^3 = 8 / 27 := h₄\n    have h₅₂ : b = 2 / 3 := by\n      -- Use the fact that the cube root of 8/27 is 2/3\n      have h₅₃ : (b - 2 / 3) * (b^2 + (2 / 3) * b + 4 / 9) = 0 := by\n        nlinarith [sq_nonneg (b - 2 / 3), sq_nonneg (b + 2 / 3)]\n      have h₅₄ : b^2 + (2 / 3) * b + 4 / 9 > 0 := by\n        nlinarith [sq_nonneg (b + 1 / 3)]\n      have h₅₅ : b - 2 / 3 = 0 := by\n        apply mul_left_cancel₀ (show (b^2 + (2 / 3) * b + 4 / 9 : ℝ) ≠ 0 by linarith)\n        nlinarith\n      nlinarith\n    exact h₅₂\n  \n  have h₆ : a = 2 := by\n    have h₆₁ : a = (27 / 4 : ℝ) * b^3 := h₂\n    rw [h₆₁]\n    have h₆₂ : b^3 = 8 / 27 := h₄\n    rw [h₆₂]\n    <;> norm_num\n    <;> linarith\n  \n  have h₇ : a + b = 8 / 3 := by\n    have h₇₁ : a = 2 := h₆\n    have h₇₂ : b = 2 / 3 := h₅\n    rw [h₇₁, h₇₂]\n    <;> norm_num\n  \n  exact h₇",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_362\n  (a b : ℝ)\n  (h₀ : a^2 * b^3 = 32 / 27)\n  (h₁ : a / b^3 = 27 / 4) :\n  a + b = 8 / 3 := by\n  have : b ≠ 0 := by\n    intro h\n    rw [h] at h₁\n    norm_num at h₁\n  have : a = 27 / 4 * b ^ 3 := by\n    field_simp [this, pow_ne_zero] at h₁\n    linarith\n  rw [this] at h₀\n  have : b ^ 3 = 8 / 27 := by\n    nlinarith [sq_nonneg (b ^ 3 - 8 / 27), sq_nonneg (b ^ 3 + 8 / 27)]\n  have : b = 2 / 3 := by\n    nlinarith [sq_nonneg (b - 2 / 3), sq_nonneg (b + 2 / 3)]\n  nlinarith",
    "orig_proof_length": 712,
    "simp_proof_length": 111
  },
  {
    "problem_id": "imo_1964_p2",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem imo_1964_p2\n  (a b c : ℝ)\n  (h₀ : 0 < a ∧ 0 < b ∧ 0 < c)\n  (h₁ : c < a + b)\n  (h₂ : b < a + c)\n  (h₃ : a < b + c) :\n  a^2 * (b + c - a) + b^2 * (c + a - b) + c^2 * (a + b - c) ≤ 3 * a * b * c := by\n  have h_main : a^2 * (b + c - a) + b^2 * (c + a - b) + c^2 * (a + b - c) ≤ 3 * a * b * c := by\n    nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a),\n      mul_pos h₀.1 h₀.2.1, mul_pos h₀.2.1 h₀.2.2, mul_pos h₀.1 h₀.2.2,\n      mul_pos (sub_pos.mpr h₁) (sub_pos.mpr h₂), mul_pos (sub_pos.mpr h₂) (sub_pos.mpr h₃),\n      mul_pos (sub_pos.mpr h₃) (sub_pos.mpr h₁),\n      sq_nonneg (a + b - c), sq_nonneg (b + c - a), sq_nonneg (c + a - b)]\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem imo_1964_p2\n  (a b c : ℝ)\n  (h₀ : 0 < a ∧ 0 < b ∧ 0 < c)\n  (h₁ : c < a + b)\n  (h₂ : b < a + c)\n  (h₃ : a < b + c) :\n  a^2 * (b + c - a) + b^2 * (c + a - b) + c^2 * (a + b - c) ≤ 3 * a * b * c := by\n  nlinarith [sq_nonneg (a - b), sq_nonneg (b - c), sq_nonneg (c - a)]",
    "orig_proof_length": 142,
    "simp_proof_length": 23
  },
  {
    "problem_id": "amc12a_2002_p13",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2002_p13\n  (a b : ℝ)\n  (h₀ : 0 < a ∧ 0 < b)\n  (h₁ : a ≠ b)\n  (h₂ : abs (a - 1/a) = 1)\n  (h₃ : abs (b - 1/b) = 1) :\n  a + b = Real.sqrt 5 := by\n  have h₄ : a + 1 / a = Real.sqrt 5 := by\n    have h₄₁ : 0 < a := h₀.1\n    have h₄₂ : (a - 1 / a) ^ 2 = 1 := by\n      have h₄₃ : abs (a - 1 / a) = 1 := h₂\n      have h₄₄ : (a - 1 / a) ^ 2 = 1 := by\n        have h₄₅ : abs (a - 1 / a) = 1 := h₂\n        have h₄₆ : (a - 1 / a) ^ 2 = 1 := by\n          cases' abs_cases (a - 1 / a) with h₄₇ h₄₇ <;>\n            nlinarith\n        exact h₄₆\n      exact h₄₄\n    have h₄₅ : a ^ 2 + 1 / a ^ 2 = 3 := by\n      have h₄₆ : (a - 1 / a) ^ 2 = 1 := h₄₂\n      have h₄₇ : a ≠ 0 := by linarith\n      field_simp [h₄₇] at h₄₆ ⊢\n      nlinarith\n    have h₄₆ : (a + 1 / a) ^ 2 = 5 := by\n      have h₄₇ : a ≠ 0 := by linarith\n      have h₄₈ : a ^ 2 + 1 / a ^ 2 = 3 := h₄₅\n      field_simp [h₄₇] at h₄₈ ⊢\n      nlinarith\n    have h₄₇ : a + 1 / a > 0 := by\n      have h₄₈ : 0 < a := h₀.1\n      have h₄₉ : 0 < 1 / a := by positivity\n      linarith\n    have h₄₈ : a + 1 / a = Real.sqrt 5 := by\n      have h₄₉ : (a + 1 / a) ^ 2 = 5 := h₄₆\n      have h₅₀ : a + 1 / a > 0 := h₄₇\n      have h₅₁ : Real.sqrt 5 > 0 := Real.sqrt_pos.mpr (by norm_num)\n      nlinarith [Real.sq_sqrt (show 0 ≤ 5 by norm_num),\n        Real.sqrt_nonneg 5]\n    exact h₄₈\n  \n  have h₅ : b + 1 / b = Real.sqrt 5 := by\n    have h₅₁ : 0 < b := h₀.2\n    have h₅₂ : (b - 1 / b) ^ 2 = 1 := by\n      have h₅₃ : abs (b - 1 / b) = 1 := h₃\n      have h₅₄ : (b - 1 / b) ^ 2 = 1 := by\n        have h₅₅ : abs (b - 1 / b) = 1 := h₃\n        have h₅₆ : (b - 1 / b) ^ 2 = 1 := by\n          cases' abs_cases (b - 1 / b) with h₅₇ h₅₇ <;>\n            nlinarith\n        exact h₅₆\n      exact h₅₄\n    have h₅₃ : b ^ 2 + 1 / b ^ 2 = 3 := by\n      have h₅₄ : (b - 1 / b) ^ 2 = 1 := h₅₂\n      have h₅₅ : b ≠ 0 := by linarith\n      field_simp [h₅₅] at h₅₄ ⊢\n      nlinarith\n    have h₅₄ : (b + 1 / b) ^ 2 = 5 := by\n      have h₅₅ : b ≠ 0 := by linarith\n      have h₅₆ : b ^ 2 + 1 / b ^ 2 = 3 := h₅₃\n      field_simp [h₅₅] at h₅₆ ⊢\n      nlinarith\n    have h₅₅ : b + 1 / b > 0 := by\n      have h₅₆ : 0 < b := h₀.2\n      have h₅₇ : 0 < 1 / b := by positivity\n      linarith\n    have h₅₆ : b + 1 / b = Real.sqrt 5 := by\n      have h₅₇ : (b + 1 / b) ^ 2 = 5 := h₅₄\n      have h₅₈ : b + 1 / b > 0 := h₅₅\n      have h₅₉ : Real.sqrt 5 > 0 := Real.sqrt_pos.mpr (by norm_num)\n      nlinarith [Real.sq_sqrt (show 0 ≤ 5 by norm_num),\n        Real.sqrt_nonneg 5]\n    exact h₅₆\n  \n  have h₆ : a * b = 1 := by\n    have h₆₁ : a + 1 / a = b + 1 / b := by\n      linarith\n    have h₆₂ : a ≠ b := h₁\n    have h₆₃ : 0 < a := h₀.1\n    have h₆₄ : 0 < b := h₀.2\n    have h₆₅ : 0 < a * b := by positivity\n    field_simp [h₆₃.ne', h₆₄.ne'] at h₆₁\n    ring_nf at h₆₁\n    have h₆₆ : (a - b) * (a * b - 1) = 0 := by\n      nlinarith\n    have h₆₇ : a - b ≠ 0 := by\n      intro h\n      apply h₆₂\n      linarith\n    have h₆₈ : a * b - 1 = 0 := by\n      apply mul_left_cancel₀ h₆₇\n      nlinarith\n    nlinarith\n  \n  have h₇ : a + b = Real.sqrt 5 := by\n    have h₇₁ : 0 < a := h₀.1\n    have h₇₂ : 0 < b := h₀.2\n    have h₇₃ : a * b = 1 := h₆\n    have h₇₄ : a + 1 / a = Real.sqrt 5 := h₄\n    have h₇₅ : 1 / a = b := by\n      have h₇₆ : a ≠ 0 := by linarith\n      have h₇₇ : b = 1 / a := by\n        field_simp [h₇₆] at h₇₃ ⊢\n        nlinarith\n      linarith\n    have h₇₆ : a + b = Real.sqrt 5 := by\n      calc\n        a + b = a + 1 / a := by rw [h₇₅]\n        _ = Real.sqrt 5 := by rw [h₇₄]\n    exact h₇₆\n  \n  apply h₇",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2002_p13\n  (a b : ℝ)\n  (h₀ : 0 < a ∧ 0 < b)\n  (h₁ : a ≠ b)\n  (h₂ : abs (a - 1/a) = 1)\n  (h₃ : abs (b - 1/b) = 1) :\n  a + b = Real.sqrt 5 := by\n  rcases h₀ with ⟨ha, hb⟩\n  have h₄ : a + 1 / a = Real.sqrt 5 := by\n    have h₅ : (a - 1 / a) ^ 2 = 1 := by\n      cases' abs_cases (a - 1 / a) with h₆ h₆ <;> nlinarith\n    have h₆ : a ^ 2 + 1 / a ^ 2 = 3 := by\n      field_simp [ha.ne'] at h₅ ⊢\n      nlinarith\n    have h₇ : (a + 1 / a) ^ 2 = 5 := by\n      field_simp [ha.ne'] at h₆ ⊢\n      nlinarith\n    have h₈ : a + 1 / a > 0 := by positivity\n    nlinarith [Real.sq_sqrt (show 0 ≤ 5 by norm_num),\n      Real.sqrt_nonneg 5]\n  have h₅ : b + 1 / b = Real.sqrt 5 := by\n    have h₆ : (b - 1 / b) ^ 2 = 1 := by\n      cases' abs_cases (b - 1 / b) with h₇ h₇ <;> nlinarith\n    have h₇ : b ^ 2 + 1 / b ^ 2 = 3 := by\n      field_simp [hb.ne'] at h₆ ⊢\n      nlinarith\n    have h₈ : (b + 1 / b) ^ 2 = 5 := by\n      field_simp [hb.ne'] at h₇ ⊢\n      nlinarith\n    have h₉ : b + 1 / b > 0 := by positivity\n    nlinarith [Real.sq_sqrt (show 0 ≤ 5 by norm_num),\n      Real.sqrt_nonneg 5]\n  have h₆ : a * b = 1 := by\n    have h₇ : a + 1 / a = b + 1 / b := by linarith\n    field_simp [ha.ne', hb.ne'] at h₇\n    ring_nf at h₇\n    apply mul_left_cancel₀ (sub_ne_zero_of_ne h₁)\n    nlinarith\n  field_simp [h₆] at h₄ h₅ ⊢\n  nlinarith",
    "orig_proof_length": 895,
    "simp_proof_length": 300
  },
  {
    "problem_id": "amc12a_2021_p3",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2021_p3\n  (x y : ℕ)\n  (h₀ : x + y = 17402)\n  (h₁ : 10∣x)\n  (h₂ : x / 10 = y) :\n  ↑x - ↑y = (14238:ℤ) := by\n  have h₃ : x = 10 * y := by\n    have h₃₁ : x / 10 = y := h₂\n    have h₃₂ : 10 ∣ x := h₁\n    have h₃₃ : x = 10 * (x / 10) := by\n      have h₃₄ : 10 * (x / 10) = x := by\n        have h₃₅ : 10 ∣ x := h₁\n        have h₃₆ : 10 * (x / 10) = x := by\n          apply Nat.mul_div_cancel'\n          exact h₃₅\n        exact h₃₆\n      linarith\n    rw [h₃₁] at h₃₃\n    <;> ring_nf at h₃₃ ⊢ <;> linarith\n  \n  have h₄ : y = 1582 := by\n    have h₄₁ : x + y = 17402 := h₀\n    have h₄₂ : x = 10 * y := h₃\n    rw [h₄₂] at h₄₁\n    ring_nf at h₄₁ ⊢\n    omega\n  \n  have h₅ : x = 15820 := by\n    have h₅₁ : x = 10 * y := h₃\n    have h₅₂ : y = 1582 := h₄\n    rw [h₅₂] at h₅₁\n    <;> norm_num at h₅₁ ⊢ <;> linarith\n  \n  have h₆ : (x : ℤ) - (y : ℤ) = (14238 : ℤ) := by\n    have h₆₁ : y = 1582 := h₄\n    have h₆₂ : x = 15820 := h₅\n    rw [h₆₂, h₆₁]\n    <;> norm_num\n    <;> simp [Int.ofNat_sub]\n    <;> norm_num\n  \n  exact h₆",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2021_p3\n  (x y : ℕ)\n  (h₀ : x + y = 17402)\n  (h₁ : 10∣x)\n  (h₂ : x / 10 = y) :\n  ↑x - ↑y = (14238:ℤ) := by\n  omega",
    "orig_proof_length": 235,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_289",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_289\n  (k t m n : ℕ)\n  (h₀ : Nat.Prime m ∧ Nat.Prime n)\n  (h₁ : t < k)\n  (h₂ : k^2 - m * k + n = 0)\n  (h₃ : t^2 - m * t + n = 0) :\n  m^n + n^m + k^t + t^k = 20 := by\n  have h₄ : n ≥ 2 := by\n    have h₄₁ : Nat.Prime n := h₀.2\n    exact Nat.Prime.two_le h₄₁\n  \n  have h₅ : k^2 - m * k + n ≥ n := by\n    have h₅₁ : k^2 - m * k ≥ 0 := by\n      -- Prove that k² - m·k is non-negative (though it might not be, but in Lean it is truncated to 0)\n      have h₅₂ : k^2 - m * k ≥ 0 := by\n        omega\n      exact h₅₂\n    -- Since k² - m·k ≥ 0, adding n to it will be at least n\n    omega\n  \n  have h₆ : k^2 - m * k + n > 0 := by\n    have h₆₁ : k^2 - m * k + n ≥ n := h₅\n    have h₆₂ : n ≥ 2 := h₄\n    omega\n  \n  have h₇ : False := by\n    have h₇₁ : k^2 - m * k + n > 0 := h₆\n    have h₇₂ : k^2 - m * k + n = 0 := h₂\n    linarith\n  \n  have h₈ : m^n + n^m + k^t + t^k = 20 := by\n    exfalso\n    exact h₇\n  \n  exact h₈",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_289\n  (k t m n : ℕ)\n  (h₀ : Nat.Prime m ∧ Nat.Prime n)\n  (h₁ : t < k)\n  (h₂ : k^2 - m * k + n = 0)\n  (h₃ : t^2 - m * t + n = 0) :\n  m^n + n^m + k^t + t^k = 20 := by\n  aesop",
    "orig_proof_length": 180,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_66",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_66 :\n  194 % 11 = 7 := by\n  have h : 194 % 11 = 7 := by\n    norm_num\n    <;> rfl\n  \n  exact h",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_66 :\n  194 % 11 = 7 := by\n  simp",
    "orig_proof_length": 16,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_235",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_235 :\n  (29 * 79 + 31 * 81) % 10 = 2 := by\n  have h₁ : (29 * 79 + 31 * 81) % 10 = 2 := by\n    norm_num [Nat.add_mod, Nat.mul_mod, Nat.mod_mod]\n    <;> rfl\n  \n  apply h₁",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_235 :\n  (29 * 79 + 31 * 81) % 10 = 2 := by\n  norm_num",
    "orig_proof_length": 31,
    "simp_proof_length": 1
  },
  {
    "problem_id": "aime_1990_p15",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1990_p15\n  (a b x y : ℝ)\n  (h₀ : a * x + b * y = 3)\n  (h₁ : a * x^2 + b * y^2 = 7)\n  (h₂ : a * x^3 + b * y^3 = 16)\n  (h₃ : a * x^4 + b * y^4 = 42) :\n  a * x^5 + b * y^5 = 20 := by\n  have h_main : a * x^5 + b * y^5 = 20 := by\n    have h₄ : a * x^5 + b * y^5 + 14 * (a * x^4 + b * y^4) - 38 * (a * x^3 + b * y^3) = 0 := by\n      nlinarith [sq_nonneg (x + y), sq_nonneg (x - y), sq_nonneg (x + y - 7),\n        sq_nonneg (x + y + 14), sq_nonneg (a * x + b * y), sq_nonneg (a * x - b * y),\n        sq_nonneg (a * x^2 + b * y^2), sq_nonneg (a * x^2 - b * y^2),\n        sq_nonneg (a * x^3 + b * y^3), sq_nonneg (a * x^3 - b * y^3)]\n    -- Use the above identity to find the value of a * x^5 + b * y^5\n    have h₅ : a * x^5 + b * y^5 + 14 * (a * x^4 + b * y^4) - 38 * (a * x^3 + b * y^3) = 0 := h₄\n    have h₆ : a * x^5 + b * y^5 = 20 := by\n      linarith\n    exact h₆\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1990_p15\n  (a b x y : ℝ)\n  (h₀ : a * x + b * y = 3)\n  (h₁ : a * x^2 + b * y^2 = 7)\n  (h₂ : a * x^3 + b * y^3 = 16)\n  (h₃ : a * x^4 + b * y^4 = 42) :\n  a * x^5 + b * y^5 = 20 := by\n  nlinarith [sq_nonneg (x - y), sq_nonneg (x + y - 7)]",
    "orig_proof_length": 258,
    "simp_proof_length": 18
  },
  {
    "problem_id": "imo_1968_p5_1",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem imo_1968_p5_1\n  (a : ℝ)\n  (f : ℝ → ℝ)\n  (h₀ : 0 < a)\n  (h₁ : ∀ x, f (x + a) = 1 / 2 + Real.sqrt (f x - (f x)^2)) :\n  ∃ b > 0, ∀ x, f (x + b) = f x := by\n  have h₂ : ∀ (x : ℝ), 1 / 2 ≤ f x ∧ f x ≤ 1 := by\n    intro x\n    have h₃ : 1 / 2 ≤ f x := by\n      have h₄ : f x = 1 / 2 + Real.sqrt (f (x - a) - (f (x - a)) ^ 2) := by\n        have h₅ := h₁ (x - a)\n        have h₆ : f ((x - a) + a) = 1 / 2 + Real.sqrt (f (x - a) - (f (x - a)) ^ 2) := h₅\n        have h₇ : (x - a) + a = x := by ring\n        rw [h₇] at h₆\n        linarith\n      rw [h₄]\n      have h₅ : Real.sqrt (f (x - a) - (f (x - a)) ^ 2) ≥ 0 := Real.sqrt_nonneg _\n      linarith\n    have h₄ : f x ≤ 1 := by\n      have h₅ : f x = 1 / 2 + Real.sqrt (f (x - a) - (f (x - a)) ^ 2) := by\n        have h₆ := h₁ (x - a)\n        have h₇ : f ((x - a) + a) = 1 / 2 + Real.sqrt (f (x - a) - (f (x - a)) ^ 2) := h₆\n        have h₈ : (x - a) + a = x := by ring\n        rw [h₈] at h₇\n        linarith\n      rw [h₅]\n      have h₆ : Real.sqrt (f (x - a) - (f (x - a)) ^ 2) ≤ 1 / 2 := by\n        have h₇ : f (x - a) - (f (x - a)) ^ 2 ≤ 1 / 4 := by\n          nlinarith [sq_nonneg (f (x - a) - 1 / 2)]\n        apply Real.sqrt_le_iff.mpr\n        constructor\n        · nlinarith\n        · nlinarith\n      linarith\n    exact ⟨h₃, h₄⟩\n  \n  have h₃ : ∀ (x : ℝ), f (x + 2 * a) = f x := by\n    intro x\n    have h₄ : f (x + 2 * a) = 1 / 2 + Real.sqrt (f (x + a) - (f (x + a)) ^ 2) := by\n      have h₅ := h₁ (x + a)\n      have h₆ : f ((x + a) + a) = 1 / 2 + Real.sqrt (f (x + a) - (f (x + a)) ^ 2) := h₅\n      have h₇ : (x + a) + a = x + 2 * a := by ring\n      rw [h₇] at h₆\n      linarith\n    rw [h₄]\n    have h₅ : f (x + a) = 1 / 2 + Real.sqrt (f x - (f x) ^ 2) := by\n      have h₆ := h₁ x\n      linarith\n    rw [h₅]\n    have h₆ : 1 / 2 ≤ f x := (h₂ x).1\n    have h₇ : f x ≤ 1 := (h₂ x).2\n    have h₈ : 0 ≤ f x - (f x) ^ 2 := by\n      nlinarith [sq_nonneg (f x - 1 / 2)]\n    have h₉ : (Real.sqrt (f x - (f x) ^ 2)) ^ 2 = f x - (f x) ^ 2 := by\n      rw [Real.sq_sqrt] <;> linarith\n    have h₁₀ : (1 / 2 + Real.sqrt (f x - (f x) ^ 2)) - (1 / 2 + Real.sqrt (f x - (f x) ^ 2)) ^ 2 = (f x - 1 / 2) ^ 2 := by\n      nlinarith [h₉, sq_nonneg (Real.sqrt (f x - (f x) ^ 2) - (f x - 1 / 2))]\n    have h₁₁ : Real.sqrt ((1 / 2 + Real.sqrt (f x - (f x) ^ 2)) - (1 / 2 + Real.sqrt (f x - (f x) ^ 2)) ^ 2) = f x - 1 / 2 := by\n      rw [h₁₀]\n      have h₁₂ : 0 ≤ f x - 1 / 2 := by linarith\n      rw [Real.sqrt_sq (by linarith)]\n      <;>\n      linarith\n    rw [h₁₁]\n    <;>\n    linarith\n  \n  have h₄ : ∃ b > 0, ∀ x, f (x + b) = f x := by\n    refine' ⟨2 * a, by linarith, _⟩\n    intro x\n    have h₅ : f (x + 2 * a) = f x := h₃ x\n    have h₆ : x + 2 * a = x + 2 * a := rfl\n    linarith\n  \n  exact h₄",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem imo_1968_p5_1\n  (a : ℝ)\n  (f : ℝ → ℝ)\n  (h₀ : 0 < a)\n  (h₁ : ∀ x, f (x + a) = 1 / 2 + Real.sqrt (f x - (f x)^2)) :\n  ∃ b > 0, ∀ x, f (x + b) = f x := by\n  use 2 * a\n  constructor\n  linarith\n  intro x\n  have h₂ := h₁ (x + a)\n  have h₃ := h₁ x\n  rw [show x + 2 * a = (x + a) + a by ring] at *\n  rw [h₂, h₃]\n  have h₄ : f x ≥ 1 / 2 := by\n    have h₅ := h₁ (x - a)\n    have h₆ := h₁ x\n    have h₇ : (x - a) + a = x := by ring\n    rw [h₇] at h₅\n    have h₈ : Real.sqrt (f (x - a) - (f (x - a)) ^ 2) ≥ 0 := Real.sqrt_nonneg _\n    linarith\n  have h₅ : f x ≤ 1 := by\n    have h₆ := h₁ (x - a)\n    have h₇ := h₁ x\n    have h₈ : (x - a) + a = x := by ring\n    rw [h₈] at h₆\n    have h₉ : Real.sqrt (f (x - a) - (f (x - a)) ^ 2) ≤ 1 / 2 := by\n      have h₁₀ : f (x - a) - (f (x - a)) ^ 2 ≤ 1 / 4 := by\n        nlinarith [sq_nonneg (f (x - a) - 1 / 2)]\n      apply Real.sqrt_le_iff.mpr\n      constructor\n      · nlinarith\n      · nlinarith\n    linarith\n  have h₆ : f x - (f x) ^ 2 ≤ 1 / 4 := by\n    nlinarith [sq_nonneg (f x - 1 / 2)]\n  have h₇ : Real.sqrt ((1 / 2 + Real.sqrt (f x - (f x) ^ 2)) - (1 / 2 + Real.sqrt (f x - (f x) ^ 2)) ^ 2) = f x - 1 / 2 := by\n    rw [Real.sqrt_eq_iff_mul_self_eq] <;> nlinarith [sq_sqrt (by nlinarith : 0 ≤ f x - (f x) ^ 2)]\n  nlinarith",
    "orig_proof_length": 892,
    "simp_proof_length": 357
  },
  {
    "problem_id": "algebra_apbpceq2_abpbcpcaeq1_aleq1on3anbleq1ancleq4on3",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_apbpceq2_abpbcpcaeq1_aleq1on3anbleq1ancleq4on3\n  (a b c : ℝ)\n  (h₀ : a ≤ b ∧ b ≤ c)\n  (h₁ : a + b + c = 2)\n  (h₂ : a * b + b * c + c * a = 1) :\n  0 ≤ a ∧ a ≤ 1 / 3 ∧ 1 / 3 ≤ b ∧ b ≤ 1 ∧ 1 ≤ c ∧ c ≤ 4 / 3 := by\n  have h₃ : a ≥ 0 := by\n    nlinarith [sq_nonneg (a + (b - 2) / 2), sq_nonneg (b - 1),\n      sq_nonneg (a - b), sq_nonneg (a - 1 / 3), sq_nonneg (b - 1 / 3),\n      sq_nonneg (c - 1), sq_nonneg (c - 4 / 3)]\n  \n  have h₄ : a ≤ 1 / 3 := by\n    nlinarith [sq_nonneg (a - 1 / 3), sq_nonneg (b - 1 / 3), sq_nonneg (c - 4 / 3),\n      sq_nonneg (a + b - 2 / 3), sq_nonneg (a + c - 2), sq_nonneg (b + c - 2),\n      mul_nonneg (sub_nonneg.mpr h₀.1) (sub_nonneg.mpr h₀.2),\n      mul_nonneg (sub_nonneg.mpr h₃) (sub_nonneg.mpr h₀.1),\n      mul_nonneg (sub_nonneg.mpr h₃) (sub_nonneg.mpr h₀.2)]\n  \n  have h₅ : 1 / 3 ≤ b := by\n    nlinarith [sq_nonneg (a - 1 / 3), sq_nonneg (b - 1 / 3), sq_nonneg (c - 4 / 3),\n      sq_nonneg (a + b - 2 / 3), sq_nonneg (a + c - 2), sq_nonneg (b + c - 2),\n      mul_nonneg (sub_nonneg.mpr h₀.1) (sub_nonneg.mpr h₀.2),\n      mul_nonneg (sub_nonneg.mpr h₃) (sub_nonneg.mpr h₀.1),\n      mul_nonneg (sub_nonneg.mpr h₃) (sub_nonneg.mpr h₀.2)]\n  \n  have h₆ : b ≤ 1 := by\n    nlinarith [sq_nonneg (a - 1 / 3), sq_nonneg (b - 1 / 3), sq_nonneg (c - 4 / 3),\n      sq_nonneg (a + b - 2 / 3), sq_nonneg (a + c - 2), sq_nonneg (b + c - 2),\n      mul_nonneg (sub_nonneg.mpr h₀.1) (sub_nonneg.mpr h₀.2),\n      mul_nonneg (sub_nonneg.mpr h₃) (sub_nonneg.mpr h₀.1),\n      mul_nonneg (sub_nonneg.mpr h₃) (sub_nonneg.mpr h₀.2)]\n  \n  have h₇ : 1 ≤ c := by\n    nlinarith [sq_nonneg (a - 1 / 3), sq_nonneg (b - 1 / 3), sq_nonneg (c - 4 / 3),\n      sq_nonneg (a + b - 2 / 3), sq_nonneg (a + c - 2), sq_nonneg (b + c - 2),\n      mul_nonneg (sub_nonneg.mpr h₀.1) (sub_nonneg.mpr h₀.2),\n      mul_nonneg (sub_nonneg.mpr h₃) (sub_nonneg.mpr h₀.1),\n      mul_nonneg (sub_nonneg.mpr h₃) (sub_nonneg.mpr h₀.2)]\n  \n  have h₈ : c ≤ 4 / 3 := by\n    nlinarith [sq_nonneg (a - 1 / 3), sq_nonneg (b - 1 / 3), sq_nonneg (c - 4 / 3),\n      sq_nonneg (a + b - 2 / 3), sq_nonneg (a + c - 2), sq_nonneg (b + c - 2),\n      mul_nonneg (sub_nonneg.mpr h₀.1) (sub_nonneg.mpr h₀.2),\n      mul_nonneg (sub_nonneg.mpr h₃) (sub_nonneg.mpr h₀.1),\n      mul_nonneg (sub_nonneg.mpr h₃) (sub_nonneg.mpr h₀.2)]\n  \n  exact ⟨h₃, h₄, h₅, h₆, h₇, h₈⟩",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_apbpceq2_abpbcpcaeq1_aleq1on3anbleq1ancleq4on3\n  (a b c : ℝ)\n  (h₀ : a ≤ b ∧ b ≤ c)\n  (h₁ : a + b + c = 2)\n  (h₂ : a * b + b * c + c * a = 1) :\n  0 ≤ a ∧ a ≤ 1 / 3 ∧ 1 / 3 ≤ b ∧ b ≤ 1 ∧ 1 ≤ c ∧ c ≤ 4 / 3 := by\n  constructor\n  nlinarith\n  constructor\n  nlinarith\n  constructor\n  nlinarith\n  constructor\n  nlinarith\n  constructor\n  nlinarith\n  nlinarith",
    "orig_proof_length": 577,
    "simp_proof_length": 11
  },
  {
    "problem_id": "amc12b_2020_p13",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2020_p13 :\n  Real.sqrt (Real.log 6 / Real.log 2 + Real.log 6 / Real.log 3) = Real.sqrt (Real.log 3 / Real.log 2) + Real.sqrt (Real.log 2 / Real.log 3) := by\n  have h_log6 : Real.log 6 = Real.log 2 + Real.log 3 := by\n    have h₁ : Real.log 6 = Real.log (2 * 3) := by norm_num\n    rw [h₁]\n    have h₂ : Real.log (2 * 3) = Real.log 2 + Real.log 3 := by\n      rw [Real.log_mul (by norm_num) (by norm_num)]\n    rw [h₂]\n    <;>\n    norm_num\n  \n  have h_lhs_squared : (Real.sqrt (Real.log 6 / Real.log 2 + Real.log 6 / Real.log 3)) ^ 2 = 2 + Real.log 3 / Real.log 2 + Real.log 2 / Real.log 3 := by\n    have h₁ : Real.log 6 / Real.log 2 + Real.log 6 / Real.log 3 = 2 + Real.log 3 / Real.log 2 + Real.log 2 / Real.log 3 := by\n      have h₂ : Real.log 6 = Real.log 2 + Real.log 3 := h_log6\n      rw [h₂]\n      have h₃ : Real.log 2 > 0 := Real.log_pos (by norm_num)\n      have h₄ : Real.log 3 > 0 := Real.log_pos (by norm_num)\n      field_simp [h₃.ne', h₄.ne']\n      <;> ring_nf\n      <;> field_simp [h₃.ne', h₄.ne']\n      <;> ring\n      <;> field_simp [h₃.ne', h₄.ne']\n      <;> linarith\n    rw [h₁]\n    have h₂ : 2 + Real.log 3 / Real.log 2 + Real.log 2 / Real.log 3 ≥ 0 := by\n      have h₃ : Real.log 2 > 0 := Real.log_pos (by norm_num)\n      have h₄ : Real.log 3 > 0 := Real.log_pos (by norm_num)\n      have h₅ : Real.log 3 / Real.log 2 > 0 := div_pos h₄ h₃\n      have h₆ : Real.log 2 / Real.log 3 > 0 := div_pos h₃ h₄\n      linarith\n    rw [Real.sq_sqrt] <;> linarith\n  \n  have h_rhs_squared : (Real.sqrt (Real.log 3 / Real.log 2) + Real.sqrt (Real.log 2 / Real.log 3)) ^ 2 = 2 + Real.log 3 / Real.log 2 + Real.log 2 / Real.log 3 := by\n    have h₁ : Real.log 2 > 0 := Real.log_pos (by norm_num)\n    have h₂ : Real.log 3 > 0 := Real.log_pos (by norm_num)\n    have h₃ : Real.log 3 / Real.log 2 > 0 := div_pos h₂ h₁\n    have h₄ : Real.log 2 / Real.log 3 > 0 := div_pos h₁ h₂\n    have h₅ : Real.sqrt (Real.log 3 / Real.log 2) ≥ 0 := Real.sqrt_nonneg _\n    have h₆ : Real.sqrt (Real.log 2 / Real.log 3) ≥ 0 := Real.sqrt_nonneg _\n    have h₇ : Real.sqrt (Real.log 3 / Real.log 2) * Real.sqrt (Real.log 2 / Real.log 3) = 1 := by\n      have h₇₁ : Real.sqrt (Real.log 3 / Real.log 2) * Real.sqrt (Real.log 2 / Real.log 3) = Real.sqrt ((Real.log 3 / Real.log 2) * (Real.log 2 / Real.log 3)) := by\n        rw [← Real.sqrt_mul] <;> positivity\n      rw [h₇₁]\n      have h₇₂ : (Real.log 3 / Real.log 2) * (Real.log 2 / Real.log 3) = 1 := by\n        field_simp [h₁.ne', h₂.ne']\n        <;> ring_nf\n        <;> field_simp [h₁.ne', h₂.ne']\n        <;> linarith\n      rw [h₇₂]\n      <;> simp [Real.sqrt_one]\n    calc\n      (Real.sqrt (Real.log 3 / Real.log 2) + Real.sqrt (Real.log 2 / Real.log 3)) ^ 2 =\n          (Real.sqrt (Real.log 3 / Real.log 2)) ^ 2 + (Real.sqrt (Real.log 2 / Real.log 3)) ^ 2 +\n            2 * (Real.sqrt (Real.log 3 / Real.log 2) * Real.sqrt (Real.log 2 / Real.log 3)) := by\n        ring_nf\n        <;>\n        nlinarith [Real.sqrt_nonneg (Real.log 3 / Real.log 2), Real.sqrt_nonneg (Real.log 2 / Real.log 3)]\n      _ = (Real.log 3 / Real.log 2) + (Real.log 2 / Real.log 3) + 2 * (Real.sqrt (Real.log 3 / Real.log 2) * Real.sqrt (Real.log 2 / Real.log 3)) := by\n        have h₈ : (Real.sqrt (Real.log 3 / Real.log 2)) ^ 2 = Real.log 3 / Real.log 2 := by\n          rw [Real.sq_sqrt (by positivity)]\n        have h₉ : (Real.sqrt (Real.log 2 / Real.log 3)) ^ 2 = Real.log 2 / Real.log 3 := by\n          rw [Real.sq_sqrt (by positivity)]\n        rw [h₈, h₉]\n      _ = (Real.log 3 / Real.log 2) + (Real.log 2 / Real.log 3) + 2 * 1 := by\n        rw [h₇]\n        <;> ring_nf\n      _ = 2 + Real.log 3 / Real.log 2 + Real.log 2 / Real.log 3 := by ring\n  \n  have h_pos_lhs : Real.sqrt (Real.log 6 / Real.log 2 + Real.log 6 / Real.log 3) ≥ 0 := by\n    apply Real.sqrt_nonneg\n  \n  have h_pos_rhs : Real.sqrt (Real.log 3 / Real.log 2) + Real.sqrt (Real.log 2 / Real.log 3) ≥ 0 := by\n    have h₁ : Real.sqrt (Real.log 3 / Real.log 2) ≥ 0 := Real.sqrt_nonneg _\n    have h₂ : Real.sqrt (Real.log 2 / Real.log 3) ≥ 0 := Real.sqrt_nonneg _\n    linarith\n  \n  have h_main : Real.sqrt (Real.log 6 / Real.log 2 + Real.log 6 / Real.log 3) = Real.sqrt (Real.log 3 / Real.log 2) + Real.sqrt (Real.log 2 / Real.log 3) := by\n    have h₁ : (Real.sqrt (Real.log 6 / Real.log 2 + Real.log 6 / Real.log 3)) ^ 2 = (Real.sqrt (Real.log 3 / Real.log 2) + Real.sqrt (Real.log 2 / Real.log 3)) ^ 2 := by\n      rw [h_lhs_squared, h_rhs_squared]\n    have h₂ : Real.sqrt (Real.log 6 / Real.log 2 + Real.log 6 / Real.log 3) ≥ 0 := h_pos_lhs\n    have h₃ : Real.sqrt (Real.log 3 / Real.log 2) + Real.sqrt (Real.log 2 / Real.log 3) ≥ 0 := h_pos_rhs\n    have h₄ : Real.sqrt (Real.log 6 / Real.log 2 + Real.log 6 / Real.log 3) = Real.sqrt (Real.log 3 / Real.log 2) + Real.sqrt (Real.log 2 / Real.log 3) := by\n      nlinarith [Real.sqrt_nonneg (Real.log 6 / Real.log 2 + Real.log 6 / Real.log 3),\n        Real.sqrt_nonneg (Real.log 3 / Real.log 2), Real.sqrt_nonneg (Real.log 2 / Real.log 3)]\n    exact h₄\n  \n  rw [h_main]",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12b_2020_p13 :\n  Real.sqrt (Real.log 6 / Real.log 2 + Real.log 6 / Real.log 3) = Real.sqrt (Real.log 3 / Real.log 2) + Real.sqrt (Real.log 2 / Real.log 3) := by\n  rw [show Real.log 6 = Real.log 2 + Real.log 3 by rw [← Real.log_mul] <;> norm_num]\n  field_simp [Real.sqrt_eq_iff_mul_self_eq]\n  ring",
    "orig_proof_length": 1085,
    "simp_proof_length": 25
  },
  {
    "problem_id": "mathd_numbertheory_234",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_234\n  (a b : ℕ)\n  (h₀ : 1 ≤ a ∧ a ≤ 9 ∧ b ≤ 9)\n  (h₁ : (10 * a + b)^3 = 912673) :\n  a + b = 16 := by\n  have h_main : a = 9 ∧ b = 7 := by\n    have h₂ : a ≤ 9 := h₀.2.1\n    have h₃ : b ≤ 9 := h₀.2.2\n    have h₄ : 1 ≤ a := h₀.1\n    interval_cases a <;> interval_cases b <;> norm_num at h₁ ⊢ <;>\n      (try omega) <;> (try norm_num at h₁ ⊢) <;> (try nlinarith)\n    <;>\n      (try\n        {\n          ring_nf at h₁\n          norm_num at h₁\n          <;> omega\n        })\n  \n  have h_sum : a + b = 16 := by\n    have h₂ : a = 9 := h_main.1\n    have h₃ : b = 7 := h_main.2\n    subst_vars\n    <;> norm_num\n  \n  exact h_sum",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_234\n  (a b : ℕ)\n  (h₀ : 1 ≤ a ∧ a ≤ 9 ∧ b ≤ 9)\n  (h₁ : (10 * a + b)^3 = 912673) :\n  a + b = 16 := by\n  have h₂ := h₀.2.1\n  have h₃ := h₀.2.2\n  interval_cases a <;> interval_cases b <;> simp_all",
    "orig_proof_length": 111,
    "simp_proof_length": 15
  },
  {
    "problem_id": "mathd_numbertheory_222",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_222\n  (b : ℕ)\n  (h₀ : Nat.lcm 120 b = 3720)\n  (h₁ : Nat.gcd 120 b = 8) :\n  b = 248 := by\n  have h₂ : 120 * b = 29760 := by\n    have h₂₁ : Nat.gcd 120 b * Nat.lcm 120 b = 120 * b := by\n      rw [Nat.gcd_mul_lcm]\n    rw [h₁, h₀] at h₂₁\n    norm_num at h₂₁ ⊢\n    <;> linarith\n  \n  have h₃ : 120 * 248 = 29760 := by\n    norm_num\n    <;> rfl\n  \n  have h₄ : 120 * b = 120 * 248 := by\n    linarith\n  \n  have h₅ : b = 248 := by\n    apply mul_left_cancel₀ (show (120 : ℕ) ≠ 0 by norm_num)\n    linarith\n  \n  apply h₅",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_222\n  (b : ℕ)\n  (h₀ : Nat.lcm 120 b = 3720)\n  (h₁ : Nat.gcd 120 b = 8) :\n  b = 248 := by\n  have := Nat.gcd_mul_lcm 120 b\n  nlinarith",
    "orig_proof_length": 99,
    "simp_proof_length": 6
  },
  {
    "problem_id": "numbertheory_aoddbdiv4asqpbsqmod8eq1",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem numbertheory_aoddbdiv4asqpbsqmod8eq1\n  (a : ℤ)\n  (b : ℤ)\n  (h₀ : Odd a)\n  (h₁ : 4 ∣ b)\n  (h₂ : b >= 0) :\n  (a^2 + b^2) % 8 = 1 := by\n  have h₃ : a^2 % 8 = 1 := by\n    have h₃₁ : a % 8 = 1 ∨ a % 8 = 3 ∨ a % 8 = 5 ∨ a % 8 = 7 := by\n      have h₃₂ : a % 2 = 1 := by\n        cases' h₀ with k hk\n        omega\n      have h₃₃ : a % 8 = 1 ∨ a % 8 = 3 ∨ a % 8 = 5 ∨ a % 8 = 7 := by\n        have : a % 8 = 1 ∨ a % 8 = 3 ∨ a % 8 = 5 ∨ a % 8 = 7 := by\n          omega\n        exact this\n      exact h₃₃\n    have h₃₄ : a ^ 2 % 8 = 1 := by\n      rcases h₃₁ with (h₃₁ | h₃₁ | h₃₁ | h₃₁)\n      · -- Case: a ≡ 1 mod 8\n        have h₃₅ : a % 8 = 1 := h₃₁\n        have h₃₆ : a ^ 2 % 8 = 1 := by\n          have : a % 8 = 1 := h₃₅\n          have : a ^ 2 % 8 = 1 := by\n            norm_num [pow_two, Int.mul_emod, this]\n          exact this\n        exact h₃₆\n      · -- Case: a ≡ 3 mod 8\n        have h₃₅ : a % 8 = 3 := h₃₁\n        have h₃₆ : a ^ 2 % 8 = 1 := by\n          have : a % 8 = 3 := h₃₅\n          have : a ^ 2 % 8 = 1 := by\n            norm_num [pow_two, Int.mul_emod, this]\n          exact this\n        exact h₃₆\n      · -- Case: a ≡ 5 mod 8\n        have h₃₅ : a % 8 = 5 := h₃₁\n        have h₃₆ : a ^ 2 % 8 = 1 := by\n          have : a % 8 = 5 := h₃₅\n          have : a ^ 2 % 8 = 1 := by\n            norm_num [pow_two, Int.mul_emod, this]\n          exact this\n        exact h₃₆\n      · -- Case: a ≡ 7 mod 8\n        have h₃₅ : a % 8 = 7 := h₃₁\n        have h₃₆ : a ^ 2 % 8 = 1 := by\n          have : a % 8 = 7 := h₃₅\n          have : a ^ 2 % 8 = 1 := by\n            norm_num [pow_two, Int.mul_emod, this]\n          exact this\n        exact h₃₆\n    exact h₃₄\n  \n  have h₄ : b^2 % 8 = 0 := by\n    have h₄₁ : (4 : ℤ) ∣ b := h₁\n    have h₄₂ : ∃ (m : ℤ), b = 4 * m := by\n      obtain ⟨m, hm⟩ := h₄₁\n      exact ⟨m, by linarith⟩\n    obtain ⟨m, hm⟩ := h₄₂\n    have h₄₃ : b ^ 2 = 16 * m ^ 2 := by\n      rw [hm]\n      ring\n      <;> norm_num\n      <;> linarith\n    have h₄₄ : b ^ 2 % 8 = 0 := by\n      rw [h₄₃]\n      have h₄₅ : (16 * m ^ 2 : ℤ) % 8 = 0 := by\n        have h₄₆ : (16 : ℤ) % 8 = 0 := by norm_num\n        have h₄₇ : (16 * m ^ 2 : ℤ) % 8 = 0 := by\n          simp [h₄₆, Int.mul_emod, pow_two]\n          <;> norm_num\n          <;> ring_nf at *\n          <;> omega\n        exact h₄₇\n      exact h₄₅\n    exact h₄₄\n  \n  have h₅ : (a^2 + b^2) % 8 = 1 := by\n    have h₅₁ : (a ^ 2 + b ^ 2) % 8 = (a ^ 2 % 8 + b ^ 2 % 8) % 8 := by\n      simp [Int.add_emod]\n    rw [h₅₁]\n    have h₅₂ : a ^ 2 % 8 = 1 := h₃\n    have h₅₃ : b ^ 2 % 8 = 0 := h₄\n    rw [h₅₂, h₅₃]\n    <;> norm_num\n    <;> omega\n  \n  exact h₅",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem numbertheory_aoddbdiv4asqpbsqmod8eq1\n  (a : ℤ)\n  (b : ℤ)\n  (h₀ : Odd a)\n  (h₁ : 4 ∣ b)\n  (h₂ : b >= 0) :\n  (a^2 + b^2) % 8 = 1 := by\n  obtain ⟨m, rfl⟩ := h₁\n  cases' h₀ with k hk\n  ring_nf\n  have : a % 8 = 1 ∨ a % 8 = 3 ∨ a % 8 = 5 ∨ a % 8 = 7 := by omega\n  rcases this with (h | h | h | h) <;> simp [h, pow_two, Int.mul_emod, Int.add_emod]",
    "orig_proof_length": 635,
    "simp_proof_length": 65
  },
  {
    "problem_id": "mathd_algebra_359",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_359\n  (y : ℝ)\n  (h₀ : y + 6 + y = 2 * 12) :\n  y = 9 := by\n  have h₁ : 2 * y + 6 = 24 := by\n    have h₁₁ : y + 6 + y = 2 * y + 6 := by\n      ring\n    rw [h₁₁] at h₀\n    norm_num at h₀ ⊢\n    <;> linarith\n  \n  have h₂ : 2 * y = 18 := by\n    have h₂₁ : 2 * y + 6 = 24 := h₁\n    have h₂₂ : 2 * y = 18 := by\n      linarith\n    exact h₂₂\n  \n  have h₃ : y = 9 := by\n    have h₃₁ : 2 * y = 18 := h₂\n    have h₃₂ : y = 9 := by\n      apply mul_left_cancel₀ (show (2 : ℝ) ≠ 0 by norm_num)\n      linarith\n    exact h₃₂\n  \n  apply h₃",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_359\n  (y : ℝ)\n  (h₀ : y + 6 + y = 2 * 12) :\n  y = 9 := by\n  linarith",
    "orig_proof_length": 124,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_288",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_288\n  (x y : ℝ)\n  (n : NNReal)\n  (h₀ : x < 0 ∧ y < 0)\n  (h₁ : abs y = 6)\n  (h₂ : Real.sqrt ((x - 8)^2 + (y - 3)^2) = 15)\n  (h₃ : Real.sqrt (x^2 + y^2) = Real.sqrt n) :\n  n = 52 := by\n  have h_y : y = -6 := by\n    have h₄ : y < 0 := h₀.2\n    have h₅ : abs y = 6 := h₁\n    have h₆ : y = -6 := by\n      rw [abs_of_neg h₄] at h₅\n      linarith\n    exact h₆\n  \n  have h_x : x = -4 := by\n    have h₄ : Real.sqrt ((x - 8) ^ 2 + (y - 3) ^ 2) = 15 := h₂\n    rw [h_y] at h₄\n    have h₅ : Real.sqrt ((x - 8) ^ 2 + (-6 - 3) ^ 2) = 15 := by simpa using h₄\n    have h₆ : (x - 8) ^ 2 + (-6 - 3) ^ 2 = 225 := by\n      have h₇ : Real.sqrt ((x - 8) ^ 2 + (-6 - 3) ^ 2) = 15 := h₅\n      have h₈ : (x - 8) ^ 2 + (-6 - 3) ^ 2 ≥ 0 := by positivity\n      have h₉ : Real.sqrt ((x - 8) ^ 2 + (-6 - 3) ^ 2) ^ 2 = (x - 8) ^ 2 + (-6 - 3) ^ 2 := by\n        rw [Real.sq_sqrt] <;> linarith\n      rw [h₇] at h₉\n      norm_num at h₉ ⊢\n      <;> linarith\n    have h₇ : (x - 8) ^ 2 = 144 := by\n      norm_num at h₆ ⊢\n      <;> nlinarith\n    have h₈ : x - 8 = 12 ∨ x - 8 = -12 := by\n      apply or_iff_not_imp_left.mpr\n      intro h₉\n      apply eq_of_sub_eq_zero\n      apply mul_left_cancel₀ (sub_ne_zero.mpr h₉)\n      nlinarith\n    have h₉ : x < 0 := h₀.1\n    cases h₈ with\n    | inl h₈ =>\n      have h₁₀ : x - 8 = 12 := h₈\n      have h₁₁ : x = 20 := by linarith\n      linarith\n    | inr h₈ =>\n      have h₁₀ : x - 8 = -12 := h₈\n      have h₁₁ : x = -4 := by linarith\n      exact h₁₁\n  \n  have h_sum_sq : x^2 + y^2 = 52 := by\n    rw [h_x, h_y]\n    norm_num\n  \n  have h_n_real : (n : ℝ) = 52 := by\n    have h₄ : Real.sqrt (x ^ 2 + y ^ 2) = Real.sqrt n := h₃\n    have h₅ : Real.sqrt (x ^ 2 + y ^ 2) ^ 2 = Real.sqrt n ^ 2 := by rw [h₄]\n    have h₆ : x ^ 2 + y ^ 2 ≥ 0 := by positivity\n    have h₇ : (n : ℝ) ≥ 0 := by exact mod_cast n.prop\n    have h₈ : Real.sqrt (x ^ 2 + y ^ 2) ^ 2 = x ^ 2 + y ^ 2 := by\n      rw [Real.sq_sqrt] <;> positivity\n    have h₉ : Real.sqrt n ^ 2 = (n : ℝ) := by\n      rw [Real.sq_sqrt] <;> positivity\n    have h₁₀ : x ^ 2 + y ^ 2 = (n : ℝ) := by\n      linarith\n    have h₁₁ : x ^ 2 + y ^ 2 = 52 := h_sum_sq\n    linarith\n  \n  have h_n : n = 52 := by\n    have h₄ : (n : ℝ) = 52 := h_n_real\n    have h₅ : (n : ℝ) = (52 : ℝ) := by norm_num [h₄]\n    have h₆ : n = 52 := by\n      -- Use the fact that the coercion from NNReal to Real is injective to deduce n = 52\n      apply NNReal.eq\n      <;> norm_num at h₅ ⊢ <;>\n      (try simp_all [NNReal.coe_eq_zero]) <;>\n      (try norm_num) <;>\n      (try linarith)\n    exact h₆\n  \n  exact h_n",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_288\n  (x y : ℝ)\n  (n : NNReal)\n  (h₀ : x < 0 ∧ y < 0)\n  (h₁ : abs y = 6)\n  (h₂ : Real.sqrt ((x - 8)^2 + (y - 3)^2) = 15)\n  (h₃ : Real.sqrt (x^2 + y^2) = Real.sqrt n) :\n  n = 52 := by\n  have : y = -6 := by\n    rw [abs_of_neg h₀.2] at h₁\n    linarith\n  subst this\n  have : x = -4 := by\n    rw [Real.sqrt_eq_iff_mul_self_eq] at h₂ <;> nlinarith\n  subst this\n  norm_num at h₃\n  exact_mod_cast h₃.symm",
    "orig_proof_length": 636,
    "simp_proof_length": 41
  },
  {
    "problem_id": "mathd_numbertheory_127",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_127 :\n  (∑ k ∈ (Finset.range 101), 2^k) % 7 = 3 := by\n  have h : (∑ k ∈ (Finset.range 101), 2^k) % 7 = 3 := by\n    rfl\n  exact h",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_127 :\n  (∑ k ∈ (Finset.range 101), 2^k) % 7 = 3 := by\n  rfl",
    "orig_proof_length": 25,
    "simp_proof_length": 1
  },
  {
    "problem_id": "amc12a_2009_p6",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2009_p6\n  (m n p q : ℝ)\n  (h₀ : p = (2 : ℝ) ^ m)\n  (h₁ : q = (3 : ℝ) ^ n) :\n  p^(2 * n) * (q^m) = (12 : ℝ)^(m * n) := by\n  have h₂ : p^(2 * n) = (2 : ℝ)^(2 * m * n) := by\n    rw [h₀]\n    have h₂₁ : ((2 : ℝ) ^ m) ^ (2 * n) = (2 : ℝ) ^ (m * (2 * n)) := by\n      rw [← Real.rpow_mul (by norm_num : (0 : ℝ) ≤ 2)]\n      <;> ring_nf\n    rw [h₂₁]\n    have h₂₂ : m * (2 * n) = 2 * m * n := by ring\n    rw [h₂₂]\n    <;> simp [mul_assoc]\n    <;> ring_nf\n  \n  have h₃ : q^m = (3 : ℝ)^(m * n) := by\n    rw [h₁]\n    have h₃₁ : ((3 : ℝ) ^ n) ^ m = (3 : ℝ) ^ (n * m) := by\n      rw [← Real.rpow_mul (by norm_num : (0 : ℝ) ≤ (3 : ℝ))]\n      <;> ring_nf\n    rw [h₃₁]\n    have h₃₂ : n * m = m * n := by ring\n    rw [h₃₂]\n    <;> simp [mul_assoc]\n    <;> ring_nf\n  \n  have h₄ : p^(2 * n) * q^m = (2 : ℝ)^(2 * m * n) * (3 : ℝ)^(m * n) := by\n    rw [h₂, h₃]\n    <;>\n    ring_nf\n    <;>\n    simp [mul_assoc]\n    <;>\n    ring_nf\n  \n  have h₅ : (12 : ℝ)^(m * n) = (2 : ℝ)^(2 * m * n) * (3 : ℝ)^(m * n) := by\n    have h₅₁ : (12 : ℝ) ^ (m * n) = (2 ^ 2 * 3 : ℝ) ^ (m * n) := by norm_num\n    rw [h₅₁]\n    have h₅₂ : (2 ^ 2 * 3 : ℝ) ^ (m * n) = (2 ^ 2 : ℝ) ^ (m * n) * (3 : ℝ) ^ (m * n) := by\n      rw [mul_rpow (by positivity) (by positivity)]\n    rw [h₅₂]\n    have h₅₃ : (2 ^ 2 : ℝ) ^ (m * n) = (2 : ℝ) ^ (2 * (m * n)) := by\n      have h₅₃₁ : (2 ^ 2 : ℝ) ^ (m * n) = (2 : ℝ) ^ (2 * (m * n)) := by\n        calc\n          (2 ^ 2 : ℝ) ^ (m * n) = (2 : ℝ) ^ (2 * (m * n)) := by\n            rw [show (2 ^ 2 : ℝ) = (2 : ℝ) ^ (2 : ℝ) by norm_num]\n            rw [← Real.rpow_mul (by positivity : (0 : ℝ) ≤ (2 : ℝ))]\n            <;> ring_nf\n            <;> field_simp\n            <;> ring_nf\n          _ = (2 : ℝ) ^ (2 * (m * n)) := by rfl\n      rw [h₅₃₁]\n    rw [h₅₃]\n    have h₅₄ : (2 : ℝ) ^ (2 * (m * n)) = (2 : ℝ) ^ (2 * m * n) := by\n      have h₅₄₁ : 2 * (m * n) = 2 * m * n := by ring\n      rw [h₅₄₁]\n    rw [h₅₄]\n    <;>\n    ring_nf\n    <;>\n    simp [mul_assoc]\n    <;>\n    ring_nf\n  \n  have h₆ : p^(2 * n) * q^m = (12 : ℝ)^(m * n) := by\n    rw [h₄]\n    rw [h₅]\n    <;>\n    ring_nf\n    <;>\n    simp [mul_assoc]\n    <;>\n    ring_nf\n  \n  apply h₆",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12a_2009_p6\n  (m n p q : ℝ)\n  (h₀ : p = (2 : ℝ) ^ m)\n  (h₁ : q = (3 : ℝ) ^ n) :\n  p^(2 * n) * (q^m) = (12 : ℝ)^(m * n) := by\n  rw [h₀, h₁]\n  rw [← Real.rpow_mul (by positivity), ← Real.rpow_mul (by positivity)]\n  rw [show (12 : ℝ) = 2 ^ 2 * 3 by norm_num]\n  rw [mul_rpow (by positivity) (by positivity)]\n  rw [show (2 ^ 2 : ℝ) = 2 ^ (2 : ℝ) by norm_num]\n  rw [← Real.rpow_mul (by positivity), mul_comm]\n  ring",
    "orig_proof_length": 722,
    "simp_proof_length": 84
  },
  {
    "problem_id": "mathd_algebra_158",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_158\n  (a : ℕ)\n  (h₀ : Even a)\n  (h₁ : ∑ k ∈ Finset.range 8, (2 * k + 1 : ℤ) - ∑ k ∈ Finset.range 5, (a + 2 * k : ℤ) = (4:ℤ)) :\n  a = 8 := by\n  have h_sum1 : (∑ k ∈ Finset.range 8, (2 * k + 1 : ℤ)) = 64 := by\n    norm_num [Finset.sum_range_succ, Finset.sum_range_succ, Finset.sum_range_succ]\n    <;> rfl\n  \n  have h_sum2 : (∑ k ∈ Finset.range 5, (a + 2 * k : ℤ)) = (5 * a + 20 : ℤ) := by\n    simp [Finset.sum_range_succ, Finset.sum_range_succ, Finset.sum_range_succ, Finset.sum_range_succ]\n    <;> ring_nf\n    <;> norm_cast\n    <;> simp [mul_add, add_mul, mul_comm, mul_left_comm, mul_assoc]\n    <;> ring_nf at *\n    <;> norm_cast at *\n    <;> omega\n  \n  have h_main : (64 : ℤ) - (5 * a + 20 : ℤ) = 4 := by\n    have h₂ : (∑ k ∈ Finset.range 8, (2 * k + 1 : ℤ)) - ∑ k ∈ Finset.range 5, (a + 2 * k : ℤ) = (4 : ℤ) := h₁\n    rw [h_sum1] at h₂\n    rw [h_sum2] at h₂\n    ring_nf at h₂ ⊢\n    <;> linarith\n  \n  have h_a : a = 8 := by\n    have h₃ : (64 : ℤ) - (5 * a + 20 : ℤ) = 4 := h_main\n    have h₄ : (a : ℤ) = 8 := by\n      linarith\n    have h₅ : a = 8 := by\n      norm_cast at h₄ ⊢\n      <;> omega\n    exact h₅\n  \n  exact h_a",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_158\n  (a : ℕ)\n  (h₀ : Even a)\n  (h₁ : ∑ k ∈ Finset.range 8, (2 * k + 1 : ℤ) - ∑ k ∈ Finset.range 5, (a + 2 * k : ℤ) = (4:ℤ)) :\n  a = 8 := by\n  simp_all [Finset.sum_range_succ]\n  linarith",
    "orig_proof_length": 252,
    "simp_proof_length": 5
  },
  {
    "problem_id": "aime_1991_p9",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1991_p9\n  (x : ℝ)\n  (m : ℚ)\n  (h₀ : 1 / Real.cos x + Real.tan x = 22 / 7)\n  (h₁ : 1 / Real.sin x + 1 / Real.tan x = m) :\n  ↑m.den + m.num = 44 := by\n  have h_cos_ne_zero : Real.cos x ≠ 0 := by\n    by_contra h\n    have h₂ : Real.cos x = 0 := by simpa using h\n    have h₃ : 1 / Real.cos x + Real.tan x = 0 := by\n      have h₄ : 1 / Real.cos x = 0 := by\n        rw [h₂]\n        simp\n      have h₅ : Real.tan x = 0 := by\n        rw [Real.tan_eq_sin_div_cos]\n        rw [h₂]\n        simp\n      linarith\n    rw [h₃] at h₀\n    norm_num at h₀ ⊢\n    <;> linarith\n  \n  have h_sin_ne_zero : Real.sin x ≠ 0 := by\n    by_contra h\n    have h₂ : Real.sin x = 0 := by simpa using h\n    have h₃ : Real.tan x = 0 := by\n      rw [Real.tan_eq_sin_div_cos]\n      rw [h₂]\n      simp\n    have h₄ : 1 / Real.cos x + Real.tan x = 1 / Real.cos x := by\n      rw [h₃]\n      <;> ring_nf\n      <;> simp [h_cos_ne_zero]\n      <;> field_simp [h_cos_ne_zero]\n      <;> ring_nf\n    rw [h₄] at h₀\n    have h₅ : 1 / Real.cos x = 22 / 7 := by linarith\n    have h₆ : Real.cos x = 7 / 22 := by\n      have h₇ : Real.cos x ≠ 0 := h_cos_ne_zero\n      have h₈ : 1 / Real.cos x = 22 / 7 := h₅\n      have h₉ : Real.cos x = 7 / 22 := by\n        have h₁₀ : Real.cos x = 7 / 22 := by\n          field_simp at h₈ ⊢\n          <;> nlinarith [Real.sin_sq_add_cos_sq x]\n        exact h₁₀\n      exact h₉\n    have h₇ : Real.sin x ^ 2 + Real.cos x ^ 2 = 1 := by\n      rw [Real.sin_sq_add_cos_sq]\n    rw [h₂, h₆] at h₇\n    norm_num at h₇\n    <;> linarith\n  \n  have h_main_eq : 7 * (1 + Real.sin x) = 22 * Real.cos x := by\n    have h₂ : 1 / Real.cos x + Real.tan x = 22 / 7 := h₀\n    have h₃ : Real.tan x = Real.sin x / Real.cos x := by\n      rw [Real.tan_eq_sin_div_cos]\n    rw [h₃] at h₂\n    have h₄ : 1 / Real.cos x + Real.sin x / Real.cos x = 22 / 7 := by\n      linarith\n    have h₅ : (1 + Real.sin x) / Real.cos x = 22 / 7 := by\n      have h₅₁ : 1 / Real.cos x + Real.sin x / Real.cos x = (1 + Real.sin x) / Real.cos x := by\n        field_simp [h_cos_ne_zero]\n        <;> ring_nf\n      rw [h₅₁] at h₄\n      linarith\n    have h₆ : 7 * (1 + Real.sin x) = 22 * Real.cos x := by\n      have h₆₁ : (1 + Real.sin x) / Real.cos x = 22 / 7 := h₅\n      have h₆₂ : Real.cos x ≠ 0 := h_cos_ne_zero\n      field_simp at h₆₁\n      <;> nlinarith [Real.sin_sq_add_cos_sq x]\n    exact h₆\n  \n  have h_sin_value : Real.sin x = 435 / 533 := by\n    have h₂ : 7 * (1 + Real.sin x) = 22 * Real.cos x := h_main_eq\n    have h₃ : Real.sin x ^ 2 + Real.cos x ^ 2 = 1 := by\n      rw [Real.sin_sq_add_cos_sq]\n    have h₄ : 533 * Real.sin x ^ 2 + 98 * Real.sin x - 435 = 0 := by\n      have h₅ : Real.cos x = (7 * (1 + Real.sin x)) / 22 := by\n        have h₅₁ : 7 * (1 + Real.sin x) = 22 * Real.cos x := h_main_eq\n        linarith\n      rw [h₅] at h₃\n      ring_nf at h₃ ⊢\n      nlinarith [Real.sin_le_one x, Real.cos_le_one x, sq_nonneg (Real.sin x - 435 / 533)]\n    have h₅ : Real.sin x = 435 / 533 := by\n      have h₅₁ : Real.sin x = 435 / 533 ∨ Real.sin x = -1 := by\n        apply or_iff_not_imp_left.mpr\n        intro h₅₂\n        apply mul_left_cancel₀ (sub_ne_zero.mpr h₅₂)\n        nlinarith [Real.sin_le_one x, Real.cos_le_one x]\n      cases h₅₁ with\n      | inl h₅₁ =>\n        exact h₅₁\n      | inr h₅₁ =>\n        have h₅₂ : Real.sin x = -1 := h₅₁\n        have h₅₃ : Real.cos x = 0 := by\n          have h₅₄ : 7 * (1 + Real.sin x) = 22 * Real.cos x := h_main_eq\n          rw [h₅₂] at h₅₄\n          nlinarith\n        exact absurd h₅₃ h_cos_ne_zero\n    exact h₅\n  \n  have h_cos_value : Real.cos x = 308 / 533 := by\n    have h₂ : 7 * (1 + Real.sin x) = 22 * Real.cos x := h_main_eq\n    have h₃ : Real.sin x = 435 / 533 := h_sin_value\n    rw [h₃] at h₂\n    have h₄ : 7 * (1 + (435 / 533 : ℝ)) = 22 * Real.cos x := by\n      exact_mod_cast h₂\n    have h₅ : Real.cos x = 308 / 533 := by\n      ring_nf at h₄ ⊢\n      linarith\n    exact h₅\n  \n  have h_m_value : (m : ℝ) = 29 / 15 := by\n    have h₂ : 1 / Real.sin x + 1 / Real.tan x = (m : ℝ) := by\n      exact_mod_cast h₁\n    have h₃ : Real.sin x = 435 / 533 := h_sin_value\n    have h₄ : Real.cos x = 308 / 533 := h_cos_value\n    have h₅ : Real.tan x = Real.sin x / Real.cos x := by\n      rw [Real.tan_eq_sin_div_cos]\n    have h₆ : 1 / Real.sin x + 1 / Real.tan x = (1 : ℝ) / Real.sin x + Real.cos x / Real.sin x := by\n      have h₆₁ : Real.tan x = Real.sin x / Real.cos x := by\n        rw [Real.tan_eq_sin_div_cos]\n      have h₆₂ : 1 / Real.tan x = Real.cos x / Real.sin x := by\n        rw [h₆₁]\n        field_simp [h_sin_ne_zero, h_cos_ne_zero]\n        <;> ring\n        <;> field_simp [h_sin_ne_zero, h_cos_ne_zero]\n        <;> ring\n      calc\n        1 / Real.sin x + 1 / Real.tan x = 1 / Real.sin x + (1 / Real.tan x) := by rfl\n        _ = 1 / Real.sin x + (Real.cos x / Real.sin x) := by rw [h₆₂]\n        _ = (1 : ℝ) / Real.sin x + Real.cos x / Real.sin x := by rfl\n    rw [h₆] at h₂\n    have h₇ : (1 : ℝ) / Real.sin x + Real.cos x / Real.sin x = (1 + Real.cos x) / Real.sin x := by\n      have h₇₁ : (1 : ℝ) / Real.sin x + Real.cos x / Real.sin x = (1 + Real.cos x) / Real.sin x := by\n        field_simp [h_sin_ne_zero]\n        <;> ring\n      rw [h₇₁]\n    rw [h₇] at h₂\n    have h₈ : (1 + Real.cos x) / Real.sin x = (m : ℝ) := by linarith\n    have h₉ : Real.sin x = 435 / 533 := h_sin_value\n    have h₁₀ : Real.cos x = 308 / 533 := h_cos_value\n    rw [h₉, h₁₀] at h₈\n    norm_num at h₈ ⊢\n    <;>\n    (try norm_num at h₈ ⊢) <;>\n    (try linarith) <;>\n    (try ring_nf at h₈ ⊢) <;>\n    (try field_simp at h₈ ⊢) <;>\n    (try norm_num at h₈ ⊢) <;>\n    (try linarith)\n    <;>\n    simp_all [div_eq_mul_inv]\n    <;>\n    ring_nf at *\n    <;>\n    norm_num at *\n    <;>\n    linarith\n  \n  have h_m_eq : m = 29 / 15 := by\n    have h₂ : (m : ℝ) = 29 / 15 := h_m_value\n    norm_cast at h₂ ⊢\n    <;>\n    (try norm_num at h₂ ⊢) <;>\n    (try field_simp at h₂ ⊢) <;>\n    (try norm_cast at h₂ ⊢) <;>\n    (try ring_nf at h₂ ⊢) <;>\n    (try norm_num at h₂ ⊢) <;>\n    (try linarith)\n    <;>\n    (try\n      {\n        rw [← Rat.cast_inj] at *\n        <;>\n        norm_num at *\n        <;>\n        linarith\n      })\n  \n  have h_final : ↑m.den + m.num = 44 := by\n    rw [h_m_eq]\n    <;> norm_num [Rat.num_div_den]\n    <;> rfl\n  \n  exact h_final",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1991_p9\n  (x : ℝ)\n  (m : ℚ)\n  (h₀ : 1 / Real.cos x + Real.tan x = 22 / 7)\n  (h₁ : 1 / Real.sin x + 1 / Real.tan x = m) :\n  ↑m.den + m.num = 44 := by\n  have h_cos_ne_zero : Real.cos x ≠ 0 := by\n    by_contra h\n    have h₂ : Real.cos x = 0 := by simpa using h\n    have h₃ : 1 / Real.cos x + Real.tan x = 0 := by\n      have h₄ : 1 / Real.cos x = 0 := by\n        rw [h₂]\n        simp\n      have h₅ : Real.tan x = 0 := by\n        rw [Real.tan_eq_sin_div_cos]\n        rw [h₂]\n        simp\n      linarith\n    rw [h₃] at h₀\n    norm_num at h₀ ⊢\n  have h_sin_ne_zero : Real.sin x ≠ 0 := by\n    by_contra h\n    have h₂ : Real.sin x = 0 := by simpa using h\n    have h₃ : Real.tan x = 0 := by\n      rw [Real.tan_eq_sin_div_cos]\n      rw [h₂]\n      simp\n    have h₄ : 1 / Real.cos x + Real.tan x = 1 / Real.cos x := by\n      rw [h₃]\n      <;> ring_nf\n    rw [h₄] at h₀\n    have h₅ : 1 / Real.cos x = 22 / 7 := by linarith\n    have h₆ : Real.cos x = 7 / 22 := by\n      have h₇ : Real.cos x ≠ 0 := h_cos_ne_zero\n      have h₈ : 1 / Real.cos x = 22 / 7 := h₅\n      have h₉ : Real.cos x = 7 / 22 := by\n        field_simp at h₈ ⊢\n        <;> nlinarith [Real.sin_sq_add_cos_sq x]\n      exact h₉\n    have h₇ : Real.sin x ^ 2 + Real.cos x ^ 2 = 1 := by\n      rw [Real.sin_sq_add_cos_sq]\n    rw [h₂, h₆] at h₇\n    norm_num at h₇\n  have h_main_eq : 7 * (1 + Real.sin x) = 22 * Real.cos x := by\n    have h₂ : 1 / Real.cos x + Real.tan x = 22 / 7 := h₀\n    have h₃ : Real.tan x = Real.sin x / Real.cos x := by\n      rw [Real.tan_eq_sin_div_cos]\n    rw [h₃] at h₂\n    field_simp at h₂ ⊢\n    linarith [Real.sin_sq_add_cos_sq x]\n  have h_sin_value : Real.sin x = 435 / 533 := by\n    have h₂ : 7 * (1 + Real.sin x) = 22 * Real.cos x := h_main_eq\n    have h₃ : Real.sin x ^ 2 + Real.cos x ^ 2 = 1 := by\n      rw [Real.sin_sq_add_cos_sq]\n    have h₄ : 533 * Real.sin x ^ 2 + 98 * Real.sin x - 435 = 0 := by\n      have h₅ : Real.cos x = (7 * (1 + Real.sin x)) / 22 := by\n        have h₅₁ : 7 * (1 + Real.sin x) = 22 * Real.cos x := h_main_eq\n        linarith\n      rw [h₅] at h₃\n      ring_nf at h₃ ⊢\n      nlinarith [Real.sin_le_one x, Real.cos_le_one x, sq_nonneg (Real.sin x - 435 / 533)]\n    have h₅ : Real.sin x = 435 / 533 := by\n      have h₅₁ : Real.sin x = 435 / 533 ∨ Real.sin x = -1 := by\n        apply or_iff_not_imp_left.mpr\n        intro h₅₂\n        apply mul_left_cancel₀ (sub_ne_zero.mpr h₅₂)\n        nlinarith [Real.sin_le_one x, Real.cos_le_one x]\n      cases h₅₁ with\n      | inl h₅₁ =>\n        exact h₅₁\n      | inr h₅₁ =>\n        have h₅₂ : Real.sin x = -1 := h₅₁\n        have h₅₃ : Real.cos x = 0 := by\n          have h₅₄ : 7 * (1 + Real.sin x) = 22 * Real.cos x := h_main_eq\n          rw [h₅₂] at h₅₄\n          nlinarith\n        exact absurd h₅₃ h_cos_ne_zero\n    exact h₅\n  have h_cos_value : Real.cos x = 308 / 533 := by\n    have h₂ : 7 * (1 + Real.sin x) = 22 * Real.cos x := h_main_eq\n    have h₃ : Real.sin x = 435 / 533 := h_sin_value\n    rw [h₃] at h₂\n    ring_nf at h₂ ⊢\n    linarith\n  have h_m_value : (m : ℝ) = 29 / 15 := by\n    have h₂ : 1 / Real.sin x + 1 / Real.tan x = (m : ℝ) := by\n      exact_mod_cast h₁\n    have h₃ : Real.sin x = 435 / 533 := h_sin_value\n    have h₄ : Real.cos x = 308 / 533 := h_cos_value\n    have h₅ : Real.tan x = Real.sin x / Real.cos x := by\n      rw [Real.tan_eq_sin_div_cos]\n    rw [h₅] at h₂\n    have h₆ : 1 / Real.sin x + 1 / (Real.sin x / Real.cos x) = (1 + Real.cos x) / Real.sin x := by\n      field_simp [h_sin_ne_zero, h_cos_ne_zero]\n    rw [h₆] at h₂\n    have h₇ : (1 + Real.cos x) / Real.sin x = (m : ℝ) := by linarith\n    have h₈ : Real.sin x = 435 / 533 := h_sin_value\n    have h₉ : Real.cos x = 308 / 533 := h_cos_value\n    rw [h₈, h₉] at h₇\n    norm_num at h₇ ⊢\n    <;> (try norm_num at h₇ ⊢) <;> (try linarith) \n  have h_m_eq : m = 29 / 15 := by\n    have h₂ : (m : ℝ) = 29 / 15 := h_m_value\n    norm_cast at h₂ ⊢\n    <;> (try norm_num at h₂ ⊢) <;> (try field_simp at h₂ ⊢) <;> (try norm_cast at h₂ ⊢) \n  have h_final : ↑m.den + m.num = 44 := by\n    rw [h_m_eq]\n    norm_num [Rat.num_div_den]\n  exact h_final",
    "orig_proof_length": 1342,
    "simp_proof_length": 878
  },
  {
    "problem_id": "aime_1990_p4",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1990_p4\n  (x : ℝ)\n  (h₀ : 0 < x)\n  (h₁ : x^2 - 10 * x - 29 ≠ 0)\n  (h₂ : x^2 - 10 * x - 45 ≠ 0)\n  (h₃ : x^2 - 10 * x - 69 ≠ 0)\n  (h₄ : 1 / (x^2 - 10 * x - 29) + 1 / (x^2 - 10 * x - 45) - 2 / (x^2 - 10 * x - 69) = 0) :\n  x = 13 := by\n  have h_y : x^2 - 10 * x = 39 := by\n    have h₅ : x^2 - 10 * x - 29 ≠ 0 := h₁\n    have h₆ : x^2 - 10 * x - 45 ≠ 0 := h₂\n    have h₇ : x^2 - 10 * x - 69 ≠ 0 := h₃\n    have h₈ : 1 / (x^2 - 10 * x - 29) + 1 / (x^2 - 10 * x - 45) - 2 / (x^2 - 10 * x - 69) = 0 := h₄\n    have h₉ : (x^2 - 10 * x - 45) * (x^2 - 10 * x - 69) + (x^2 - 10 * x - 29) * (x^2 - 10 * x - 69) - 2 * (x^2 - 10 * x - 29) * (x^2 - 10 * x - 45) = 0 := by\n      have h₉₁ : (x^2 - 10 * x - 29) ≠ 0 := by\n        intro h\n        apply h₅\n        linarith\n      have h₉₂ : (x^2 - 10 * x - 45) ≠ 0 := by\n        intro h\n        apply h₆\n        linarith\n      have h₉₃ : (x^2 - 10 * x - 69) ≠ 0 := by\n        intro h\n        apply h₇\n        linarith\n      field_simp [h₉₁, h₉₂, h₉₃, sub_eq_zero, add_eq_zero_iff_eq_neg] at h₈\n      nlinarith [sq_pos_of_pos h₀]\n    have h₁₀ : (x^2 - 10 * x) = 39 := by\n      nlinarith [sq_pos_of_pos h₀]\n    linarith\n  \n  have h_main : x = 13 ∨ x = -3 := by\n    have h₅ : x^2 - 10 * x - 39 = 0 := by\n      nlinarith\n    have h₆ : (x - 13) * (x + 3) = 0 := by\n      nlinarith\n    have h₇ : x - 13 = 0 ∨ x + 3 = 0 := by\n      apply eq_zero_or_eq_zero_of_mul_eq_zero h₆\n    cases h₇ with\n    | inl h₇ =>\n      have h₈ : x = 13 := by linarith\n      exact Or.inl h₈\n    | inr h₇ =>\n      have h₈ : x = -3 := by linarith\n      exact Or.inr h₈\n  \n  have h_x_pos : x = 13 := by\n    cases h_main with\n    | inl h_main =>\n      exact h_main\n    | inr h_main =>\n      have h₅ : x = -3 := h_main\n      have h₆ : 0 < x := h₀\n      rw [h₅] at h₆\n      norm_num at h₆\n      <;> linarith\n  \n  exact h_x_pos",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1990_p4\n  (x : ℝ)\n  (h₀ : 0 < x)\n  (h₁ : x^2 - 10 * x - 29 ≠ 0)\n  (h₂ : x^2 - 10 * x - 45 ≠ 0)\n  (h₃ : x^2 - 10 * x - 69 ≠ 0)\n  (h₄ : 1 / (x^2 - 10 * x - 29) + 1 / (x^2 - 10 * x - 45) - 2 / (x^2 - 10 * x - 69) = 0) :\n  x = 13 := by\n  field_simp at h₄\n  nlinarith",
    "orig_proof_length": 458,
    "simp_proof_length": 4
  },
  {
    "problem_id": "algebra_absxm1pabsxpabsxp1eqxp2_0leqxleq1",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_absxm1pabsxpabsxp1eqxp2_0leqxleq1\n  (x : ℝ)\n  (h₀ : abs (x - 1) + abs x + abs (x + 1) = x + 2) :\n  0 ≤ x ∧ x ≤ 1 := by\n  have h₁ : 0 ≤ x := by\n    have h₁₁ : abs (x + 1) + abs (x - 1) ≥ 2 := by\n      -- Prove that |x + 1| + |x - 1| ≥ 2 using the triangle inequality\n      cases' le_total 0 (x + 1) with h h <;>\n        cases' le_total 0 (x - 1) with h' h' <;>\n          cases' le_total 0 (x + 1 - (x - 1)) with h'' h'' <;>\n            simp_all [abs_of_nonneg, abs_of_nonpos, le_of_lt] <;>\n              (try { contradiction }) <;>\n                (try { linarith }) <;>\n                  (try { nlinarith })\n      <;>\n      (try { linarith })\n    have h₁₂ : abs x ≥ 0 := abs_nonneg x\n    -- Combine the inequalities to get x + 2 ≥ 2\n    have h₁₃ : abs (x - 1) + abs x + abs (x + 1) ≥ 2 := by\n      linarith [h₁₁]\n    have h₁₄ : x + 2 ≥ 2 := by linarith\n    linarith\n  \n  have h₂ : x ≤ 1 := by\n    have h₂₁ : abs (x - 1) + x = 1 := by\n      have h₂₁₁ : abs x = x := abs_of_nonneg h₁\n      have h₂₁₂ : abs (x + 1) = x + 1 := by\n        have h₂₁₃ : x + 1 ≥ 0 := by linarith\n        rw [abs_of_nonneg h₂₁₃]\n      have h₂₁₄ : abs (x - 1) + abs x + abs (x + 1) = x + 2 := h₀\n      rw [h₂₁₁, h₂₁₂] at h₂₁₄\n      ring_nf at h₂₁₄ ⊢\n      linarith\n    have h₂₂ : abs (x - 1) ≥ 0 := abs_nonneg (x - 1)\n    linarith\n  \n  exact ⟨h₁, h₂⟩",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem algebra_absxm1pabsxpabsxp1eqxp2_0leqxleq1\n  (x : ℝ)\n  (h₀ : abs (x - 1) + abs x + abs (x + 1) = x + 2) :\n  0 ≤ x ∧ x ≤ 1 := by\n  constructor <;>\n  cases' abs_cases (x - 1) with h₁ h₁ <;>\n  cases' abs_cases x with h₂ h₂ <;>\n  cases' abs_cases (x + 1) with h₃ h₃ <;>\n  linarith",
    "orig_proof_length": 286,
    "simp_proof_length": 32
  },
  {
    "problem_id": "mathd_numbertheory_541",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_541\n  (m n : ℕ)\n  (h₀ : 1 < m)\n  (h₁ : 1 < n)\n  (h₂ : m * n = 2005) :\n  m + n = 406 := by\n  have h₃ : m = 5 ∨ m = 401 := by\n    have h₄ : m ∣ 2005 := by\n      use n\n      <;> linarith\n    have h₅ : m = 5 ∨ m = 401 ∨ m = 2005 := by\n      have h₆ : m ∣ 2005 := h₄\n      have h₇ : m ≤ 2005 := Nat.le_of_dvd (by norm_num) h₆\n      interval_cases m <;> norm_num at h₆ ⊢ <;>\n        (try omega) <;>\n        (try {\n          norm_num at h₆\n          <;>\n          (try { contradiction }) <;>\n          (try {\n            have h₈ : n ≤ 2005 := by\n              nlinarith\n            interval_cases n <;> norm_num at h₂ ⊢ <;> omega\n          })\n        }) <;>\n        (try {\n          aesop\n        }) <;>\n        (try {\n          omega\n        })\n    have h₈ : m ≠ 2005 := by\n      by_contra h\n      have h₉ : m = 2005 := by omega\n      have h₁₀ : n = 1 := by\n        have h₁₁ : m * n = 2005 := h₂\n        rw [h₉] at h₁₁\n        norm_num at h₁₁ ⊢\n        <;> nlinarith\n      linarith\n    rcases h₅ with (h₅ | h₅ | h₅)\n    · exact Or.inl h₅\n    · exact Or.inr h₅\n    · exfalso\n      apply h₈\n      <;> simp_all\n  \n  have h₄ : m + n = 406 := by\n    rcases h₃ with (rfl | rfl)\n    · -- Case m = 5\n      have h₅ : n = 401 := by\n        have h₆ : 5 * n = 2005 := by\n          norm_num [h₂]\n        have h₇ : n = 401 := by\n          omega\n        exact h₇\n      rw [h₅]\n      <;> norm_num\n    · -- Case m = 401\n      have h₅ : n = 5 := by\n        have h₆ : 401 * n = 2005 := by\n          norm_num [h₂]\n        have h₇ : n = 5 := by\n          omega\n        exact h₇\n      rw [h₅]\n      <;> norm_num\n  \n  exact h₄",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_541\n  (m n : ℕ)\n  (h₀ : 1 < m)\n  (h₁ : 1 < n)\n  (h₂ : m * n = 2005) :\n  m + n = 406 := by\n  have : m ≤ 2005 := by\n    nlinarith\n  interval_cases m <;> omega",
    "orig_proof_length": 303,
    "simp_proof_length": 12
  },
  {
    "problem_id": "mathd_algebra_314",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_314\n  (n : ℕ)\n  (h₀ : n = 11) :\n  (1 / 4)^(n + 1) * 2^(2 * n) = 1 / 4 := by\n  have h₁ : (1 / 4)^(n + 1) * 2^(2 * n) = 1 / 4 := by\n    rw [h₀]\n    <;> norm_num\n    <;> rfl\n  \n  apply h₁",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_314\n  (n : ℕ)\n  (h₀ : n = 11) :\n  (1 / 4)^(n + 1) * 2^(2 * n) = 1 / 4 := by\n  simp_all",
    "orig_proof_length": 39,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_302",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_302 :\n  (Complex.I / 2)^2 = -(1 / 4) := by\n  have h_main : (Complex.I / 2 : ℂ)^2 = -(1 / 4 : ℂ) := by\n    norm_num [pow_two, Complex.ext_iff, Complex.I_mul_I, mul_comm]\n    <;> simp_all [Complex.ext_iff, pow_two, Complex.I_mul_I, mul_comm]\n    <;> norm_num\n    <;> ring_nf\n    <;> norm_num\n    <;> simp_all [Complex.ext_iff, pow_two, Complex.I_mul_I, mul_comm]\n    <;> norm_num\n    <;> linarith\n  \n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_302 :\n  (Complex.I / 2)^2 = -(1 / 4) := by\n  ring_nf\n  norm_num",
    "orig_proof_length": 68,
    "simp_proof_length": 2
  },
  {
    "problem_id": "mathd_algebra_139",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_139\n  (s : ℝ → ℝ → ℝ)\n  (h₀ : ∀ x, ∀ y, x≠0 -> y≠0 -> s x y = (1/y - 1/x) / (x-y)) :\n  s 3 11 = 1/33 := by\n  have h_main : s 3 11 = 1/33 := by\n    have h₁ : s 3 11 = (1 / (11 : ℝ) - 1 / (3 : ℝ)) / (3 - 11 : ℝ) := by\n      have h₂ := h₀ 3 11 (by norm_num) (by norm_num)\n      norm_num at h₂ ⊢\n      <;> linarith\n    rw [h₁]\n    norm_num\n    <;> field_simp\n    <;> ring_nf\n    <;> norm_num\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_139\n  (s : ℝ → ℝ → ℝ)\n  (h₀ : ∀ x, ∀ y, x≠0 -> y≠0 -> s x y = (1/y - 1/x) / (x-y)) :\n  s 3 11 = 1/33 := by\n  simp_all\n  norm_num",
    "orig_proof_length": 79,
    "simp_proof_length": 2
  },
  {
    "problem_id": "aime_1983_p2",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1983_p2\n  (x p : ℝ)\n  (f : ℝ → ℝ)\n  (h₀ : 0 < p ∧ p < 15)\n  (h₁ : p ≤ x ∧ x ≤ 15)\n  (h₂ : f x = abs (x - p) + abs (x - 15) + abs (x - p - 15)) :\n  15 ≤ f x := by\n  have h₃ : abs (x - p) = x - p := by\n    have h₃₁ : x - p ≥ 0 := by linarith\n    rw [abs_of_nonneg h₃₁]\n    <;>\n    linarith\n  \n  have h₄ : abs (x - 15) = 15 - x := by\n    have h₄₁ : x - 15 ≤ 0 := by linarith\n    rw [abs_of_nonpos h₄₁]\n    <;>\n    linarith\n  \n  have h₅ : x - p - 15 < 0 := by\n    have h₅₁ : x ≤ 15 := h₁.2\n    have h₅₂ : 0 < p := h₀.1\n    linarith\n  \n  have h₆ : abs (x - p - 15) = -(x - p - 15) := by\n    rw [abs_of_neg h₅]\n    <;>\n    linarith\n  \n  have h₇ : f x = 30 - x := by\n    rw [h₂, h₃, h₄, h₆]\n    ring_nf at *\n    <;>\n    linarith\n  \n  have h₈ : 15 ≤ f x := by\n    rw [h₇]\n    have h₈₁ : x ≤ 15 := h₁.2\n    linarith\n  \n  exact h₈",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1983_p2\n  (x p : ℝ)\n  (f : ℝ → ℝ)\n  (h₀ : 0 < p ∧ p < 15)\n  (h₁ : p ≤ x ∧ x ≤ 15)\n  (h₂ : f x = abs (x - p) + abs (x - 15) + abs (x - p - 15)) :\n  15 ≤ f x := by\n  cases' le_total 0 (x - p) with h₃ h₃ <;>\n  cases' le_total 0 (x - 15) with h₄ h₄ <;>\n  cases' le_total 0 (x - p - 15) with h₅ h₅ <;>\n  simp_all [abs_of_nonneg, abs_of_nonpos] <;>\n  linarith",
    "orig_proof_length": 180,
    "simp_proof_length": 46
  },
  {
    "problem_id": "amc12_2000_p20",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12_2000_p20\n  (x y z : ℝ)\n  (h₀ : 0 < x ∧ 0 < y ∧ 0 < z)\n  (h₁ : x + 1/y = 4)\n  (h₂ : y + 1/z = 1)\n  (h₃ : z + 1/x = 7/3) :\n  x*y*z = 1 := by\n  have h_sum : x + y + z + 1/x + 1/y + 1/z = 22/3 := by\n    have h₄ : x + y + z + 1/x + 1/y + 1/z = (x + 1/y) + (y + 1/z) + (z + 1/x) := by\n      ring\n    rw [h₄]\n    have h₅ : (x + 1/y) + (y + 1/z) + (z + 1/x) = 4 + 1 + 7/3 := by\n      linarith\n    rw [h₅]\n    norm_num\n    <;>\n    (try norm_num) <;>\n    (try linarith)\n  \n  have h_main : x*y*z + (x + y + z + 1/x + 1/y + 1/z) + 1/(x*y*z) = 28/3 := by\n    have h₄ : 0 < x := h₀.1\n    have h₅ : 0 < y := h₀.2.1\n    have h₆ : 0 < z := h₀.2.2\n    have h₇ : 0 < x * y := by positivity\n    have h₈ : 0 < x * z := by positivity\n    have h₉ : 0 < y * z := by positivity\n    have h₁₀ : 0 < x * y * z := by positivity\n    have h₁₁ : (x + 1 / y) * (y + 1 / z) * (z + 1 / x) = 28 / 3 := by\n      calc\n        (x + 1 / y) * (y + 1 / z) * (z + 1 / x) = 4 * 1 * (7 / 3 : ℝ) := by\n          rw [h₁, h₂, h₃]\n          <;> ring_nf\n        _ = 28 / 3 := by norm_num\n    have h₁₂ : (x + 1 / y) * (y + 1 / z) * (z + 1 / x) = x * y * z + (x + y + z + 1 / x + 1 / y + 1 / z) + 1 / (x * y * z) := by\n      field_simp [h₄.ne', h₅.ne', h₆.ne']\n      ring_nf\n      <;>\n      nlinarith [mul_pos h₄ h₅, mul_pos h₄ h₆, mul_pos h₅ h₆]\n    linarith\n  \n  have h_xyz_eq : x*y*z + 1/(x*y*z) = 2 := by\n    have h₄ : x*y*z + (x + y + z + 1/x + 1/y + 1/z) + 1/(x*y*z) = 28/3 := h_main\n    have h₅ : x + y + z + 1/x + 1/y + 1/z = 22/3 := h_sum\n    have h₆ : x*y*z + 1/(x*y*z) = 2 := by\n      calc\n        x*y*z + 1/(x*y*z) = (x*y*z + (x + y + z + 1/x + 1/y + 1/z) + 1/(x*y*z)) - (x + y + z + 1/x + 1/y + 1/z) := by ring\n        _ = 28/3 - 22/3 := by rw [h₄, h₅]\n        _ = 2 := by norm_num\n    exact h₆\n  \n  have h_final : x*y*z = 1 := by\n    have h₄ : 0 < x := by linarith\n    have h₅ : 0 < y := by linarith\n    have h₆ : 0 < z := by linarith\n    have h₇ : 0 < x * y * z := by positivity\n    have h₈ : x * y * z + 1 / (x * y * z) = 2 := h_xyz_eq\n    have h₉ : x * y * z = 1 := by\n      have h₁₀ : x * y * z > 0 := by positivity\n      field_simp at h₈\n      nlinarith [sq_nonneg (x * y * z - 1)]\n    exact h₉\n  \n  exact h_final",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem amc12_2000_p20\n  (x y z : ℝ)\n  (h₀ : 0 < x ∧ 0 < y ∧ 0 < z)\n  (h₁ : x + 1/y = 4)\n  (h₂ : y + 1/z = 1)\n  (h₃ : z + 1/x = 7/3) :\n  x*y*z = 1 := by\n  have h₇ := mul_pos h₀.1 h₀.2.1\n  have h₈ := mul_pos h₀.1 h₀.2.2\n  have h₉ := mul_pos h₀.2.1 h₀.2.2\n  have h₁₀ := mul_pos h₇ h₉\n  field_simp [h₀.1.ne', h₀.2.1.ne', h₀.2.2.ne'] at h₁ h₂ h₃ ⊢\n  nlinarith",
    "orig_proof_length": 759,
    "simp_proof_length": 38
  },
  {
    "problem_id": "mathd_numbertheory_150",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_150\n  (n : ℕ)\n  (h₀ : ¬ Nat.Prime (7 + 30 * n)) :\n  6 ≤ n := by\n  have h₁ : 6 ≤ n := by\n    by_contra! h\n    have h₂ : n ≤ 5 := by linarith\n    interval_cases n <;> norm_num [Nat.Prime] at h₀ ⊢ <;>\n      (try contradiction) <;>\n      (try norm_num at h₀ ⊢) <;>\n      (try contradiction)\n  exact h₁",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_150\n  (n : ℕ)\n  (h₀ : ¬ Nat.Prime (7 + 30 * n)) :\n  6 ≤ n := by\n  contrapose! h₀\n  revert n\n  decide",
    "orig_proof_length": 50,
    "simp_proof_length": 6
  },
  {
    "problem_id": "aime_1989_p8",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1989_p8\n  (a b c d e f g : ℝ)\n  (h₀ : a + 4 * b + 9 * c + 16 * d + 25 * e + 36 * f + 49 * g = 1)\n  (h₁ : 4 * a + 9 * b + 16 * c + 25 * d + 36 * e + 49 * f + 64 * g = 12)\n  (h₂ : 9 * a + 16 * b + 25 * c + 36 * d + 49 * e + 64 * f + 81 * g = 123) :\n  16 * a + 25 * b + 36 * c + 49 * d + 64 * e + 81 * f + 100 * g = 334 := by\n  have h_main : 16 * a + 25 * b + 36 * c + 49 * d + 64 * e + 81 * f + 100 * g = 334 := by\n    have h₃ : 16 * a + 25 * b + 36 * c + 49 * d + 64 * e + 81 * f + 100 * g = (a + 4 * b + 9 * c + 16 * d + 25 * e + 36 * f + 49 * g) - 3 * (4 * a + 9 * b + 16 * c + 25 * d + 36 * e + 49 * f + 64 * g) + 3 * (9 * a + 16 * b + 25 * c + 36 * d + 49 * e + 64 * f + 81 * g) := by\n      ring\n    rw [h₃]\n    rw [h₀, h₁, h₂]\n    norm_num\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem aime_1989_p8\n  (a b c d e f g : ℝ)\n  (h₀ : a + 4 * b + 9 * c + 16 * d + 25 * e + 36 * f + 49 * g = 1)\n  (h₁ : 4 * a + 9 * b + 16 * c + 25 * d + 36 * e + 49 * f + 64 * g = 12)\n  (h₂ : 9 * a + 16 * b + 25 * c + 36 * d + 49 * e + 64 * f + 81 * g = 123) :\n  16 * a + 25 * b + 36 * c + 49 * d + 64 * e + 81 * f + 100 * g = 334 := by\n  linarith",
    "orig_proof_length": 174,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_142",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_142\n  (m b : ℝ)\n  (h₀ : m * 7 + b = -1)\n  (h₁ : m * (-1) + b = 7) :\n  m + b = 5 := by\n  have h₂ : m = -1 := by\n    have h₂₁ : 8 * m = -8 := by\n      have h₂₂ : (m * 7 + b) - (m * (-1) + b) = (-1 : ℝ) - 7 := by\n        linarith\n      ring_nf at h₂₂ ⊢\n      linarith\n    -- Solve for m using 8m = -8\n    linarith\n  \n  have h₃ : b = 6 := by\n    have h₃₁ : m * (-1) + b = 7 := h₁\n    rw [h₂] at h₃₁\n    ring_nf at h₃₁ ⊢\n    linarith\n  \n  have h₄ : m + b = 5 := by\n    rw [h₂, h₃]\n    <;> norm_num\n  \n  exact h₄",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_142\n  (m b : ℝ)\n  (h₀ : m * 7 + b = -1)\n  (h₁ : m * (-1) + b = 7) :\n  m + b = 5 := by\n  linarith",
    "orig_proof_length": 117,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_400",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_400\n  (x : ℝ)\n  (h₀ : 5 + 500 / 100 * 10 = 110 / 100 * x) :\n  x = 50 := by\n  have h₁ : x = 50 := by\n    have h₂ : 5 + 500 / 100 * 10 = 110 / 100 * x := h₀\n    ring_nf at h₂ ⊢\n    -- Simplify the equation to isolate x\n    nlinarith [sq_nonneg (x - 50)]\n  exact h₁",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_400\n  (x : ℝ)\n  (h₀ : 5 + 500 / 100 * 10 = 110 / 100 * x) :\n  x = 50 := by\n  linarith",
    "orig_proof_length": 42,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_numbertheory_296",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_296\n  (n : ℕ)\n  (h₀ : 2 ≤ n)\n  (h₁ : ∃ x, x^3 = n)\n  (h₂ : ∃ t, t^4 = n) :\n  4096 ≤ n := by\n  have h_main : 4096 ≤ n := by\n    by_contra! h\n    -- Assume for contradiction that n < 4096\n    obtain ⟨t, ht⟩ := h₂\n    -- Obtain t such that t^4 = n\n    have h₃ : t ≤ 7 := by\n      -- Prove that t ≤ 7 because t^4 < 4096\n      by_contra! h₄\n      have h₅ : t ≥ 8 := by linarith\n      have h₆ : t ^ 4 ≥ 8 ^ 4 := by\n        exact Nat.pow_le_pow_of_le_left (by linarith) 4\n      have h₇ : 8 ^ 4 = 4096 := by norm_num\n      have h₈ : t ^ 4 ≥ 4096 := by\n        linarith\n      have h₉ : n ≥ 4096 := by\n        linarith\n      linarith\n    have h₄ : t ≥ 2 := by\n      -- Prove that t ≥ 2 because n ≥ 2\n      by_contra! h₅\n      have h₆ : t ≤ 1 := by linarith\n      have h₇ : t ^ 4 ≤ 1 := by\n        have : t = 0 ∨ t = 1 := by omega\n        rcases this with (rfl | rfl) <;> norm_num\n      have h₈ : n ≤ 1 := by\n        linarith\n      linarith\n    -- Check each possible value of t from 2 to 7 to see if t^4 is a cube\n    interval_cases t <;> norm_num at ht ⊢ <;>\n      (try omega) <;>\n      (try {\n        obtain ⟨x, hx⟩ := h₁\n        have h₅ : x ≤ 15 := by\n          nlinarith [pow_two_nonneg x, pow_two_nonneg (x - 1)]\n        interval_cases x <;> norm_num at hx ⊢ <;> omega\n      })\n  exact h_main",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_296\n  (n : ℕ)\n  (h₀ : 2 ≤ n)\n  (h₁ : ∃ x, x^3 = n)\n  (h₂ : ∃ t, t^4 = n) :\n  4096 ≤ n := by\n  obtain ⟨t, ht⟩ := h₂\n  by_contra! h\n  have h₃ : t ≤ 7 := by\n    by_contra! h'\n    have : t ^ 4 ≥ 8 ^ 4 := by\n      exact Nat.pow_le_pow_of_le_left (by omega) 4\n    linarith\n  interval_cases t <;> simp_all\n  <;>\n    (try {\n      obtain ⟨x, hx⟩ := h₁\n      have : x ≤ 15 := by\n        nlinarith [pow_two_nonneg x, pow_two_nonneg (x - 1)]\n      interval_cases x <;> omega\n    })",
    "orig_proof_length": 214,
    "simp_proof_length": 82
  },
  {
    "problem_id": "mathd_numbertheory_185",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_185\n  (n : ℕ)\n  (h₀ : n % 5 = 3) :\n  (2 * n) % 5 = 1 := by\n  have h₁ : (2 * n) % 5 = 1 := by\n    have h₂ : (2 * n) % 5 = (2 * (n % 5)) % 5 := by\n      simp [Nat.mul_mod, Nat.mod_mod]\n      <;> ring_nf at *\n      <;> omega\n    rw [h₂]\n    rw [h₀]\n    <;> norm_num\n    <;> rfl\n  \n  exact h₁",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_185\n  (n : ℕ)\n  (h₀ : n % 5 = 3) :\n  (2 * n) % 5 = 1 := by\n  omega",
    "orig_proof_length": 65,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_441",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_441\n  (x : ℝ)\n  (h₀ : x ≠ 0) :\n  12 / (x * x) * (x^4 / (14 * x)) * (35 / (3 * x)) = 10 := by\n  have h₁ : 12 / (x * x) * (x^4 / (14 * x)) * (35 / (3 * x)) = 10 := by\n    have h₂ : x ≠ 0 := h₀\n    have h₃ : x ^ 2 ≠ 0 := by positivity\n    have h₄ : x ^ 3 ≠ 0 := by positivity\n    have h₅ : x ^ 4 ≠ 0 := by positivity\n    -- Use field_simp to simplify the expression by clearing denominators\n    field_simp [h₂, h₃, h₄, h₅, mul_assoc]\n    -- Use ring_nf to normalize the expression\n    <;> ring_nf\n    -- Use norm_num to verify the numerical result\n    <;> norm_num\n    <;>\n    (try\n      {\n        field_simp [h₂, h₃, h₄, h₅]\n        <;> ring_nf\n        <;> norm_num\n      })\n    <;>\n    (try\n      {\n        nlinarith [sq_pos_of_ne_zero h₂]\n      })\n  -- The final result follows directly from h₁\n  exact h₁",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_441\n  (x : ℝ)\n  (h₀ : x ≠ 0) :\n  12 / (x * x) * (x^4 / (14 * x)) * (35 / (3 * x)) = 10 := by\n  field_simp\n  ring",
    "orig_proof_length": 130,
    "simp_proof_length": 2
  },
  {
    "problem_id": "mathd_numbertheory_582",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_582\n  (n : ℕ)\n  (h₀ : 0 < n)\n  (h₁ : 3∣n) :\n  ((n + 4) + (n + 6) + (n + 8)) % 9 = 0 := by\n  have h₂ : ∃ k, n = 3 * k := by\n    obtain ⟨k, hk⟩ := h₁\n    refine' ⟨k, _⟩\n    <;> linarith\n  \n  have h₃ : ((n + 4) + (n + 6) + (n + 8)) % 9 = 0 := by\n    obtain ⟨k, hk⟩ := h₂\n    have h₄ : ((n + 4) + (n + 6) + (n + 8)) = 9 * (k + 2) := by\n      rw [hk]\n      ring_nf\n      <;> omega\n    rw [h₄]\n    have h₅ : (9 * (k + 2)) % 9 = 0 := by\n      simp [Nat.mul_mod, Nat.add_mod, Nat.mod_mod]\n    exact h₅\n  \n  exact h₃",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_numbertheory_582\n  (n : ℕ)\n  (h₀ : 0 < n)\n  (h₁ : 3∣n) :\n  ((n + 4) + (n + 6) + (n + 8)) % 9 = 0 := by\n  omega",
    "orig_proof_length": 140,
    "simp_proof_length": 1
  },
  {
    "problem_id": "mathd_algebra_338",
    "orig_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_338\n  (a b c : ℝ)\n  (h₀ : 3 * a + b + c = -3)\n  (h₁ : a + 3 * b + c = 9)\n  (h₂ : a + b + 3 * c = 19) :\n  a * b * c = -56 := by\n  have h₃ : b = a + 6 := by\n    have h₃₁ : -a + b = 6 := by\n      have h₃₂ : (a + 3 * b + c) - (3 * a + b + c) = 9 - (-3) := by\n        linarith\n      linarith\n    linarith\n  \n  have h₄ : c = a + 11 := by\n    have h₄₁ : -a + c = 11 := by\n      have h₄₂ : (a + b + 3 * c) - (3 * a + b + c) = 19 - (-3) := by\n        linarith\n      linarith\n    linarith\n  \n  have h₅ : a = -4 := by\n    have h₅₁ : 3 * a + b + c = -3 := h₀\n    rw [h₃, h₄] at h₅₁\n    ring_nf at h₅₁ ⊢\n    linarith\n  \n  have h₆ : b = 2 := by\n    rw [h₃]\n    rw [h₅]\n    <;> norm_num\n  \n  have h₇ : c = 7 := by\n    rw [h₄]\n    rw [h₅]\n    <;> norm_num\n  \n  have h₈ : a * b * c = -56 := by\n    rw [h₅, h₆, h₇]\n    <;> norm_num\n  \n  exact h₈",
    "simp_proof": "import Mathlib\nimport Aesop\n\nset_option maxHeartbeats 0\n\nopen BigOperators Real Nat Topology Rat\n\ntheorem mathd_algebra_338\n  (a b c : ℝ)\n  (h₀ : 3 * a + b + c = -3)\n  (h₁ : a + 3 * b + c = 9)\n  (h₂ : a + b + 3 * c = 19) :\n  a * b * c = -56 := by\n  have : a = -4 := by linarith\n  subst_vars\n  nlinarith",
    "orig_proof_length": 214,
    "simp_proof_length": 11
  }
];